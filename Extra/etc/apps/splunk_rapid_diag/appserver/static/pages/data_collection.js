!function(I){function Q(Q){for(var g,s,A=Q[0],U=Q[1],l=Q[2],c=0,i=[];c<A.length;c++)s=A[c],Object.prototype.hasOwnProperty.call(F,s)&&F[s]&&i.push(F[s][0]),F[s]=0;for(g in U)Object.prototype.hasOwnProperty.call(U,g)&&(I[g]=U[g]);for(e&&e(Q);i.length;)i.shift()();return B.push.apply(B,l||[]),C()}function C(){for(var I,Q=0;Q<B.length;Q++){for(var C=B[Q],g=!0,A=1;A<C.length;A++){var U=C[A];0!==F[U]&&(g=!1)}g&&(B.splice(Q--,1),I=s(s.s=C[0]))}return I}var g={},F={1:0},B=[];function s(Q){if(g[Q])return g[Q].exports;var C=g[Q]={i:Q,l:!1,exports:{}};return I[Q].call(C.exports,C,C.exports,s),C.l=!0,C.exports}s.m=I,s.c=g,s.d=function(I,Q,C){s.o(I,Q)||Object.defineProperty(I,Q,{enumerable:!0,get:C})},s.r=function(I){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},s.t=function(I,Q){if(1&Q&&(I=s(I)),8&Q)return I;if(4&Q&&"object"==typeof I&&I&&I.__esModule)return I;var C=Object.create(null);if(s.r(C),Object.defineProperty(C,"default",{enumerable:!0,value:I}),2&Q&&"string"!=typeof I)for(var g in I)s.d(C,g,function(Q){return I[Q]}.bind(null,g));return C},s.n=function(I){var Q=I&&I.__esModule?function(){return I.default}:function(){return I};return s.d(Q,"a",Q),Q},s.o=function(I,Q){return Object.prototype.hasOwnProperty.call(I,Q)},s.p="";var A=window.webpackJsonp=window.webpackJsonp||[],U=A.push.bind(A);A.push=Q,A=A.slice();for(var l=0;l<A.length;l++)Q(A[l]);var e=U;B.push([448,0]),C()}({293:function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.themes = exports.lite = exports.enterprise = exports.mixin = exports.variable = undefined;\n\nvar _enterprise = __webpack_require__(185);\n\nvar _enterprise2 = _interopRequireDefault(_enterprise);\n\nvar _lite = __webpack_require__(186);\n\nvar _lite2 = _interopRequireDefault(_lite);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar variable = exports.variable = function variable(name) {\n  return function (props) {\n    return props.theme['splunk-rapid-diag'][name];\n  };\n};\nvar mixin = exports.mixin = function mixin(name) {\n  return function () {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return function (props) {\n      var _props$theme$splunkR;\n\n      return (_props$theme$splunkR = props.theme['splunk-rapid-diag'].mixins)[name].apply(_props$theme$splunkR, args);\n    };\n  };\n};\n\nvar enterprise = exports.enterprise = { 'splunk-rapid-diag': _enterprise2.default }; // prettier-ignore\nvar lite = exports.lite = { 'splunk-rapid-diag': _lite2.default }; // prettier-ignore\nvar themes = exports.themes = { enterprise: enterprise, lite: lite };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvcGFnZXMvc3RlcC13aXphcmQvdGhlbWVzLmpzPzM5YzkiXSwibmFtZXMiOlsidmFyaWFibGUiLCJwcm9wcyIsInRoZW1lIiwibmFtZSIsIm1peGluIiwiYXJncyIsIm1peGlucyIsImVudGVycHJpc2UiLCJiYXNlRW50ZXJwcmlzZSIsImxpdGUiLCJiYXNlTGl0ZSIsInRoZW1lcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7OztBQUVPLElBQU1BLDhCQUFXLFNBQVhBLFFBQVc7QUFBQSxTQUFRO0FBQUEsV0FBU0MsTUFBTUMsS0FBTixDQUFZLG1CQUFaLEVBQWlDQyxJQUFqQyxDQUFUO0FBQUEsR0FBUjtBQUFBLENBQWpCO0FBQ0EsSUFBTUMsd0JBQVEsU0FBUkEsS0FBUTtBQUFBLFNBQVE7QUFBQSxzQ0FBSUMsSUFBSjtBQUFJQSxVQUFKO0FBQUE7O0FBQUEsV0FBYTtBQUFBOztBQUFBLGFBQVMsOEJBQU1ILEtBQU4sQ0FBWSxtQkFBWixFQUFpQ0ksTUFBakMsRUFBd0NILElBQXhDLDhCQUFpREUsSUFBakQsQ0FBVDtBQUFBLEtBQWI7QUFBQSxHQUFSO0FBQUEsQ0FBZDs7QUFFQSxJQUFNRSxrQ0FBYSxFQUFFLHFCQUFxQkMsb0JBQXZCLEVBQW5CLEMsQ0FBNEQ7QUFDNUQsSUFBTUMsc0JBQU8sRUFBRSxxQkFBcUJDLGNBQXZCLEVBQWIsQyxDQUFnRDtBQUNoRCxJQUFNQywwQkFBUyxFQUFFSixzQkFBRixFQUFjRSxVQUFkLEVBQWYiLCJmaWxlIjoiMjkzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGJhc2VFbnRlcnByaXNlIGZyb20gJ0BzcGx1bmsvdGhlbWVzL2VudGVycHJpc2UnO1xuaW1wb3J0IGJhc2VMaXRlIGZyb20gJ0BzcGx1bmsvdGhlbWVzL2xpdGUnO1xuXG5leHBvcnQgY29uc3QgdmFyaWFibGUgPSBuYW1lID0+IHByb3BzID0+IHByb3BzLnRoZW1lWydzcGx1bmstcmFwaWQtZGlhZyddW25hbWVdO1xuZXhwb3J0IGNvbnN0IG1peGluID0gbmFtZSA9PiAoLi4uYXJncykgPT4gcHJvcHMgPT4gcHJvcHMudGhlbWVbJ3NwbHVuay1yYXBpZC1kaWFnJ10ubWl4aW5zW25hbWVdKC4uLmFyZ3MpO1xuXG5leHBvcnQgY29uc3QgZW50ZXJwcmlzZSA9IHsgJ3NwbHVuay1yYXBpZC1kaWFnJzogYmFzZUVudGVycHJpc2UgfTsgLy8gcHJldHRpZXItaWdub3JlXG5leHBvcnQgY29uc3QgbGl0ZSA9IHsgJ3NwbHVuay1yYXBpZC1kaWFnJzogYmFzZUxpdGUgfTsgLy8gcHJldHRpZXItaWdub3JlXG5leHBvcnQgY29uc3QgdGhlbWVzID0geyBlbnRlcnByaXNlLCBsaXRlIH07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///293\n")},448:function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _jsxFileName = '/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/src/main/webapp/pages/step-wizard/index.jsx';\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _react = __webpack_require__(0);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _styledComponents = __webpack_require__(4);\n\nvar _reactPage = __webpack_require__(128);\n\nvar _reactPage2 = _interopRequireDefault(_reactPage);\n\nvar _themes = __webpack_require__(8);\n\nvar _themes2 = __webpack_require__(135);\n\nvar _stepWizard = __webpack_require__(530);\n\nvar _stepWizard2 = _interopRequireDefault(_stepWizard);\n\nvar _themes3 = __webpack_require__(799);\n\nvar _StartStyles = __webpack_require__(800);\n\nvar _themes4 = __webpack_require__(293);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar themeName = (0, _themes2.defaultTheme)();\nvar theme = _extends({}, _themes4.themes[themeName], _themes3.themes[themeName], _themes.themes[themeName]);\n(0, _reactPage2.default)(_react2.default.createElement(\n    _styledComponents.ThemeProvider,\n    { theme: theme, __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n        },\n        __self: undefined\n    },\n    _react2.default.createElement(\n        _StartStyles.StyledContainer,\n        {\n            __source: {\n                fileName: _jsxFileName,\n                lineNumber: 21\n            },\n            __self: undefined\n        },\n        _react2.default.createElement(_stepWizard2.default, {\n            __source: {\n                fileName: _jsxFileName,\n                lineNumber: 22\n            },\n            __self: undefined\n        })\n    )\n));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvcGFnZXMvc3RlcC13aXphcmQvaW5kZXguanN4PzIzY2EiXSwibmFtZXMiOlsidGhlbWVOYW1lIiwidGhlbWUiLCJhcHBUaGVtZXMiLCJjb21wb25lbnRUaGVtZXMiLCJyZWFjdFVpVGhlbWVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOztBQUVBOzs7O0FBQ0E7O0FBQ0E7O0FBRUE7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVBLElBQU1BLFlBQVksNEJBQWxCO0FBQ0EsSUFBTUMscUJBQ0NDLGdCQUFVRixTQUFWLENBREQsRUFFQ0csZ0JBQWdCSCxTQUFoQixDQUZELEVBR0NJLGVBQWNKLFNBQWQsQ0FIRCxDQUFOO0FBS0EseUJBQ0k7QUFBQyxtQ0FBRDtBQUFBLE1BQWUsT0FBT0MsS0FBdEI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0k7QUFBQyxvQ0FBRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0ksc0NBQUMsb0JBQUQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFESjtBQURKLENBREoiLCJmaWxlIjoiNDQ4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgVGhlbWVQcm92aWRlciB9IGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcclxuXHJcbmltcG9ydCBsYXlvdXQgZnJvbSAnQHNwbHVuay9yZWFjdC1wYWdlJztcclxuaW1wb3J0IHsgdGhlbWVzIGFzIHJlYWN0VWlUaGVtZXMgfSBmcm9tICdAc3BsdW5rL3JlYWN0LXVpL3RoZW1lcyc7XHJcbmltcG9ydCB7IGRlZmF1bHRUaGVtZSB9IGZyb20gJ0BzcGx1bmsvc3BsdW5rLXV0aWxzL3RoZW1lcyc7XHJcblxyXG5pbXBvcnQgU3RlcFdpemFyZCBmcm9tICdAc3BsdW5rL3N0ZXAtd2l6YXJkJztcclxuaW1wb3J0IHsgdGhlbWVzIGFzIGNvbXBvbmVudFRoZW1lcyB9IGZyb20gJ0BzcGx1bmsvc3RlcC13aXphcmQvdGhlbWVzJztcclxuaW1wb3J0IHsgU3R5bGVkQ29udGFpbmVyIH0gZnJvbSAnLi9TdGFydFN0eWxlcyc7XHJcbmltcG9ydCB7IHRoZW1lcyBhcyBhcHBUaGVtZXMgfSBmcm9tICcuL3RoZW1lcyc7XHJcblxyXG5jb25zdCB0aGVtZU5hbWUgPSBkZWZhdWx0VGhlbWUoKTtcclxuY29uc3QgdGhlbWUgPSB7XHJcbiAgICAuLi5hcHBUaGVtZXNbdGhlbWVOYW1lXSxcclxuICAgIC4uLmNvbXBvbmVudFRoZW1lc1t0aGVtZU5hbWVdLFxyXG4gICAgLi4ucmVhY3RVaVRoZW1lc1t0aGVtZU5hbWVdLFxyXG59O1xyXG5sYXlvdXQoXHJcbiAgICA8VGhlbWVQcm92aWRlciB0aGVtZT17dGhlbWV9PlxyXG4gICAgICAgIDxTdHlsZWRDb250YWluZXI+XHJcbiAgICAgICAgICAgIDxTdGVwV2l6YXJkIC8+XHJcbiAgICAgICAgPC9TdHlsZWRDb250YWluZXI+XHJcbiAgICA8L1RoZW1lUHJvdmlkZXI+XHJcbik7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///448\n")},530:function(module,exports,__webpack_require__){"use strict";eval('var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};module.exports=/******/function(modules){// webpackBootstrap\n/******/// The module cache\n/******/var installedModules={};/******//******/// The require function\n/******/function __webpack_require__(moduleId){/******//******/// Check if module is in cache\n/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/// Create a new module (and put it into the cache)\n/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******//******/// Execute the module function\n/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******//******/// Flag the module as loaded\n/******/module.l=true;/******//******/// Return the exports of the module\n/******/return module.exports;/******/}/******//******//******/// expose the modules object (__webpack_modules__)\n/******/__webpack_require__.m=modules;/******//******/// expose the module cache\n/******/__webpack_require__.c=installedModules;/******//******/// define getter function for harmony exports\n/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{enumerable:true,get:getter});/******/}/******/};/******//******/// define __esModule on exports\n/******/__webpack_require__.r=function(exports){/******/if(typeof Symbol!==\'undefined\'&&Symbol.toStringTag){/******/Object.defineProperty(exports,Symbol.toStringTag,{value:\'Module\'});/******/}/******/Object.defineProperty(exports,\'__esModule\',{value:true});/******/};/******//******/// create a fake namespace object\n/******/// mode & 1: value is a module id, require it\n/******/// mode & 2: merge all properties of value into the ns\n/******/// mode & 4: return value when already ns object\n/******/// mode & 8|1: behave like require\n/******/__webpack_require__.t=function(value,mode){/******/if(mode&1)value=__webpack_require__(value);/******/if(mode&8)return value;/******/if(mode&4&&(typeof value===\'undefined\'?\'undefined\':_typeof(value))===\'object\'&&value&&value.__esModule)return value;/******/var ns=Object.create(null);/******/__webpack_require__.r(ns);/******/Object.defineProperty(ns,\'default\',{enumerable:true,value:value});/******/if(mode&2&&typeof value!=\'string\')for(var key in value){__webpack_require__.d(ns,key,function(key){return value[key];}.bind(null,key));}/******/return ns;/******/};/******//******/// getDefaultExport function for compatibility with non-harmony modules\n/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module[\'default\'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,\'a\',getter);/******/return getter;/******/};/******//******/// Object.prototype.hasOwnProperty.call\n/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******//******/// __webpack_public_path__\n/******/__webpack_require__.p="";/******//******//******/// Load entry module and return exports\n/******/return __webpack_require__(__webpack_require__.s=53);/******/}(/************************************************************************//******/[/* 0 *//***/function(module,exports){module.exports=__webpack_require__(0);/***/},/* 1 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/step-wizard/src/components/CollectorCard/CollectorCard.jsx";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _Card=__webpack_require__(15);var _Card2=_interopRequireDefault(_Card);var _Success=__webpack_require__(39);var _Success2=_interopRequireDefault(_Success);var _propTypes=__webpack_require__(4);var _propTypes2=_interopRequireDefault(_propTypes);var _descriptions=__webpack_require__(25);var _ErrorModal=__webpack_require__(43);var _ErrorModal2=_interopRequireDefault(_ErrorModal);var _JSON_KEY_BINDINGS=__webpack_require__(6);var _CollectorCardStyles=__webpack_require__(78);var CollectorCardStyles=_interopRequireWildcard(_CollectorCardStyles);var _PopOverText=__webpack_require__(10);var _PopOverText2=_interopRequireDefault(_PopOverText);function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key))newObj[key]=obj[key];}}newObj.default=obj;return newObj;}}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var CollectorCard=function(_Component){_inherits(CollectorCard,_Component);function CollectorCard(){var _ref,_this2=this;var _temp,_this,_ret;_classCallCheck(this,CollectorCard);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return _ret=(_temp=(_this=_possibleConstructorReturn(this,(_ref=CollectorCard.__proto__||Object.getPrototypeOf(CollectorCard)).call.apply(_ref,[this].concat(args))),_this),_this.handleClick=function(e,_ref2){var value=_ref2.value;/**\n             * Click outside modal generates `Click Away` event.\n             * Event is used for stopping propagation of click event.\n             *\n             * @info : `stopImmediatePropagation`\n             * If several listeners are attached to the same element for the same event type, they are called in the order in which they were added.\n             * If stopImmediatePropagation() is invoked during one such call, no remaining listeners will be called.\n             *\n             * @info : `stopPropagation`\n             * The stopPropagation() method of the Event interface prevents further propagation of the current event in the capturing and bubbling phases.\n             */if(e.target.nodeName==="DIV"&&e.target.className.match(/ModalLayerStyles__StyledClickAwayOverlay/g)!==null){e.stopPropagation();try{e.stopImmediatePropagation();}catch(err){}}else{var tempState=Object.assign({},_this.props.collectorObj);tempState.selected=!tempState.selected;_this.props.handler(_this.props.name,[tempState]);}},_this.handleDisable=function(){var tempState=Object.assign({},_this.props.collectorObj);tempState.selected=false;_this.props.handler(_this.props.name,[tempState]);},_this.isCardSelected=function(cardSelected){return cardSelected?_react2.default.createElement(_Success2.default,{size:"24px",__source:{fileName:_jsxFileName,lineNumber:78},__self:_this2}):_react2.default.createElement("div",{style:{marginTop:"24px"},__source:{fileName:_jsxFileName,lineNumber:78},__self:_this2});},_temp),_possibleConstructorReturn(_this,_ret);}_createClass(CollectorCard,[{key:"render",value:function render(){var _props=this.props,name=_props.name,id=_props.id,availMatrix=_props.availMatrix,collectorObj=_props.collectorObj,search_debug=_props.search_debug,isReview=_props.isReview;var triggerChildren=name==="log_monitor"||name==="resource_monitor";var selected=collectorObj.selected;var isSearchDebug=search_debug.filter(function(collector){return collector.selected===true;}).length>0;var disabled=!!(availMatrix.runningCollectors[name]||availMatrix.unavailableUtilities[name]);var disableSearchResult=isSearchDebug&&name==="search_result";var customStyle=CollectorCardStyles.card;if(this.props.customStyle){customStyle=_extends({},customStyle,this.props.customStyle);}var clickHandler=isReview||this.props.disabled?"":disabled||disableSearchResult?this.handleDisable:this.handleClick;return _react2.default.createElement(_Card2.default,{key:id,value:name,onClick:clickHandler,selected:selected&&!disabled,style:customStyle,__source:{fileName:_jsxFileName,lineNumber:97},__self:this},_react2.default.createElement(_Card2.default.Header,{__source:{fileName:_jsxFileName,lineNumber:104},__self:this},_react2.default.createElement("div",{style:CollectorCardStyles.cardHeader,__source:{fileName:_jsxFileName,lineNumber:105},__self:this},_JSON_KEY_BINDINGS.KEY_BINDING[name]),_react2.default.createElement("div",{style:{textAlign:"left"},__source:{fileName:_jsxFileName,lineNumber:106},__self:this},!isSearchDebug&&name==="resource_monitor"?_react2.default.createElement(_PopOverText2.default,{dialogueBoxStyle:{padding:"20px",width:"800px"},help:this.props.helpInfo,__source:{fileName:_jsxFileName,lineNumber:108},__self:this}):null),_react2.default.createElement("div",{style:CollectorCardStyles.cardDisable,__source:{fileName:_jsxFileName,lineNumber:114},__self:this},disabled?_react2.default.createElement(_ErrorModal2.default,{availMatrix:availMatrix,collector:name,__source:{fileName:_jsxFileName,lineNumber:116},__self:this}):disableSearchResult?null:this.isCardSelected(collectorObj.selected&&!this.props.disabled))),_react2.default.createElement(_Card2.default.Body,{style:CollectorCardStyles.cardBody,__source:{fileName:_jsxFileName,lineNumber:122},__self:this},_react2.default.createElement("div",{style:disabled||disableSearchResult||disabled?CollectorCardStyles.disabledCard:CollectorCardStyles.enabledCard,__source:{fileName:_jsxFileName,lineNumber:123},__self:this},_descriptions.descriptions[name],_react2.default.createElement("div",{style:triggerChildren?CollectorCardStyles.triggerCardChildren:CollectorCardStyles.cardChildren,__source:{fileName:_jsxFileName,lineNumber:131},__self:this},this.props.children))));}}]);return CollectorCard;}(_react.Component);CollectorCard.propTypes={/**\n     * name: name of collector\n     */name:_propTypes2.default.string.isRequired,/**\n     * collectorObj: Collector object\n     */collectorObj:_propTypes2.default.object.isRequired,/**\n     * handler: call back function to pass data to parent component\n     */handler:_propTypes2.default.func.isRequired,/**\n     * unique key for each `CollectorCard`\n     */id:_propTypes2.default.number.isRequired,/**\n     * availMatrix: object with information of `runningCollectors` and `unavailableUtilities`.\n     */availMatrix:_propTypes2.default.object.isRequired,/**\n     * disabled: is card disabled.\n     */disabled:_propTypes2.default.bool};CollectorCard.defaultProps={isReview:false,disabled:false};exports.default=CollectorCard;/***/},/* 2 *//***/function(module,exports){module.exports=__webpack_require__(136);/***/},/* 3 *//***/function(module,exports){module.exports=__webpack_require__(5);/***/},/* 4 *//***/function(module,exports){module.exports=__webpack_require__(2);/***/},/* 5 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.generateToast=exports.axiosGetCall=undefined;var _axios=__webpack_require__(40);var _axios2=_interopRequireDefault(_axios);var _config=__webpack_require__(41);var _url=__webpack_require__(2);var _Toaster=__webpack_require__(18);var _Toaster2=_interopRequireDefault(_Toaster);var _ToastConstants=__webpack_require__(19);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var createToast=(0,_Toaster.makeCreateToast)(_Toaster2.default);var axiosGetCall=function axiosGetCall(url,params){var actionURL=(0,_url.createRESTURL)(url);var message="";return _axios2.default.get(actionURL,{params:params,credentials:"include",headers:{"X-Splunk-Form-Key":_config.CSRFToken,"X-Requested-With":"XMLHttpRequest","Content-Type":"application/json"}}).catch(function(error){// Error\nif(error.response){// The request was made and the server responded with a status code\nthrow error.response;}else if(error.request){// The request was made but no response was received\nconsole.error(error);message="Error making request to "+url;generateToast(message);}else{// Something happened in setting up the request that triggered an Error\nconsole.log("Error",error.message);}});};var generateToast=function generateToast(message){createToast({type:_ToastConstants.TOAST_TYPES.ERROR,message:message,autoDismiss:true,dismissOnActionClick:true,showAction:false});};exports.axiosGetCall=axiosGetCall;exports.generateToast=generateToast;/***/},/* 6 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var KEY_BINDING=exports.KEY_BINDING={system_call_trace:"System Call Trace",stack_trace:"Stack Trace",network_packet:"Network Packet",search_result:"Search Result",splunk_diag:"Splunk Diag",iops:"IOPS",netstat:"Netstat",ps:"PS",lsof:"LSOF",interval:"Period(sec)",sampleCount:"Number of Samples",process:"Process",collection_time:"Collection Time(sec)",port:"Port",ip_address:"IP Address",search_query:"Search Query",selectedFile:"Selected File",regex:"Regex",searchRegex:"Search Regex",search_regex:"Search Regex",invert:"Invert",cpu:"CPU Usage(%)",physical_memory:"Physical Memory(MB)",virtual_memory:"Virtual Memory(MB)",single_run:"Single Run",periodic_run:"Periodic Run",periodic:"Periodic Run",log_monitor:"Log Monitor",resource_monitor:"Resource Monitor",template_tasks:"Task Templates",historical_tasks:"Historical Collections",searchDebug:"Search Debug",search_debug:"Search Debug"};/***/},/* 7 *//***/function(module,exports){module.exports=__webpack_require__(218);/***/},/* 8 *//***/function(module,exports){module.exports=__webpack_require__(58);/***/},/* 9 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});// TODO: Send this constants from backend\nvar ALL_COLLECTORS=exports.ALL_COLLECTORS=["system_call_trace","stack_trace","network_packet","search_result","iops","netstat","ps","lsof","splunk_diag"];var INIT_COLLECTORS=exports.INIT_COLLECTORS=["system_call_trace","stack_trace","network_packet","search_result","iops","netstat","ps","lsof"];var TOOLS_COLLECTORS=exports.TOOLS_COLLECTORS=["system_call_trace","stack_trace","network_packet","iops","netstat","ps","lsof"];var DUMMY_PROCESS=exports.DUMMY_PROCESS={__class__:"rapid_diag.process_abstraction.SearchProcess",owning_app:null,owning_user:null,running_app:"dummy",running_user:"dummy",savedsearch_name:"",root_sid:"",search:"search string",process:{args:"this is just a dummy process, will get replaced once user starts the search",pid:0,ppid:8888,process_type:"splunk search",name:"dummy",__class__:"rapid_diag.process_abstraction.Process"}};/***/},/* 10 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _jsxFileName=\'/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/components/PopOverText/PopOverText.jsx\';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _TaskCatalougeHeaderStyles=__webpack_require__(36);var _Popover=__webpack_require__(65);var _Popover2=_interopRequireDefault(_Popover);var _InfoCircle=__webpack_require__(20);var _InfoCircle2=_interopRequireDefault(_InfoCircle);var _Warning=__webpack_require__(66);var _Warning2=_interopRequireDefault(_Warning);var _PopOverTextStyles=__webpack_require__(67);var _Markdown=__webpack_require__(37);var _Markdown2=_interopRequireDefault(_Markdown);var _propTypes=__webpack_require__(4);var _propTypes2=_interopRequireDefault(_propTypes);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var PopOverText=function(_Component){_inherits(PopOverText,_Component);function PopOverText(props,context){_classCallCheck(this,PopOverText);var _this=_possibleConstructorReturn(this,(PopOverText.__proto__||Object.getPrototypeOf(PopOverText)).call(this,props,context));_this.handleMount=function(component){_this.setState({anchor:component});};_this.handleOpen=function(e){if(!_this.state.open){_this.setState({open:true});}e.stopPropagation();};_this.handleRequestClose=function(){_this.setState({open:false});};_this.state={open:false,anchor:null};return _this;}_createClass(PopOverText,[{key:\'render\',value:function render(){var _state=this.state,anchor=_state.anchor,open=_state.open;return _react2.default.createElement(_react.Fragment,{__source:{fileName:_jsxFileName,lineNumber:49},__self:this},_react2.default.createElement(_TaskCatalougeHeaderStyles.StyleButton,{id:this.props.id,icon:this.props.type&&this.props.type===\'warning\'?_react2.default.createElement(_Warning2.default,{style:_PopOverTextStyles.warningIconStyle,__source:{fileName:_jsxFileName,lineNumber:52},__self:this}):_react2.default.createElement(_InfoCircle2.default,{style:_PopOverTextStyles.iconStyle,__source:{fileName:_jsxFileName,lineNumber:52},__self:this}),appearance:\'pill\',onClick:this.handleOpen,ref:this.handleMount,style:this.props.buttonStyle,__source:{fileName:_jsxFileName,lineNumber:50},__self:this}),_react2.default.createElement(_Popover2.default,{open:open,anchor:anchor,onRequestClose:this.handleRequestClose,appearance:\'light\',__source:{fileName:_jsxFileName,lineNumber:57},__self:this},_react2.default.createElement(\'div\',{style:this.props.dialogueBoxStyle,__source:{fileName:_jsxFileName,lineNumber:63},__self:this},_react2.default.createElement(_Markdown2.default,{text:this.props.help,__source:{fileName:_jsxFileName,lineNumber:63},__self:this}))));}}]);return PopOverText;}(_react.Component);PopOverText.defaultProps={buttonStyle:{marginTop:-6+\'px\'},dialogueBoxStyle:_PopOverTextStyles.dialogueBoxStyle};PopOverText.propTypes={buttonStyle:_propTypes2.default.object,dialogueBoxStyle:_propTypes2.default.object};exports.default=PopOverText;/***/},/* 11 *//***/function(module,exports){module.exports=__webpack_require__(87);/***/},/* 12 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/step-wizard/src/components/CollectorWrapper/CollectorWrapper.jsx";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _SystemCallTrace=__webpack_require__(68);var _SystemCallTrace2=_interopRequireDefault(_SystemCallTrace);var _StackTrace=__webpack_require__(79);var _StackTrace2=_interopRequireDefault(_StackTrace);var _NetworkPacket=__webpack_require__(80);var _NetworkPacket2=_interopRequireDefault(_NetworkPacket);var _SearchResult=__webpack_require__(81);var _SearchResult2=_interopRequireDefault(_SearchResult);var _Iops=__webpack_require__(83);var _Iops2=_interopRequireDefault(_Iops);var _Netstat=__webpack_require__(84);var _Netstat2=_interopRequireDefault(_Netstat);var _Ps=__webpack_require__(85);var _Ps2=_interopRequireDefault(_Ps);var _Lsof=__webpack_require__(86);var _Lsof2=_interopRequireDefault(_Lsof);var _SplunkDiag=__webpack_require__(87);var _SplunkDiag2=_interopRequireDefault(_SplunkDiag);var _SearchDebug=__webpack_require__(88);var _SearchDebug2=_interopRequireDefault(_SearchDebug);var _CollectionInformation=__webpack_require__(45);var _CollectionInformation2=_interopRequireDefault(_CollectionInformation);var _DistributedCollection=__webpack_require__(46);var _DistributedCollection2=_interopRequireDefault(_DistributedCollection);var _Periodic=__webpack_require__(89);var _Periodic2=_interopRequireDefault(_Periodic);var _LogMonitor=__webpack_require__(90);var _LogMonitor2=_interopRequireDefault(_LogMonitor);var _ResourceMonitor=__webpack_require__(92);var _ResourceMonitor2=_interopRequireDefault(_ResourceMonitor);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var components={system_call_trace:_SystemCallTrace2.default,stack_trace:_StackTrace2.default,network_packet:_NetworkPacket2.default,search_result:_SearchResult2.default,iops:_Iops2.default,netstat:_Netstat2.default,ps:_Ps2.default,lsof:_Lsof2.default,splunk_diag:_SplunkDiag2.default,search_debug:_SearchDebug2.default,collection_info:_CollectionInformation2.default,distributed_collection:_DistributedCollection2.default,periodic:_Periodic2.default,log_monitor:_LogMonitor2.default,resource_monitor:_ResourceMonitor2.default};var CollectorWrapper=function(_Component){_inherits(CollectorWrapper,_Component);function CollectorWrapper(props){_classCallCheck(this,CollectorWrapper);return _possibleConstructorReturn(this,(CollectorWrapper.__proto__||Object.getPrototypeOf(CollectorWrapper)).call(this,props));}_createClass(CollectorWrapper,[{key:"render",value:function render(){var Collector=components[this.props.name];return _react2.default.createElement(Collector,_extends({},this.props,{__source:{fileName:_jsxFileName,lineNumber:43},__self:this}));}}]);return CollectorWrapper;}(_react.Component);exports.default=CollectorWrapper;/***/},/* 13 *//***/function(module,exports){module.exports=__webpack_require__(222);/***/},/* 14 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/step-wizard/src/components/NumberInput/NumberInput.jsx";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _propTypes=__webpack_require__(4);var _propTypes2=_interopRequireDefault(_propTypes);var _Number=__webpack_require__(42);var _Number2=_interopRequireDefault(_Number);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var NumberInput=function(_Component){_inherits(NumberInput,_Component);function NumberInput(){var _ref;var _temp,_this,_ret;_classCallCheck(this,NumberInput);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return _ret=(_temp=(_this=_possibleConstructorReturn(this,(_ref=NumberInput.__proto__||Object.getPrototypeOf(NumberInput)).call.apply(_ref,[this].concat(args))),_this),_this.handleChange=function(e,_ref2){var name=_ref2.name,value=_ref2.value;var tempState=Object.assign({},_this.props.collectorObj);tempState[name]=value;_this.props.handler(_this.props.collectorName,[tempState]);},_this.handleClick=function(e){var _this$props=_this.props,collectorObj=_this$props.collectorObj,handler=_this$props.handler;if(!collectorObj.selected){var tempState=Object.assign({},_this.props.collectorObj);tempState.selected=true;handler(_this.props.collectorName,[tempState]);}else{e.stopPropagation();}},_temp),_possibleConstructorReturn(_this,_ret);}_createClass(NumberInput,[{key:"render",value:function render(){var _props=this.props,name=_props.name,min=_props.min,placeholder=_props.placeholder,style=_props.style,roundTo=_props.roundTo,collectorObj=_props.collectorObj;var disabled=!collectorObj.selected;return _react2.default.createElement(_Number2.default,{name:name,value:collectorObj[name],min:min,roundTo:roundTo,placeholder:placeholder,onChange:this.handleChange,onClick:this.handleClick,disabled:disabled,style:style,inline:true,__source:{fileName:_jsxFileName,lineNumber:70},__self:this});}}]);return NumberInput;}(_react.Component);NumberInput.propTypes={/**\n     * name: name of field\n     */name:_propTypes2.default.string.isRequired,/**\n     * collectorObj: collector object\n     */collectorObj:_propTypes2.default.object,/**\n     * min: Minimum value allowed\n     */min:_propTypes2.default.number.isRequired,/**\n     * collectorName: name of collector\n     */collectorName:_propTypes2.default.string.isRequired,/**\n     * placeholder: Placeholder for textbox\n     */placeholder:_propTypes2.default.string.isRequired,/**\n     * style: css style object\n     */style:_propTypes2.default.object,/**\n     * handler: call back function to pass data to parent component\n     */handler:_propTypes2.default.func.isRequired,roundTo:_propTypes2.default.number};NumberInput.defaultProps={roundTo:5};exports.default=NumberInput;/***/},/* 15 *//***/function(module,exports){module.exports=__webpack_require__(223);/***/},/* 16 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/step-wizard/src/components/TextInput/TextInput.jsx";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _propTypes=__webpack_require__(4);var _propTypes2=_interopRequireDefault(_propTypes);var _Text=__webpack_require__(11);var _Text2=_interopRequireDefault(_Text);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}/* eslint-disable no-undef */var SPACE_KEY=32;var TextInput=function(_Component){_inherits(TextInput,_Component);function TextInput(){var _ref;var _temp,_this,_ret;_classCallCheck(this,TextInput);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return _ret=(_temp=(_this=_possibleConstructorReturn(this,(_ref=TextInput.__proto__||Object.getPrototypeOf(TextInput)).call.apply(_ref,[this].concat(args))),_this),_this.handleChange=function(e,_ref2){var name=_ref2.name,value=_ref2.value;var tempState=Object.assign({},_this.props.collectorObj);tempState[name]=value;_this.props.handler(_this.props.cardName,[tempState]);},_this.handleClick=function(e){var _this$props=_this.props,collectorObj=_this$props.collectorObj,handler=_this$props.handler,cardName=_this$props.cardName;if(!collectorObj.selected){handler(cardName,true);}else{e.stopPropagation();}},_this.handleSpace=function(e){if(e.keyCode===SPACE_KEY){e.preventDefault();}},_temp),_possibleConstructorReturn(_this,_ret);}_createClass(TextInput,[{key:"componentDidMount",value:function componentDidMount(){document.addEventListener("keyup",this.handleSpace,false);}},{key:"componentWillUnmount",value:function componentWillUnmount(){document.removeEventListener("keyup",this.handleSpace,false);}},{key:"render",value:function render(){var _props=this.props,name=_props.name,multiline=_props.multiline,placeholder=_props.placeholder,style=_props.style,collectorObj=_props.collectorObj;var disabled=!collectorObj.selected;return _react2.default.createElement(_Text2.default,{name:name,multiline:multiline,value:collectorObj[name],placeholder:placeholder,onChange:this.handleChange,onClick:this.props.disabled?"":this.handleClick,onKeyPress:this.handleSpace,disabled:disabled||this.props.disabled,style:style,inline:true,__source:{fileName:_jsxFileName,lineNumber:78},__self:this});}}]);return TextInput;}(_react.Component);TextInput.propTypes={/**\n     * name: name of field\n     */name:_propTypes2.default.string.isRequired,/**\n     * collectorObj: collector object\n     */collectorObj:_propTypes2.default.object,/**\n     * cardName: name of card\n     */cardName:_propTypes2.default.string.isRequired,/**\n     * multiline: Textbox is single-line or multi-line\n     */multiline:_propTypes2.default.bool,/**\n     * placeholder: Placeholder for textbox\n     */placeholder:_propTypes2.default.string,/**\n     * style: css style object\n     */style:_propTypes2.default.object,/**\n     * handler: call back function to pass data to parent component\n     */handler:_propTypes2.default.func.isRequired};TextInput.defaultProps={disabled:false};exports.default=TextInput;/***/},/* 17 *//***/function(module,exports){module.exports=__webpack_require__(6);/***/},/* 18 *//***/function(module,exports){module.exports=__webpack_require__(105);/***/},/* 19 *//***/function(module,exports){module.exports=__webpack_require__(147);/***/},/* 20 *//***/function(module,exports){module.exports=__webpack_require__(74);/***/},/* 21 *//***/function(module,exports){module.exports=__webpack_require__(4);/***/},/* 22 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.disableNextButton=exports.getSelectedCollectors=exports.getReviewObject=exports.getPeriodicCollector=exports.getCollectorsIn=exports.getDiagCollector=exports.getLsofCollector=exports.getSearchResultCollector=exports.getIopsCollector=exports.getNetworkPacketCollector=exports.getStackTraceCollector=exports.getSystemCallCollector=undefined;var _constants=__webpack_require__(9);var getSystemCallCollector=exports.getSystemCallCollector=function getSystemCallCollector(obj,collector){var reviewObj=obj;reviewObj.system_call_trace=true;reviewObj.processValue.system_call_trace=collector.process;reviewObj.collection_time=collector.collection_time;};var getStackTraceCollector=exports.getStackTraceCollector=function getStackTraceCollector(obj,collector){var reviewObj=obj;reviewObj.stack_trace=true;reviewObj.processValue.stack_trace=collector.process;};var getNetworkPacketCollector=exports.getNetworkPacketCollector=function getNetworkPacketCollector(obj,collector){var reviewObj=obj;reviewObj.network_packet=true;reviewObj.netpacket_port=collector.port;reviewObj.netpacket_ip_address=collector.ip_address;reviewObj.netpacket_collection_time=collector.collection_time;};var getIopsCollector=exports.getIopsCollector=function getIopsCollector(obj,collector){var reviewObj=obj;reviewObj.iops=true;reviewObj.iops_collection_time=collector.collection_time;};var getSearchResultCollector=exports.getSearchResultCollector=function getSearchResultCollector(obj,collector){var reviewObj=obj;reviewObj.search_result=true;reviewObj.search_query=collector.search_query;};var getLsofCollector=exports.getLsofCollector=function getLsofCollector(obj,collector){var reviewObj=obj;reviewObj.lsof=true;reviewObj.processValue.lsof=collector.process;};var getDiagCollector=exports.getDiagCollector=function getDiagCollector(obj,collectors){var reviewObj=obj;var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=collectors[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var collector=_step.value;if(collector.__class__.endsWith("Diag")){reviewObj.splunk_diag=true;}}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}};var getCollectorsIn=exports.getCollectorsIn=function getCollectorsIn(reviewObj,collectors){var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=collectors[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=true){var collector=_step2.value;if(collector.__class__.endsWith("SystemCallTrace")){getSystemCallCollector(reviewObj,collector);}else if(collector.__class__.endsWith("StackTrace")){getStackTraceCollector(reviewObj,collector);}else if(collector.__class__.endsWith("NetworkPacket")){getNetworkPacketCollector(reviewObj,collector);}else if(collector.__class__.endsWith("SearchResult")){getSearchResultCollector(reviewObj,collector);}else if(collector.__class__.endsWith("IOPS")){getIopsCollector(reviewObj,collector);}else if(collector.__class__.endsWith("NetStat")){reviewObj.netstat=true;}else if(collector.__class__.endsWith("PS")){reviewObj.ps=true;}else if(collector.__class__.endsWith("LSOF")){getLsofCollector(reviewObj,collector);}else if(collector.__class__.endsWith("Diag")){reviewObj.splunk_diag=true;}else if(collector.__class__.endsWith("Periodic")){getPeriodicCollector(reviewObj,collector);}}}catch(err){_didIteratorError2=true;_iteratorError2=err;}finally{try{if(!_iteratorNormalCompletion2&&_iterator2.return){_iterator2.return();}}finally{if(_didIteratorError2){throw _iteratorError2;}}}};var getPeriodicCollector=exports.getPeriodicCollector=function getPeriodicCollector(obj,collector){var reviewObj=obj;reviewObj.task_type="Periodic";reviewObj.period=collector.interval;reviewObj.no_of_samples=collector.sampleCount;if(collector.collectors&&collector.collectors.length!==0){getCollectorsIn(reviewObj,collector.collectors);}};var getReviewObject=exports.getReviewObject=function getReviewObject(file,self){var data=file;if("task"in data){data=data.task;}var collectorData=data.collectors;var reviewObj={};reviewObj.processValue={};reviewObj.name=data.name;reviewObj.description=self.state.description;reviewObj.cluster=self.state.cluster;reviewObj.selectedIndexers=self.state.selectedIndexers;var _iteratorNormalCompletion3=true;var _didIteratorError3=false;var _iteratorError3=undefined;try{for(var _iterator3=collectorData[Symbol.iterator](),_step3;!(_iteratorNormalCompletion3=(_step3=_iterator3.next()).done);_iteratorNormalCompletion3=true){var collector=_step3.value;if(collector.__class__.endsWith("Periodic")){reviewObj.task_type="Periodic";reviewObj.period=collector.interval;reviewObj.no_of_samples=collector.sampleCount;getCollectorsIn(reviewObj,collector.collectors);getDiagCollector(reviewObj,collectorData);}else if(collector.__class__.endsWith("LogMonitor")){reviewObj.trigger_type="Log Monitor";reviewObj.selectedFile=collector.selectedFile;reviewObj.regex=collector.regex;getCollectorsIn(reviewObj,collector.collectors);getDiagCollector(reviewObj,collectorData);}else if(collector.__class__.endsWith("ResourceMonitor")){reviewObj.trigger_type="Resource Monitor";collector.resource_monitor_trackers.forEach(function(tracker){var resource=tracker.metric;reviewObj[resource]=tracker.threshold;reviewObj.invert=tracker.invert;});getCollectorsIn(reviewObj,collector.collectors);getDiagCollector(reviewObj,collectorData);}else if(collector.__class__.endsWith("SearchDebug")){reviewObj.searchDebug=true;reviewObj.searchRegex=collector.search_regex;getCollectorsIn(reviewObj,collector.collectors);getDiagCollector(reviewObj,collectorData);if(reviewObj.task_type!=="Periodic"){reviewObj.task_type="Single Run";}}else{reviewObj.task_type="Single Run";getCollectorsIn(reviewObj,collectorData);getDiagCollector(reviewObj,collectorData);}}}catch(err){_didIteratorError3=true;_iteratorError3=err;}finally{try{if(!_iteratorNormalCompletion3&&_iterator3.return){_iterator3.return();}}finally{if(_didIteratorError3){throw _iteratorError3;}}}self.setState({reviewObj:reviewObj});};var getSelectedCollectors=exports.getSelectedCollectors=function getSelectedCollectors(reviewObj){var selectedCollectors={};var toolsCollectors=_constants.TOOLS_COLLECTORS;toolsCollectors.map(function(collector){if(reviewObj[collector]){selectedCollectors[collector]=true;}});return selectedCollectors;};var disableNextButton=exports.disableNextButton=function disableNextButton(self,availMatrix,selectedCollectors){var status=self.state.disableNext;Object.keys(selectedCollectors).map(function(collector){status=!!(status||availMatrix.runningCollectors[collector]||availMatrix.unavailableUtilities[collector]);});self.setState({"disableNext":status});};/***/},/* 23 *//***/function(module,exports){module.exports=__webpack_require__(224);/***/},/* 24 *//***/function(module,exports,__webpack_require__){"use strict";/* WEBPACK VAR INJECTION */(function(process){Object.defineProperty(exports,"__esModule",{value:true});exports.ProcessSelector=undefined;var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/step-wizard/src/components/ProcessSelector/ProcessSelector.jsx";var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"])_i["return"]();}finally{if(_d)throw _e;}}return _arr;}return function(arr,i){if(Array.isArray(arr)){return arr;}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i);}else{throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _lodash=__webpack_require__(17);var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _Table=__webpack_require__(70);var _Table2=_interopRequireDefault(_Table);var _TabLayout=__webpack_require__(32);var _TabLayout2=_interopRequireDefault(_TabLayout);var _Button=__webpack_require__(8);var _Button2=_interopRequireDefault(_Button);var _Modal=__webpack_require__(13);var _Modal2=_interopRequireDefault(_Modal);var _i18n=__webpack_require__(3);var _url=__webpack_require__(2);var _Text=__webpack_require__(11);var _Text2=_interopRequireDefault(_Text);var _Refresh=__webpack_require__(71);var _Refresh2=_interopRequireDefault(_Refresh);var _RadioBar=__webpack_require__(72);var _RadioBar2=_interopRequireDefault(_RadioBar);var _Loader=__webpack_require__(73);var _Loader2=_interopRequireDefault(_Loader);var _CommonService=__webpack_require__(5);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}else{return Array.from(arr);}}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var filteredOtherProcesses=[];var filteredSearchProcesses=[];var processParams=["pid","ppid","name","process_type","args"];var otherNonSplunkProcesses=[];var otherSplunkProcesses=[];var typingTimer=0;var DONE_TYPING_INTERVAL=700;var ESCAPE_KEY=27;var ProcessSelector=exports.ProcessSelector=function(_Component){_inherits(ProcessSelector,_Component);function ProcessSelector(props){var _this2=this;_classCallCheck(this,ProcessSelector);var _this=_possibleConstructorReturn(this,(ProcessSelector.__proto__||Object.getPrototypeOf(ProcessSelector)).call(this,props));_this.getAllProcesses=function(data){var _this$state=_this.state,mode=_this$state.mode,buttonText=_this$state.buttonText,otherProcesses=_this$state.otherProcesses,processFilter=_this$state.processFilter;_this.showLoader();otherNonSplunkProcesses=[];otherSplunkProcesses=[];var searchProcesses=[];var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=Object.entries(data)[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var _ref=_step.value;var _ref2=_slicedToArray(_ref,2);var key=_ref2[0];var proc=_ref2[1];process=JSON.parse(proc);if(process.process!==undefined){searchProcesses.push(process);}else if(JSON.stringify(process.process_type).toLowerCase().indexOf("splunk")!==-1){otherSplunkProcesses.push(process);}else{otherNonSplunkProcesses.push(process);}}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}_this.handleFilterModeChange(mode);_this.setState({buttonText:buttonText});_this.setState({searchProcesses:searchProcesses});filteredOtherProcesses=otherProcesses;filteredSearchProcesses=searchProcesses;if(processFilter!==""||processFilter===null){_this.filterProcesses(processFilter);}_this.hideLoader();};_this.handleRequestClose=function(){_this.setState({open:false});};_this.handleRequestOpen=function(e){e.stopPropagation();_this.handleFilterModeChange(_this.state.mode);_this.setState({open:true});};_this.handleProcessClick=function(e,data){var _this$props=_this.props,collectorName=_this$props.collectorName,collectorObj=_this$props.collectorObj,handler=_this$props.handler;if(_this.disableProcessRow(data)){return null;}if(data.search){data.search=data.search;data.process.args=data.process.args;data.__class__="rapid_diag.process_abstraction.SearchProcess";data.process.__class__="rapid_diag.process_abstraction.Process";}else{data.__class__="rapid_diag.process_abstraction.Process";data.args=data.args;}_this.setState({buttonText:_this.getButtonText(data)});var tempState=Object.assign({},collectorObj);tempState.process=data;handler(collectorName,[tempState]);_this.handleRequestClose(e);};_this.getButtonText=function(data){if(data.process!==undefined){return data.process.process_type+" ("+data.process.pid+")";}return data.name+" - "+data.process_type+" ("+data.pid+")";};_this.getProcessColumns=function(columns){return columns.map(function(column){return _react2.default.createElement(_Table2.default.HeadCell,{__source:{fileName:_jsxFileName,lineNumber:143},__self:_this2},column);});};_this.setRowValues=function(row,processType){var rowValues=[];var columnNames=processParams;if(processType==="search"){if(_this.state.mode==="SimpleMode"){columnNames=["root_sid","running_user","search","savedsearch_name"];}else{var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=columnNames[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=true){var row_id=_step2.value;rowValues.push(_react2.default.createElement(_Table2.default.Cell,{key:row_id===null?"":row_id,__source:{fileName:_jsxFileName,lineNumber:154},__self:_this2}," ",row.process[row_id]," "));}}catch(err){_didIteratorError2=true;_iteratorError2=err;}finally{try{if(!_iteratorNormalCompletion2&&_iterator2.return){_iterator2.return();}}finally{if(_didIteratorError2){throw _iteratorError2;}}}columnNames=["root_sid","running_user","running_app","search","savedsearch_name","owning_user","owning_app"];}}else if(_this.state.mode==="SimpleMode"){columnNames=["pid","name","process_type"];}var _iteratorNormalCompletion3=true;var _didIteratorError3=false;var _iteratorError3=undefined;try{for(var _iterator3=columnNames[Symbol.iterator](),_step3;!(_iteratorNormalCompletion3=(_step3=_iterator3.next()).done);_iteratorNormalCompletion3=true){var _row_id=_step3.value;rowValues.push(_react2.default.createElement(_Table2.default.Cell,{key:_row_id===null?"":_row_id,__source:{fileName:_jsxFileName,lineNumber:176},__self:_this2}," ",row[_row_id]," "));}}catch(err){_didIteratorError3=true;_iteratorError3=err;}finally{try{if(!_iteratorNormalCompletion3&&_iterator3.return){_iterator3.return();}}finally{if(_didIteratorError3){throw _iteratorError3;}}}return rowValues;};_this.handleSortOtherProcess=function(e,_ref3){var sortKey=_ref3.sortKey;_this.setState(function(state){var prevSortKey=state.otherProcessSortKey;var prevSortDir=prevSortKey===state.otherProcessSortKey?state.otherProcessSortDir:"none";var nextSortDir=prevSortDir==="asc"?"desc":"asc";return{sortKey:sortKey,otherProcessSortDir:nextSortDir};});};_this.handleSortSearchProcess=function(e,_ref4){var sortKey=_ref4.sortKey;_this.setState(function(state){var prevSortKey=state.searchProcessSortKey;var prevSortDir=prevSortKey===state.searchProcessSortKey?state.searchProcessSortDir:"none";var nextSortDir=prevSortDir==="asc"?"desc":"asc";return{sortKey:sortKey,searchProcessSortDir:nextSortDir};});};_this.handleEscapeClick=function(e){if(e.keyCode===ESCAPE_KEY){_this.handleRequestClose(e);}};_this.filterSearch=function(process,value){return JSON.stringify(Object.values(process)).toLowerCase().indexOf(value.toLowerCase())!==-1;};_this.handleFilterChange=function(e,_ref5){var value=_ref5.value;_this.setState({processFilter:value});clearTimeout(typingTimer);typingTimer=setTimeout(function(){_this.filterProcesses(_this.state.processFilter);_this.forceUpdate();},DONE_TYPING_INTERVAL);};_this.filterProcesses=function(value){var _this$state2=_this.state,otherProcesses=_this$state2.otherProcesses,searchProcesses=_this$state2.searchProcesses;filteredOtherProcesses=otherProcesses.filter(function(process){return _this.filterSearch(process,value);});filteredSearchProcesses=searchProcesses.filter(function(process){return _this.filterSearch(process,value);});};_this.handleModeChange=function(e,_ref6){var value=_ref6.value;_this.setState({mode:value});_this.handleFilterModeChange(value);};_this.setTableHeaders=function(processType){if(processType==="search"){return _this.state.mode==="SimpleMode"?[{searchProcessSortKey:"root_sid",label:"Root SID"},{searchProcessSortKey:"running_user",label:"Running User"},{searchProcessSortKey:"search",label:"Search"},{searchProcessSortKey:"savedsearch_name",label:"SavedSearch Name"}]:[{searchProcessSortKey:"pid",label:"PID"},{searchProcessSortKey:"ppid",label:"PPID"},{searchProcessSortKey:"name",label:"Name"},{searchProcessSortKey:"process_type",label:"Process Type"},{searchProcessSortKey:"args",label:"Arguments"},{searchProcessSortKey:"root_sid",label:"Root SID"},{searchProcessSortKey:"running_user",label:"Running User"},{searchProcessSortKey:"running_app",label:"Running App"},{searchProcessSortKey:"search",label:"Search"},{searchProcessSortKey:"savedsearch_name",label:"SavedSearch Name"},{searchProcessSortKey:"owning_user",label:"Owning User"},{searchProcessSortKey:"owning_app",label:"Owning App"}];}return _this.state.mode==="SimpleMode"?[{otherProcessSortKey:"pid",label:"PID"},{otherProcessSortKey:"name",label:"Name"},{otherProcessSortKey:"process_type",label:"Process Type"}]:[{otherProcessSortKey:"pid",label:"PID"},{otherProcessSortKey:"ppid",label:"PPID"},{otherProcessSortKey:"name",label:"Name"},{otherProcessSortKey:"process_type",label:"Process Type"},{otherProcessSortKey:"args",label:"Arguments"}];};_this.handleClick=function(e){e.stopPropagation();try{e.stopImmediatePropagation();}catch(err){}};_this.handleFilterModeChange=function(mode){var otherProcesses=otherSplunkProcesses;if(mode==="SimpleMode"){_this.setState({otherProcesses:otherProcesses});}else if(mode==="AdvancedMode"){otherProcesses=[].concat(_toConsumableArray(otherProcesses),_toConsumableArray(otherNonSplunkProcesses));_this.setState({otherProcesses:otherProcesses});}filteredOtherProcesses=otherProcesses.filter(function(process){return _this.filterSearch(process,_this.state.processFilter);}).map(function(process){return process;});};_this.disableProcessRow=function(row){var _this$props2=_this.props,collectorName=_this$props2.collectorName,stack_trace=_this$props2.stack_trace,system_call_trace=_this$props2.system_call_trace;var disableSystemCallRow=collectorName==="system_call_trace"&&stack_trace.filter(function(collector){return collector.selected===true;}).length>0&&stack_trace.filter(function(collector){return(0,_lodash.isEqual)(row,collector.process);}).length>0;var disableStackTraceRow=collectorName==="stack_trace"&&system_call_trace.filter(function(collector){return collector.selected===true;}).length>0&&system_call_trace.filter(function(collector){return(0,_lodash.isEqual)(row,collector.process);}).length>0;return disableSystemCallRow||disableStackTraceRow;};_this.renderRadioBar=function(){return _react2.default.createElement("div",{style:{maxWidth:"50%",marginLeft:"50%"},__source:{fileName:_jsxFileName,lineNumber:309},__self:_this2},_react2.default.createElement(_RadioBar2.default,{onChange:_this.handleModeChange,value:_this.state.mode,__source:{fileName:_jsxFileName,lineNumber:310},__self:_this2},_react2.default.createElement(_RadioBar2.default.Option,{value:"SimpleMode",label:"Simple Mode",__source:{fileName:_jsxFileName,lineNumber:311},__self:_this2}),_react2.default.createElement(_RadioBar2.default.Option,{value:"AdvancedMode",label:"Advanced Mode",__source:{fileName:_jsxFileName,lineNumber:312},__self:_this2})));};_this.handleRefresh=function(){var _this$state3=_this.state,cluster=_this$state3.cluster,selectedIndexers=_this$state3.selectedIndexers;var _this$props3=_this.props,handler=_this$props3.handler,processData=_this$props3.processData;var peers=cluster?selectedIndexers:[];var getProcessUrl=(0,_url.createRESTURL)("rapid_diag/get_process_info?output_mode=json");var params={peers:JSON.stringify(peers)};_this.showLoader();(0,_CommonService.axiosGetCall)(getProcessUrl,params).then(function(responseJson){handler("processData",responseJson.data);_this.getAllProcesses(responseJson.data);}).catch(function(error){// eslint-disable-next-line no-console\nconsole.error(error);_this.hideLoader();});};_this.state={collectorObj:_this.props.collectorObj,buttonText:"Select a process...",open:_this.props.open,mode:"SimpleMode",otherProcesses:[],searchProcesses:[],selectedIndexers:_this.props.selectedIndexers,cluster:_this.props.cluster,searchProcessSortKey:"pid",searchProcessSortDir:"none",otherProcessSortKey:"pid",otherProcessSortDir:"none",processFilter:"",loader:_this.props.loader,processData:_this.props.processData};return _this;}_createClass(ProcessSelector,[{key:"componentDidMount",value:function componentDidMount(){this.getAllProcesses(this.props.processData);if(this.props.collectorObj.process&&this.props.collectorObj.process!==null&&this.props.search_debug.filter(function(collector){return collector.selected===true;}).length===0){this.setState({buttonText:this.getButtonText(this.props.collectorObj.process)});}}},{key:"componentWillReceiveProps",value:function componentWillReceiveProps(nextProps){// const tempState = {...this.props.collectorObj};\n// tempState.process = nextProps.collectorObj.process;\n// this.setState({ [this.props.collectorName]: tempState });\nthis.setState({loader:nextProps.loader});if(this.props.processData!==nextProps.processData){this.setState({processData:nextProps.processData});this.getAllProcesses(nextProps.processData);}}},{key:"componentDidUpdate",value:function componentDidUpdate(prevProps,prevState){if(this.state.processData!==prevState.processData){this.getAllProcesses(this.state.processData);}}// stringify the values of process object and check if it\'s there in our keyword\n},{key:"showLoader",value:function showLoader(){this.setState({loader:true});}},{key:"hideLoader",value:function hideLoader(){this.setState({loader:false});}},{key:"render",value:function render(){var _this3=this;var _state=this.state,sortKey=_state.sortKey,searchProcessSortDir=_state.searchProcessSortDir,otherProcessSortDir=_state.otherProcessSortDir,loader=_state.loader,buttonText=_state.buttonText,open=_state.open,processFilter=_state.processFilter;var _props=this.props,search_debug=_props.search_debug,collectorObj=_props.collectorObj;var disabled=!collectorObj.selected||search_debug.filter(function(collector){return collector.selected===true;}).length>0;return _react2.default.createElement(_react.Fragment,{__source:{fileName:_jsxFileName,lineNumber:349},__self:this},_react2.default.createElement(_Button2.default,{inline:true,onClick:this.handleRequestOpen,label:buttonText,disabled:disabled,style:{width:"47%",whiteSpace:"nowrap",wordWrap:"break-word"},__source:{fileName:_jsxFileName,lineNumber:350},__self:this}),_react2.default.createElement(_Modal2.default,{enablePeek:true,onRequestClose:this.handleRequestClose,onClick:this.handleClick,open:open,onKeyDown:this.handleEscapeClick,style:{width:"600px",maxHeight:"800px",zIndex:1500},__source:{fileName:_jsxFileName,lineNumber:357},__self:this},_react2.default.createElement(_Modal2.default.Header,{title:_react2.default.createElement("div",{__source:{fileName:_jsxFileName,lineNumber:367},__self:this},"Select Process",_react2.default.createElement(_Button2.default,{icon:_react2.default.createElement(_Refresh2.default,{style:{width:15+"px",height:15+"px"},__source:{fileName:_jsxFileName,lineNumber:370},__self:this}),appearance:"pill",onClick:this.handleRefresh,style:{marginLeft:"63%",marginTop:"-5px"},__source:{fileName:_jsxFileName,lineNumber:369},__self:this})),onRequestClose:this.handleRequestClose,__source:{fileName:_jsxFileName,lineNumber:365},__self:this}),_react2.default.createElement(_Modal2.default.Body,{__source:{fileName:_jsxFileName,lineNumber:379},__self:this},_react2.default.createElement(_Text2.default,{appearance:"search",canClear:true,placeholder:"filter",autoFocus:true,value:processFilter,onChange:this.handleFilterChange,style:{maxWidth:100+"%"},__source:{fileName:_jsxFileName,lineNumber:380},__self:this}),_react2.default.createElement(_TabLayout2.default,{defaultActivePanelId:"normal",iconSize:"small",__source:{fileName:_jsxFileName,lineNumber:389},__self:this},_react2.default.createElement(_TabLayout2.default.Panel,{label:"Normal Process",panelId:"normal",__source:{fileName:_jsxFileName,lineNumber:390},__self:this},this.renderRadioBar(),_react2.default.createElement("div",{__source:{fileName:_jsxFileName,lineNumber:392},__self:this},_react2.default.createElement(_Table2.default,{stripeRows:true,headType:"fixed",innerStyle:{maxHeight:250},__source:{fileName:_jsxFileName,lineNumber:393},__self:this},_react2.default.createElement(_Table2.default.Head,{__source:{fileName:_jsxFileName,lineNumber:394},__self:this},this.setTableHeaders("other").map(function(headData){return _react2.default.createElement(_Table2.default.HeadCell,{key:headData.otherProcessSortKey,onSort:_this3.handleSortOtherProcess,sortKey:headData.otherProcessSortKey,sortDir:headData.otherProcessSortKey===sortKey?otherProcessSortDir:"none",__source:{fileName:_jsxFileName,lineNumber:396},__self:_this3},headData.label);})),_react2.default.createElement(_Table2.default.Body,{__source:{fileName:_jsxFileName,lineNumber:410},__self:this},!loader&&filteredOtherProcesses.length>0&&filteredOtherProcesses.sort(function(rowA,rowB){if(otherProcessSortDir==="asc"){return rowA[sortKey]>rowB[sortKey]?1:-1;}if(otherProcessSortDir==="desc"){return rowB[sortKey]>rowA[sortKey]?1:-1;}return 0;}).map(function(row){return _react2.default.createElement(_Table2.default.Row,{key:row.pid,onClick:_this3.handleProcessClick,style:{opacity:_this3.disableProcessRow(row)?0.5:1},data:row,disabled:_this3.disableProcessRow(row),__source:{fileName:_jsxFileName,lineNumber:428},__self:_this3},_this3.setRowValues(row,"other"));}))),_react2.default.createElement("div",{style:{marginLeft:"50%"},__source:{fileName:_jsxFileName,lineNumber:441},__self:this},_react2.default.createElement(_Loader2.default,{load:loader,__source:{fileName:_jsxFileName,lineNumber:442},__self:this})))),_react2.default.createElement(_TabLayout2.default.Panel,{label:"Search Process",panelId:"search",__source:{fileName:_jsxFileName,lineNumber:446},__self:this},this.renderRadioBar(),_react2.default.createElement("div",{__source:{fileName:_jsxFileName,lineNumber:448},__self:this},_react2.default.createElement(_Table2.default,{stripeRows:true,__source:{fileName:_jsxFileName,lineNumber:449},__self:this},_react2.default.createElement(_Table2.default.Head,{__source:{fileName:_jsxFileName,lineNumber:450},__self:this},this.setTableHeaders("search").map(function(headData){return _react2.default.createElement(_Table2.default.HeadCell,{key:headData.searchProcessSortKey,onSort:_this3.handleSortSearchProcess,sortKey:headData.searchProcessSortKey,sortDir:headData.searchProcessSortKey===sortKey?searchProcessSortDir:"none",__source:{fileName:_jsxFileName,lineNumber:452},__self:_this3},headData.label);})),_react2.default.createElement(_Table2.default.Body,{__source:{fileName:_jsxFileName,lineNumber:466},__self:this},!loader&&filteredSearchProcesses.length>0&&filteredSearchProcesses.sort(function(rowA,rowB){if(searchProcessSortDir==="asc"){if(processParams.indexOf(sortKey)!==-1){return rowA.process[sortKey]>rowB.process[sortKey]?1:-1;}return rowA[sortKey]>rowB[sortKey]?1:-1;}if(searchProcessSortDir==="desc"){if(processParams.indexOf(sortKey)!==-1){return rowB.process[sortKey]>rowA.process[sortKey]?1:-1;}return rowB[sortKey]>rowA[sortKey]?1:-1;}return 0;}).map(function(row){return _react2.default.createElement(_Table2.default.Row,{key:row.process.pid,onClick:_this3.handleProcessClick,style:{opacity:_this3.disableProcessRow(row)?0.5:1},data:row,disabled:_this3.disableProcessRow(row),__source:{fileName:_jsxFileName,lineNumber:502},__self:_this3},_this3.setRowValues(row,"search"));}))),_react2.default.createElement("div",{style:{marginLeft:"50%"},__source:{fileName:_jsxFileName,lineNumber:514},__self:this},_react2.default.createElement(_Loader2.default,{load:loader,__source:{fileName:_jsxFileName,lineNumber:515},__self:this})),!loader&&filteredSearchProcesses.length===0?_react2.default.createElement("div",{__source:{fileName:_jsxFileName,lineNumber:518},__self:this},"No Processes Found."):""))))));}}]);return ProcessSelector;}(_react.Component);/* WEBPACK VAR INJECTION */}).call(this,__webpack_require__(69));/***/},/* 25 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var descriptions=exports.descriptions={system_call_trace:"System call traces contain information about requests from a program to the operating system (eg. reading and writing to files, network access and several others). The data collected won\'t include the text from those requests (i.e. the data read or written), but may contain file names.",stack_trace:"Stack trace only contains a snapshot of a program\'s activity at a point in time, no sensitive information will be collected.",network_packet:"Network packet dump will collect all data going through the chosen host and port. If SSL is enabled in that port, the data will be encrypted. If not, sensitive data may be collected. Please do not enable for non-SSL ports unless you feel confident the data being communicated can be safely shared. The data collected can be examined using Wireshark(https://www.wireshark.org).",search_result:"Search results may contain sensitive data, especially if the target index is not _internal or _interospection. Please do not share results unless you feel confident they can be safely shared.",splunk_diag:" Splunk diag collects basic information about your Splunk platform instance, including Splunk platform configuration details. It gathers information, such as server specs, OS version, file system, and current open connections, from the machine running the Splunk platform.",iops:"Input/output operations per second (IOPS, pronounced eye-ops) is an input/output performance measurement used to characterize computer storage devices like hard disk drives (HDD), solid state drives (SSD), and storage area networks (SAN). Like benchmarks, IOPS numbers published by storage device manufacturers do not directly relate to real-world application performance.",netstat:"Netstat collects system-wide connection metadata (status, and source and target addresses and ports), for both network connections and local sockets.",ps:"PS contains the snapshot report of current running processes with PID.",lsof:"LSOF contains the snapshot list of open files by given process.",search_debug:"Search debug matches for regular expression in search query. Once match is found collection will be triggered."};var searchDebugMessages=exports.searchDebugMessages={system_call_trace:"Process selector will be disabled if search debug collection is enabled.",stack_trace:"Process selector will be disabled if search debug collection is enabled.",network_packet:"",search_result:"This collector will be disabled if search debug collection is enabled.",splunk_diag:"",iops:"",netstat:"",ps:"",lsof:"Process selector will be disabled if search debug collection is enabled",log_monitor:"Log Monitor will be disabled if search debug collection is enabled.",resource_monitor:"Resource Monitor will be disabled if search debug collection is enabled."};var searchdebugCollectors=exports.searchdebugCollectors=["system_call_trace","stack_trace","search_result","lsof"];var searchdebugTriggers=exports.searchdebugTriggers=["resource_monitor","log_monitor"];/***/},/* 26 *//***/function(module,exports){module.exports=__webpack_require__(225);/***/},/* 27 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var generateUID=function generateUID(){return"_"+Math.random().toString(36).substr(2,12);};exports.generateUID=generateUID;/***/},/* 28 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var checkCollectorInfo=exports.checkCollectorInfo=function checkCollectorInfo(currentState,selectedCollectors){var runningCollectors={};var unavailableUtilities={};var rapidDiagData=currentState.rapidDiagData;if(!currentState.cluster){var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=rapidDiagData[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var data=_step.value;var value=JSON.parse(data.value);if(value.splunk_server===currentState.localHostName){rapidDiagData=[data];}}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}}var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=rapidDiagData[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=true){var _data=_step2.value;var _value=JSON.parse(_data.value);var peer=_value.splunk_server;if(currentState.cluster&&currentState.selectedIndexers.indexOf(peer)===-1){continue;}for(var collector in _value.running_collectors){if(!selectedCollectors[collector]){continue;}runningCollectors[collector]=runningCollectors[collector]||[];// init if new\nrunningCollectors[collector].push(peer);}for(var _collector in _value.unavailable_utilities){if(!selectedCollectors[_collector]){continue;}for(var utility in _value.unavailable_utilities[_collector]){var utilityMessage=_value.unavailable_utilities[_collector][utility];unavailableUtilities[_collector]=unavailableUtilities[_collector]||{};// init if new\nunavailableUtilities[_collector][utilityMessage]=unavailableUtilities[_collector][utilityMessage]||[];unavailableUtilities[_collector][utilityMessage].push(peer);}}}}catch(err){_didIteratorError2=true;_iteratorError2=err;}finally{try{if(!_iteratorNormalCompletion2&&_iterator2.return){_iterator2.return();}}finally{if(_didIteratorError2){throw _iteratorError2;}}}var availMatrix={runningCollectors:runningCollectors,unavailableUtilities:unavailableUtilities};return availMatrix;};/***/},/* 29 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _jsxFileName=\'/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/components/InfoMessage/InfoMessage.jsx\';var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _Message=__webpack_require__(26);var _Message2=_interopRequireDefault(_Message);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function InfoMessage(props){return _react2.default.createElement(\'div\',{__source:{fileName:_jsxFileName,lineNumber:7},__self:this},_react2.default.createElement(_Message2.default,{fill:true,type:\'info\',__source:{fileName:_jsxFileName,lineNumber:8},__self:this},props.helptext));}exports.default=InfoMessage;/***/},/* 30 *//***/function(module,exports){module.exports=__webpack_require__(226);/***/},/* 31 *//***/function(module,exports){module.exports=__webpack_require__(148);/***/},/* 32 *//***/function(module,exports){module.exports=__webpack_require__(227);/***/},/* 33 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.StepOne=undefined;var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/step-wizard/src/file/StepOne.jsx";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _File=__webpack_require__(63);var _File2=_interopRequireDefault(_File);var _Heading=__webpack_require__(31);var _Heading2=_interopRequireDefault(_Heading);var _ClusterConfiguration=__webpack_require__(34);var _buildReviewObject=__webpack_require__(22);var _PopOverText=__webpack_require__(10);var _PopOverText2=_interopRequireDefault(_PopOverText);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var helpText="\\n* Select multiple connected peers from the dropdown.\\n\\n* Only showing those peers that have RapidDiag app enabled.\\n\\n* The first option in the drop-down is the local instance.\\n";var StepOne=exports.StepOne=function(_Component){_inherits(StepOne,_Component);function StepOne(props){var _ref;_classCallCheck(this,StepOne);for(var _len=arguments.length,rest=Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){rest[_key-1]=arguments[_key];}var _this=_possibleConstructorReturn(this,(_ref=StepOne.__proto__||Object.getPrototypeOf(StepOne)).call.apply(_ref,[this,props].concat(rest)));_this.initTaskObjects=function(){return{system_call_trace:[{selected:false}],stack_trace:[{selected:false}],network_packet:[{selected:false}],search_result:[{selected:false}],splunk_diag:[{selected:false}],netstat:[{selected:false}],iops:[{selected:false}],ps:[{selected:false}],lsof:[{selected:false}],periodic:[{selected:false}],log_monitor:[{selected:false}],resource_monitor:[{selected:false}],search_debug:[{selected:false}],name:"",description:""};};_this.handleChildren=function(attribute,value){_this.setState(_defineProperty({},attribute,value));_this.props.handler(attribute,value);};_this.handleAddFile=function(files){var file=files[0];if(_this.fileReader.readyState===1){_this.fileReader.abort();}_this.fileReader.onload=function(){_this.setState(_this.initTaskObjects());_this.props.handleObj(_this.initTaskObjects());// Trying to parse the JSON, if failed it will be handled at Next button click in StepWizard\ntry{var jsonParsedData=JSON.parse(_this.fileReader.result);if(jsonParsedData.task){(0,_buildReviewObject.getReviewObject)(jsonParsedData.task,_this);}else{(0,_buildReviewObject.getReviewObject)(jsonParsedData,_this);}var reviewObj=_this.state.reviewObj;var selectedCollectors=(0,_buildReviewObject.getSelectedCollectors)(reviewObj);_this.props.handler("reviewObj",reviewObj);_this.handleChildren("selectedCollectors",selectedCollectors);}catch(error){// Nothing here as this will be caught on handleNext in StepWizard. This is just to remove unnecessary \n// console errors.\n}_this.setState({fileName:file.name,fileData:_this.fileReader.result});_this.props.handler("fileName",file.name);_this.props.handler("fileData",_this.fileReader.result);};_this.fileReader.readAsText(file);};_this.handleRemoveFile=function(){if(_this.fileReader.readyState===1){_this.fileReader.abort();}var propDict={fileName:null,fileData:null,reviewObj:{},selectedCollectors:[],availMatrix:{}};for(var prop in propDict){_this.handleChildren(""+prop,propDict[prop]);}};_this.state={fileName:_this.props.fileName,fileData:_this.props.fileData,cluster:_this.props.cluster,selectedIndexers:_this.props.selectedIndexers,indexerList:_this.props.indexerList,rapidDiagData:_this.props.rapidDiagData,clusterLoader:_this.props.clusterLoader,reviewObj:_this.props.reviewObj,selectedCollectors:_this.props.selectedCollectors};_this.fileReader=new FileReader();return _this;}_createClass(StepOne,[{key:"componentWillReceiveProps",value:function componentWillReceiveProps(nextProps){this.setState(nextProps);}/**\n         * function passes props from children and send it to parent\n         *//**\n         * function handles file upload\n         */},{key:"componentDidUpdate",value:function componentDidUpdate(prevProps,prevState){if(prevState.reviewObj.selectedIndexers!=this.state.selectedIndexers){var reviewObj=prevState.reviewObj;reviewObj.selectedIndexers=this.state.selectedIndexers;this.handleChildren("reviewObj",reviewObj);}}/**\n         * function handles file removal from component\n         */},{key:"render",value:function render(){return _react2.default.createElement("div",{style:{marginLeft:20,width:650},__source:{fileName:_jsxFileName,lineNumber:136},__self:this},_react2.default.createElement(_Heading2.default,{__source:{fileName:_jsxFileName,lineNumber:138},__self:this},"Upload File"),_react2.default.createElement("hr",{__source:{fileName:_jsxFileName,lineNumber:139},__self:this}),_react2.default.createElement("br",{__source:{fileName:_jsxFileName,lineNumber:140},__self:this}),_react2.default.createElement(_File2.default,{size:"medium",help:"this.handleAddFile = this.handleAddFile.bind(this);",onRequestAdd:this.handleAddFile,onRequestRemove:this.handleRemoveFile,style:{height:150},__source:{fileName:_jsxFileName,lineNumber:142},__self:this},this.state.fileName&&_react2.default.createElement(_File2.default.Item,{name:this.state.fileName,__source:{fileName:_jsxFileName,lineNumber:149},__self:this})),_react2.default.createElement("div",{style:{paddingTop:"30px"},__source:{fileName:_jsxFileName,lineNumber:152},__self:this},_react2.default.createElement(_ClusterConfiguration.ClusterConfiguration,{handler:this.handleChildren,data:this.state,__source:{fileName:_jsxFileName,lineNumber:153},__self:this}),_react2.default.createElement(_PopOverText2.default,{id:"fileUploadPeerSelectorHelpButton",buttonStyle:{},dialogueBoxStyle:{padding:"10px"},help:helpText,__source:{fileName:_jsxFileName,lineNumber:154},__self:this})));}}]);return StepOne;}(_react.Component);exports.default=StepOne;/***/},/* 34 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.ClusterConfiguration=undefined;var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/step-wizard/src/components/ClusterConfiguration/ClusterConfiguration.jsx";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _Multiselect=__webpack_require__(35);var _Multiselect2=_interopRequireDefault(_Multiselect);var _propTypes=__webpack_require__(4);var _propTypes2=_interopRequireDefault(_propTypes);var _i18n=__webpack_require__(3);var _ClusterConfigurationStyle=__webpack_require__(64);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var ClusterConfiguration=exports.ClusterConfiguration=function(_Component){_inherits(ClusterConfiguration,_Component);function ClusterConfiguration(props){_classCallCheck(this,ClusterConfiguration);var _this=_possibleConstructorReturn(this,(ClusterConfiguration.__proto__||Object.getPrototypeOf(ClusterConfiguration)).call(this,props));_this.handleChange=function(e,_ref){var name=_ref.name,values=_ref.values;if(_this.props.data.indexerList.length===1){_this.setState({cluster:false});_this.props.handler("cluster",false);}else if(values.length>0){_this.setState({cluster:true});_this.props.handler("cluster",true);}else{_this.setState({cluster:false});_this.props.handler("cluster",false);}_this.setState(_defineProperty({},name,values));_this.props.handler(name,values);};_this.handleChildren=function(attribute,value){_this.setState(_defineProperty({},attribute,value));_this.props.handler(attribute,value);};_this.handleClick=function(e){e.stopPropagation();try{e.stopImmediatePropagation();}catch(err){}};_this.state={cluster:_this.props.data.cluster,selectedIndexers:_this.props.data.selectedIndexers,indexerList:_this.props.data.indexerList,indexer_dropdown_message:(0,_i18n._)("No matches"),rapidDiagData:_this.props.data.rapidDiagData,clusterLoader:_this.props.data.clusterLoader};return _this;}_createClass(ClusterConfiguration,[{key:"componentDidUpdate",value:function componentDidUpdate(prevProps,prevState){if(prevProps.data!==this.props.data){this.setState(this.props.data);}if(this.props.data.indexerList!==prevProps.data.indexerList){if(this.props.data.indexerList.length===1){this.setState({selectedIndexers:this.props.data.indexerList});this.props.handler("selectedIndexers",this.props.data.indexerList);}}}/**\n         * Updates the state of component and passes upadated value to parent component\n         *//**\n         * function passes child component data to parent component\n         *//**\n         * function handles the click event on `ClusterConfiguration`\n         */},{key:"render",value:function render(){var _this2=this;var _state=this.state,indexerList=_state.indexerList,clusterLoader=_state.clusterLoader,selectedIndexers=_state.selectedIndexers;return _react2.default.createElement(_ClusterConfigurationStyle.StyledMultiSelect,{values:selectedIndexers,inline:true,placeholder:"Select Peer Nodes",onChange:this.handleChange,isLoadingOptions:clusterLoader,menuStyle:{maxHeight:"200px",minWidth:"200px"},name:"selectedIndexers",compact:true,__source:{fileName:_jsxFileName,lineNumber:109},__self:this},indexerList.map(function(server){return _react2.default.createElement(_Multiselect2.default.Option,{label:server,value:server,key:server,__source:{fileName:_jsxFileName,lineNumber:119},__self:_this2});}));}}]);return ClusterConfiguration;}(_react.Component);ClusterConfiguration.propTypes={/**\n     * data: props from `StepWizard`\n     */data:_propTypes2.default.object,/**\n     * handler: function to pass children data to parent\n     */handler:_propTypes2.default.func,/**\n     * cluster: cluster data collection is enable or disabled\n     */cluster:_propTypes2.default.bool,/**\n     * selectedIndexers: selected peers in cluster\n     */selectedIndexers:_propTypes2.default.array,/**\n     * indexerList: list of peers in cluster\n     */indexerList:_propTypes2.default.array,/**\n     * rapidDiagData: details of `runningCollectors` and `unavailbleUtilities` in every cluster peer\n     */rapidDiagData:_propTypes2.default.array,/**\n     * localHostName: name of localhost machine\n     */localHostName:_propTypes2.default.string};/***/},/* 35 *//***/function(module,exports){module.exports=__webpack_require__(228);/***/},/* 36 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.selectHeaderStyle=exports.refreshButtonStyle=exports.StyleButton=undefined;var _templateObject=_taggedTemplateLiteral(["\\n    border: 0;\\n    border-radius: 100%;\\n    background-color: #ffffff\\n    color: #5f6368;\\n\\n    &: hover:enabled {\\n        background-color: rgba(0,0,0,.12);\\n        color: #202124;\\n    }\\n\\n    &: focus:enabled {;\\n        outline: none;\\n        border-color: #ffffff;\\n        color: #5f6368;\\n        box-shadow: none;\\n    }\\n\\n"],["\\n    border: 0;\\n    border-radius: 100%;\\n    background-color: #ffffff\\n    color: #5f6368;\\n\\n    &: hover:enabled {\\n        background-color: rgba(0,0,0,.12);\\n        color: #202124;\\n    }\\n\\n    &: focus:enabled {;\\n        outline: none;\\n        border-color: #ffffff;\\n        color: #5f6368;\\n        box-shadow: none;\\n    }\\n\\n"]);var _Button=__webpack_require__(8);var _Button2=_interopRequireDefault(_Button);var _styledComponents=__webpack_require__(21);var _styledComponents2=_interopRequireDefault(_styledComponents);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _taggedTemplateLiteral(strings,raw){return Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}));}var StyleButton=exports.StyleButton=(0,_styledComponents2.default)(_Button2.default)(_templateObject);var refreshButtonStyle=exports.refreshButtonStyle={paddingLeft:"10px",fontSize:"x-large"};var selectHeaderStyle=exports.selectHeaderStyle={paddingLeft:"5px",fontSize:"large",paddingTop:"7px"};/***/},/* 37 *//***/function(module,exports){module.exports=__webpack_require__(232);/***/},/* 38 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.StepZero=undefined;var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/step-wizard/src/create/StepZero.jsx";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _Text=__webpack_require__(11);var _Text2=_interopRequireDefault(_Text);var _ControlGroup=__webpack_require__(7);var _ControlGroup2=_interopRequireDefault(_ControlGroup);var _i18n=__webpack_require__(3);var _CardLayout=__webpack_require__(23);var _CardLayout2=_interopRequireDefault(_CardLayout);var _Success=__webpack_require__(39);var _Success2=_interopRequireDefault(_Success);var _CollectorWrapper=__webpack_require__(12);var _CollectorWrapper2=_interopRequireDefault(_CollectorWrapper);var _CollectionInformation=__webpack_require__(45);var _CollectionInformation2=_interopRequireDefault(_CollectionInformation);var _DistributedCollection=__webpack_require__(46);var _DistributedCollection2=_interopRequireDefault(_DistributedCollection);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var helpText="\\n* Select multiple connected peers from the dropdown.\\n\\n* Only showing those peers that have RapidDiag app enabled.\\n\\n* The first option in the drop-down is the local instance.\\n";var StepZero=exports.StepZero=function(_React$Component){_inherits(StepZero,_React$Component);function StepZero(props){var _this2=this;_classCallCheck(this,StepZero);var _this=_possibleConstructorReturn(this,(StepZero.__proto__||Object.getPrototypeOf(StepZero)).call(this,props));_this.handleChildren=function(attribute,value){_this.setState(_defineProperty({},attribute,value));_this.props.handler(attribute,value);};_this.isCardSelected=function(cardSelected){if(cardSelected){return _react2.default.createElement(_Success2.default,{size:"24px",__source:{fileName:_jsxFileName,lineNumber:45},__self:_this2});}return _react2.default.createElement("div",{style:{marginTop:"24px"},__source:{fileName:_jsxFileName,lineNumber:47},__self:_this2});};_this.state={name:_this.props.name,description:_this.props.description,clusterLoader:_this.props.clusterLoader,cluster:_this.props.cluster,selectedIndexers:_this.props.selectedIndexers,rapidDiagData:_this.props.rapidDiagData,localHostName:_this.props.localHostName,indexerList:_this.props.indexerList,search_debug:_this.props.search_debug};return _this;}_createClass(StepZero,[{key:"componentWillReceiveProps",value:function componentWillReceiveProps(nextProps){this.setState(nextProps);}// Get the data from children and send it to parent\n},{key:"render",// Render the first page form\nvalue:function render(){return _react2.default.createElement("div",{style:{marginLeft:20},__source:{fileName:_jsxFileName,lineNumber:53},__self:this},_react2.default.createElement(_CardLayout2.default,{style:{maxWidth:1500},gutterSize:10,__source:{fileName:_jsxFileName,lineNumber:54},__self:this},_react2.default.createElement(_CollectionInformation2.default,{collectorObj:{name:this.state.name,description:this.state.description},handler:this.handleChildren,__source:{fileName:_jsxFileName,lineNumber:55},__self:this}),_react2.default.createElement(_DistributedCollection2.default,{handler:this.handleChildren,collectorObj:this.state,__source:{fileName:_jsxFileName,lineNumber:62},__self:this})),_react2.default.createElement(_CardLayout2.default,{style:{maxWidth:"50%",height:203},gutterSize:5,__source:{fileName:_jsxFileName,lineNumber:68},__self:this},_react2.default.createElement(_CollectorWrapper2.default,{name:"search_debug",handler:this.handleChildren,availMatrix:this.props.availMatrix,collectorObj:this.state.search_debug[0],search_debug:this.state.search_debug,__source:{fileName:_jsxFileName,lineNumber:69},__self:this})));}}]);return StepZero;}(_react2.default.Component);/***/},/* 39 *//***/function(module,exports){module.exports=__webpack_require__(77);/***/},/* 40 *//***/function(module,exports){module.exports=__webpack_require__(153);/***/},/* 41 *//***/function(module,exports){module.exports=__webpack_require__(101);/***/},/* 42 *//***/function(module,exports){module.exports=__webpack_require__(244);/***/},/* 43 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/step-wizard/src/components/ErrorModal/ErrorModal.jsx";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _propTypes=__webpack_require__(4);var _propTypes2=_interopRequireDefault(_propTypes);var _Modal=__webpack_require__(13);var _Modal2=_interopRequireDefault(_Modal);var _Button=__webpack_require__(8);var _Button2=_interopRequireDefault(_Button);var _Message=__webpack_require__(26);var _Message2=_interopRequireDefault(_Message);var _List=__webpack_require__(75);var _List2=_interopRequireDefault(_List);var _Error=__webpack_require__(76);var _Error2=_interopRequireDefault(_Error);var _JSON_KEY_BINDINGS=__webpack_require__(6);var _ErrorModalStyles=__webpack_require__(77);var ErrorModalStyles=_interopRequireWildcard(_ErrorModalStyles);function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key))newObj[key]=obj[key];}}newObj.default=obj;return newObj;}}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var ErrorModal=function(_Component){_inherits(ErrorModal,_Component);function ErrorModal(props){var _this2=this;_classCallCheck(this,ErrorModal);var _this=_possibleConstructorReturn(this,(ErrorModal.__proto__||Object.getPrototypeOf(ErrorModal)).call(this,props));_this.getPeers=function(peers){return _react2.default.createElement(_List2.default,{__source:{fileName:_jsxFileName,lineNumber:31},__self:_this2},peers.map(function(peer){return _react2.default.createElement(_List2.default.Item,{key:peer,__source:{fileName:_jsxFileName,lineNumber:31},__self:_this2},peer);}));};_this.getRunningCollectors=function(runningCollectors){return runningCollectors===undefined?null:_react2.default.createElement("div",{style:ErrorModalStyles.runningCollectorStyle,__source:{fileName:_jsxFileName,lineNumber:35},__self:_this2},_react2.default.createElement(_Message2.default,{type:"error",__source:{fileName:_jsxFileName,lineNumber:36},__self:_this2},"This collector is already running on following instance(s): "),_this.getPeers(runningCollectors));};_this.getUnavailabilityDescriptions=function(unavailableUtilities){var reasons=[];for(var reason in unavailableUtilities){var unavailable=Object.values(unavailableUtilities[reason]);reasons.push(_react2.default.createElement("div",{key:reason,style:ErrorModalStyles.unavailableUtilityStyle,__source:{fileName:_jsxFileName,lineNumber:48},__self:_this2},_react2.default.createElement(_Message2.default,{type:"error",__source:{fileName:_jsxFileName,lineNumber:49},__self:_this2},reason+" on following instance(s): "),_this.getPeers(unavailable)));}return reasons;};_this.handleRequestOpen=function(){_this.setState({open:true});};_this.handleRequestClose=function(){_this.setState({open:false});};_this.state={open:false};return _this;}_createClass(ErrorModal,[{key:"render",value:function render(){var _props=this.props,availMatrix=_props.availMatrix,collector=_props.collector;var note="  Please deselect the above mentioned instance(s) to continue using this collector.";return _react2.default.createElement(_react.Fragment,{__source:{fileName:_jsxFileName,lineNumber:75},__self:this},_react2.default.createElement(_Button2.default,{id:"errorModalButton",icon:_react2.default.createElement(_Error2.default,{style:ErrorModalStyles.errorIconStyle,__source:{fileName:_jsxFileName,lineNumber:78},__self:this}),appearance:"pill",size:"large",style:{marginTop:-6+"px"},onClick:this.handleRequestOpen,__source:{fileName:_jsxFileName,lineNumber:76},__self:this}),_react2.default.createElement(_Modal2.default,{id:"errorModal",onRequestClose:this.handleRequestClose,open:this.state.open,style:{width:"1200px"},__source:{fileName:_jsxFileName,lineNumber:84},__self:this},_react2.default.createElement(_Modal2.default.Header,{title:""+_JSON_KEY_BINDINGS.KEY_BINDING[collector],onRequestClose:this.handleRequestClose,__source:{fileName:_jsxFileName,lineNumber:90},__self:this}),_react2.default.createElement(_Modal2.default.Body,{__source:{fileName:_jsxFileName,lineNumber:94},__self:this},this.getUnavailabilityDescriptions(availMatrix.unavailableUtilities[collector]),this.getRunningCollectors(availMatrix.runningCollectors[collector])),_react2.default.createElement(_Modal2.default.Footer,{__source:{fileName:_jsxFileName,lineNumber:100},__self:this},_react2.default.createElement("div",{style:ErrorModalStyles.footerNoteStyle,__source:{fileName:_jsxFileName,lineNumber:101},__self:this},_react2.default.createElement("pre",{style:ErrorModalStyles.fontStyle,__source:{fileName:_jsxFileName,lineNumber:102},__self:this},_react2.default.createElement("b",{__source:{fileName:_jsxFileName,lineNumber:103},__self:this},"Note:"),note)))));}}]);return ErrorModal;}(_react.Component);ErrorModal.propTypes={/**\n     * availMatrix: object with information of `runningCollectors` and `unavailableUtilities`.\n     */availMatrix:_propTypes2.default.object.isRequired,/**\n     * collector: name of collector\n     */collector:_propTypes2.default.string.isRequired};exports.default=ErrorModal;/***/},/* 44 *//***/function(module,exports){module.exports=__webpack_require__(88);/***/},/* 45 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/src/components/CollectionInformation/CollectionInformation.jsx";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _i18n=__webpack_require__(3);var _Card=__webpack_require__(15);var _Card2=_interopRequireDefault(_Card);var _Text=__webpack_require__(11);var _Text2=_interopRequireDefault(_Text);var _ControlGroup=__webpack_require__(7);var _ControlGroup2=_interopRequireDefault(_ControlGroup);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var width=175;var cardHeaderStyle={height:"60px",borderRadius:"20px 20px 0 0"};var cardStyle={boxShadow:"0 6px 20px 0 rgba(0, 0, 0, 0.19)",borderRadius:"10px",border:"0px",margin:"5px"};var CollectionInformation=function(_Component){_inherits(CollectionInformation,_Component);function CollectionInformation(){var _ref;var _temp,_this,_ret;_classCallCheck(this,CollectionInformation);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return _ret=(_temp=(_this=_possibleConstructorReturn(this,(_ref=CollectionInformation.__proto__||Object.getPrototypeOf(CollectionInformation)).call.apply(_ref,[this].concat(args))),_this),_this.handleChildren=function(e,_ref2){var name=_ref2.name,value=_ref2.value;_this.props.handler(name,value);},_temp),_possibleConstructorReturn(_this,_ret);}_createClass(CollectionInformation,[{key:"render",value:function render(){var _props$collectorObj=this.props.collectorObj,name=_props$collectorObj.name,description=_props$collectorObj.description;return _react2.default.createElement(_Card2.default,{style:cardStyle,__source:{fileName:_jsxFileName,lineNumber:27},__self:this},_react2.default.createElement(_Card2.default.Header,{style:cardHeaderStyle,title:"Collection Information",__source:{fileName:_jsxFileName,lineNumber:28},__self:this}),_react2.default.createElement(_Card2.default.Body,{__source:{fileName:_jsxFileName,lineNumber:29},__self:this},_react2.default.createElement(_ControlGroup2.default,{label:"Name",labelWidth:width,style:{marginTop:"10px"},__source:{fileName:_jsxFileName,lineNumber:30},__self:this},_react2.default.createElement(_Text2.default,{inline:true,value:name,onChange:this.handleChildren,name:"name",__source:{fileName:_jsxFileName,lineNumber:31},__self:this})),_react2.default.createElement(_ControlGroup2.default,{label:"Description",labelWidth:width,style:{marginTop:"10px"},__source:{fileName:_jsxFileName,lineNumber:33},__self:this},_react2.default.createElement(_Text2.default,{multiline:true,inline:true,value:description,onChange:this.handleChildren,placeholder:"optional",name:"description",__source:{fileName:_jsxFileName,lineNumber:38},__self:this}))));}}]);return CollectionInformation;}(_react.Component);exports.default=CollectionInformation;/***/},/* 46 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/src/components/DistributedCollection/DistributedCollection.jsx";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _i18n=__webpack_require__(3);var _Card=__webpack_require__(15);var _Card2=_interopRequireDefault(_Card);var _ClusterConfiguration=__webpack_require__(34);var _PopOverText=__webpack_require__(10);var _PopOverText2=_interopRequireDefault(_PopOverText);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _objectWithoutProperties(obj,keys){var target={};for(var i in obj){if(keys.indexOf(i)>=0)continue;if(!Object.prototype.hasOwnProperty.call(obj,i))continue;target[i]=obj[i];}return target;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var cardHeaderStyle={height:"60px",borderRadius:"20px 20px 0 0"};var cardStyle={boxShadow:"0 6px 20px 0 rgba(0, 0, 0, 0.19)",borderRadius:"10px",border:"0px",margin:"5px"};var helpText="\\n* Select multiple connected peers from the dropdown.\\n\\n* Only showing those peers that have RapidDiag app enabled.\\n\\n* The first option in the drop-down is the local instance.\\n";var DistributedCollection=function(_Component){_inherits(DistributedCollection,_Component);function DistributedCollection(){var _ref;var _temp,_this,_ret;_classCallCheck(this,DistributedCollection);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return _ret=(_temp=(_this=_possibleConstructorReturn(this,(_ref=DistributedCollection.__proto__||Object.getPrototypeOf(DistributedCollection)).call.apply(_ref,[this].concat(args))),_this),_this.handleChildren=function(attribute,value){_this.props.handler(attribute,value);},_temp),_possibleConstructorReturn(_this,_ret);}_createClass(DistributedCollection,[{key:"render",value:function render(){var _props=this.props,handler=_props.handler,data=_objectWithoutProperties(_props,["handler"]);return _react2.default.createElement(_Card2.default,{style:cardStyle,__source:{fileName:_jsxFileName,lineNumber:32},__self:this},_react2.default.createElement(_Card2.default.Header,{style:cardHeaderStyle,title:"Distributed Collection",__source:{fileName:_jsxFileName,lineNumber:33},__self:this}),_react2.default.createElement(_Card2.default.Body,{__source:{fileName:_jsxFileName,lineNumber:34},__self:this},_react2.default.createElement("div",{style:{padding:"30px"},__source:{fileName:_jsxFileName,lineNumber:35},__self:this},_react2.default.createElement(_ClusterConfiguration.ClusterConfiguration,{handler:this.handleChildren,data:data.collectorObj,__source:{fileName:_jsxFileName,lineNumber:36},__self:this}),_react2.default.createElement(_PopOverText2.default,{buttonStyle:{},dialogueBoxStyle:{padding:"10px"},help:helpText,__source:{fileName:_jsxFileName,lineNumber:40},__self:this}))));}}]);return DistributedCollection;}(_react.Component);exports.default=DistributedCollection;/***/},/* 47 *//***/function(module,exports){module.exports=__webpack_require__(106);/***/},/* 48 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/task-template-wizard/src/components/Review/Review.jsx";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _DefinitionList=__webpack_require__(30);var _DefinitionList2=_interopRequireDefault(_DefinitionList);var _url=__webpack_require__(2);var _JSON_KEY_BINDINGS=__webpack_require__(6);var _TaskContent=__webpack_require__(96);var _TaskContent2=_interopRequireDefault(_TaskContent);var _CommonService=__webpack_require__(5);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Review=function(_Component){_inherits(Review,_Component);function Review(props){var _this2=this;_classCallCheck(this,Review);var _this=_possibleConstructorReturn(this,(Review.__proto__||Object.getPrototypeOf(Review)).call(this,props));_this.getResourceMonitorDescription=function(data){return data.map(function(resource){return _react2.default.createElement(_DefinitionList2.default,{termWidth:300,__source:{fileName:_jsxFileName,lineNumber:32},__self:_this2},_react2.default.createElement(_DefinitionList2.default.Term,{__source:{fileName:_jsxFileName,lineNumber:33},__self:_this2},_JSON_KEY_BINDINGS.KEY_BINDING[resource.metric]),_react2.default.createElement(_DefinitionList2.default.Description,{__source:{fileName:_jsxFileName,lineNumber:34},__self:_this2},resource.threshold+" ("+resource.invert+")"));});};_this.getProcessLabel=function(data){if(data!==undefined){if(data.process!==undefined){return _react2.default.createElement(_DefinitionList2.default.Description,{__source:{fileName:_jsxFileName,lineNumber:41},__self:_this2},data.process_type+" ("+data.pid+")");}return _react2.default.createElement(_DefinitionList2.default.Description,{__source:{fileName:_jsxFileName,lineNumber:44},__self:_this2},data.name+" - "+data.process_type+" ("+data.pid+")");}return _react2.default.createElement(_DefinitionList2.default.Description,{__source:{fileName:_jsxFileName,lineNumber:49},__self:_this2},"splunk search matched");};_this.handleChildren=function(attribute,value){_this.setState(_defineProperty({},attribute,value));_this.props.handler(attribute,value);};_this.state={};return _this;}_createClass(Review,[{key:"componentDidMount",value:function componentDidMount(){var _this3=this;var peers=this.props.cluster?this.props.selectedIndexers:[];var getProcessUrl=(0,_url.createRESTURL)("rapid_diag/get_process_info?output_mode=json");var params={peers:JSON.stringify(peers)};(0,_CommonService.axiosGetCall)(getProcessUrl,params).then(function(responseJson){_this3.setState({processData:responseJson.data});_this3.props.handler("processData",responseJson.data);}).catch(function(error){console.error(error);});}},{key:"render",value:function render(){return _react2.default.createElement("div",{__source:{fileName:_jsxFileName,lineNumber:59},__self:this},_react2.default.createElement(_TaskContent2.default,{task:this.props,handler:this.handleChildren,disableNext:this.props.disableNext,setCollectorStateById:this.props.setCollectorStateById,validationParameters:this.props.validationParameters,isReview:true,__source:{fileName:_jsxFileName,lineNumber:60},__self:this}));}}]);return Review;}(_react.Component);exports.default=Review;/***/},/* 49 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.PencilStyle=exports.StyledHeaderTitle=exports.StyledHeader=exports.StyledReview=exports.cardStyle=undefined;var _templateObject=_taggedTemplateLiteral(["\\n    float: right;\\n    margin-right: 3px;\\n    visibility: hidden;\\n"],["\\n    float: right;\\n    margin-right: 3px;\\n    visibility: hidden;\\n"]),_templateObject2=_taggedTemplateLiteral(["\\n    padding-bottom: 5px;\\n    &:hover {\\n        background-color: #ebeef3;\\n        border-radius: 10px;\\n        cursor: pointer !important;\\n        "," {\\n        visibility: visible;\\n        }\\n    }\\n"],["\\n    padding-bottom: 5px;\\n    &:hover {\\n        background-color: #ebeef3;\\n        border-radius: 10px;\\n        cursor: pointer !important;\\n        "," {\\n        visibility: visible;\\n        }\\n    }\\n"]),_templateObject3=_taggedTemplateLiteral(["\\n    padding: 10px 20px 20px 20px;\\n    line-height: 20px;\\n    display: inline-block;\\n"],["\\n    padding: 10px 20px 20px 20px;\\n    line-height: 20px;\\n    display: inline-block;\\n"]),_templateObject4=_taggedTemplateLiteral(["\\n    font-weight: 500;\\n    font-size: 16px;\\n    margin: 0px;\\n"],["\\n    font-weight: 500;\\n    font-size: 16px;\\n    margin: 0px;\\n"]);var _styledComponents=__webpack_require__(21);var _styledComponents2=_interopRequireDefault(_styledComponents);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _taggedTemplateLiteral(strings,raw){return Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}));}var cardStyle={margin:10+"px",border:0,boxShadow:"0 6px 20px 0 rgba(92,192,92, 0.38)",borderRadius:10+"px",flexWrap:"flex",minWidth:"48%",maxWidth:"48%"};var PencilStyle=_styledComponents2.default.div(_templateObject);var StyledReview=_styledComponents2.default.div(_templateObject2,PencilStyle);var StyledHeader=_styledComponents2.default.div(_templateObject3);var StyledHeaderTitle=_styledComponents2.default.h1(_templateObject4);exports.cardStyle=cardStyle;exports.StyledReview=StyledReview;exports.StyledHeader=StyledHeader;exports.StyledHeaderTitle=StyledHeaderTitle;exports.PencilStyle=PencilStyle;/***/},/* 50 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});/* eslint-disable no-restricted-syntax *//* eslint-disable func-names */var allValidations={collection_info:function collection_info(stateObj){var valid=true;var action_needed={};var validFile=this.utils.isValidName.call(this,stateObj.name);var message="";if(!validFile.status){action_needed.name=validFile.message;valid=valid&&false;}if(stateObj.description&&stateObj.description.length>0){if(stateObj.description.length>8192){message="Collection Description cannot contain more than 8192 characters.";action_needed.description=message;valid=valid&&false;}if(!stateObj.description.trim().length){message="Collection Description should not contain only spaces.";action_needed.description=message;valid=valid&&false;}}return{valid:valid,action_needed:action_needed};},distributed_collection:function distributed_collection(stateObj){var message="";var valid=true;var action_needed={};if(stateObj.selectedIndexers<1){message="Please select peers from the dropdown.";action_needed.selectedIndexers=message;valid=valid&&false;}return{valid:valid,action_needed:action_needed};},search_debug:function search_debug(stateObj){var message="";var valid=true;var action_needed={};if(stateObj.search_debug.selected===true){if(!stateObj.search_debug.search_regex||stateObj.search_debug.search_regex.length===0){message="Please enter the regular expression to match the search.";action_needed.search_regex=message;valid=valid&&false;}if(valid&&stateObj.search_debug.search_regex.trim().length===0){message="Search regex should not contain only spaces.";action_needed.search_regex=message;valid=valid&&false;}}return{valid:valid,action_needed:action_needed};},system_call_trace:function system_call_trace(stateObj){var message="";var action_needed={};var valid=true;var result=false;var serachResult=stateObj.search_debug?this.utils.getSearchDebugFlag.call(this,stateObj.search_debug):false;if(stateObj.system_call_trace.selected){if(!serachResult&&!stateObj.system_call_trace.process){message="Please select a process for System Call Trace collector.";action_needed.process=message;valid=valid&&false;}result=this.utils.validateBoundedFloat.call(this,"Collection Time",stateObj.system_call_trace.collection_time,true,10,2592000);if(result!==true){action_needed.collection_time=result;valid=valid&&false;}}return{valid:valid,action_needed:action_needed};},stack_trace:function stack_trace(stateObj){var message="";var valid=true;var action_needed={};var serachResult=stateObj.search_debug?this.utils.getSearchDebugFlag.call(this,stateObj.search_debug):false;if(stateObj.stack_trace.selected){if(!serachResult&&!stateObj.stack_trace.process){message="Please select a process for Stack Trace collector.";action_needed.process=message;valid=valid&&false;}}return{valid:valid,action_needed:action_needed};},network_packet:function network_packet(stateObj){var message="";var action_needed={};var valid=true;var result=false;if(stateObj.network_packet.selected){var v4Seg="(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])";var v4Str="("+v4Seg+"[.]){3}"+v4Seg;var IPv4Reg=new RegExp("^"+v4Str+"$");var v6Seg="(?:[0-9a-fA-F]{1,4})";var IPv6Reg=new RegExp("^("+("(?:"+v6Seg+":){7}(?:"+v6Seg+"|:)|")+("(?:"+v6Seg+":){6}(?:"+v4Str+"|:"+v6Seg+"|:)|")+("(?:"+v6Seg+":){5}(?::"+v4Str+"|(:"+v6Seg+"){1,2}|:)|")+("(?:"+v6Seg+":){4}(?:(:"+v6Seg+"){0,1}:"+v4Str+"|(:"+v6Seg+"){1,3}|:)|")+("(?:"+v6Seg+":){3}(?:(:"+v6Seg+"){0,2}:"+v4Str+"|(:"+v6Seg+"){1,4}|:)|")+("(?:"+v6Seg+":){2}(?:(:"+v6Seg+"){0,3}:"+v4Str+"|(:"+v6Seg+"){1,5}|:)|")+("(?:"+v6Seg+":){1}(?:(:"+v6Seg+"){0,4}:"+v4Str+"|(:"+v6Seg+"){1,6}|:)|")+("(?::((?::"+v6Seg+"){0,5}:"+v4Str+"|(?::"+v6Seg+"){1,7}|:))")+")(%[0-9a-zA-Z]{1,})?$");if(!this.utils.isEmpty(stateObj.network_packet.ip_address)&&!(IPv4Reg.test(stateObj.network_packet.ip_address)||IPv6Reg.test(stateObj.network_packet.ip_address))){message="Please enter valid IP Address.";action_needed.ip_address=message;valid=valid&&false;}result=this.utils.validateBoundedInt.call(this,"Port",stateObj.network_packet.port,false,1,65535);if(result!==true){action_needed.port=result;valid=valid&&false;}result=this.utils.validateBoundedFloat.call(this,"Collection Time",stateObj.network_packet.collection_time,true,10,2592000);if(result!==true){action_needed.collection_time=result;valid=valid&&false;}}return{valid:valid,action_needed:action_needed};},search_result:function search_result(stateObj){var message="";var action_needed={};var valid=true;if(stateObj.search_result.selected){if(!stateObj.search_result.search_query){message="Please enter a search query.";action_needed.search_query=message;valid=valid&&false;}if(valid&&stateObj.search_result.search_query.trim().length===0){message="Search query must not contain only spaces.";action_needed.search_query=message;valid=valid&&false;}}return{valid:valid,action_needed:action_needed};},iops:function iops(stateObj){var action_needed={};var result=false;var valid=true;if(stateObj.iops.selected){result=this.utils.validateBoundedFloat.call(this,"Collection Time",stateObj.iops.collection_time,true,10,2592000);if(result!==true){action_needed.collection_time=result;valid=valid&&false;}}return{valid:valid,action_needed:action_needed};},netstat:function netstat(stateObj){return{valid:true,action_needed:{}};},ps:function ps(stateObj){return{valid:true,action_needed:{}};},lsof:function lsof(stateObj){var message="";var valid=true;var action_needed={};var serachResult=stateObj.search_debug?this.utils.getSearchDebugFlag.call(this,stateObj.search_debug):false;if(stateObj.lsof.selected){if(!serachResult&&!stateObj.lsof.process){message="Please select a process for LSOF collector.";action_needed.process=message;valid=valid&&false;}}return{valid:valid,action_needed:action_needed};},splunk_diag:function splunk_diag(stateObj){return{valid:true,action_needed:{}};},periodic:function periodic(stateObj){var result=false;var valid=true;var action_needed={};if(stateObj.periodic.selected){result=this.utils.validateBoundedInt.call(this,"Number of Samples",stateObj.periodic.sampleCount,true,1,1e9);if(result!==true){action_needed.sampleCount=result;valid=valid&&false;}result=this.utils.validateBoundedFloat.call(this,"Period",stateObj.periodic.interval,true,0.01,2592000);if(result!==true){action_needed.interval=result;valid=valid&&false;}}return{valid:valid,action_needed:action_needed};},log_monitor:function log_monitor(stateObj){var message="";var valid=true;var action_needed={};if(stateObj.log_monitor.selected){if(!stateObj.log_monitor.selectedFile){message="Please select a file from dropdown.";action_needed.selectedFile=message;valid=valid&&false;}if(!stateObj.log_monitor.regex){message="Please enter a regex.";action_needed.regex=message;valid=valid&&false;}if(valid&&!stateObj.log_monitor.regex.trim().length){message="Regex should not contain only spaces.";action_needed.regex=message;valid=valid&&false;}}return{valid:valid,action_needed:action_needed};},resource_monitor:function resource_monitor(stateObj){var message="";var result=false;var action_needed={};var valid=true;if(stateObj.resource_monitor.selected){var resourceMonitorParamsEnum={cpu:"CPU",physical_memory:"Physical Memory",virtual_memory:"Virtual Memory"};if(this.utils.isEmpty(this.utils.getMetricThreshold("cpu",stateObj.resource_monitor))&&this.utils.isEmpty(this.utils.getMetricThreshold("physical_memory",stateObj.resource_monitor))&&this.utils.isEmpty(this.utils.getMetricThreshold("virtual_memory",stateObj.resource_monitor))){message="Enter value of CPU, Physical Memory & Virtual Memory.";action_needed.resource_monitor=message;valid=valid&&false;return{valid:valid,action_needed:action_needed};}var _arr=["cpu","physical_memory","virtual_memory"];for(var _i=0;_i<_arr.length;_i++){var param=_arr[_i];if(this.utils.isZero(this.utils.getMetricThreshold(param,stateObj.resource_monitor))){message=resourceMonitorParamsEnum[param]+" value should be greater than 0.01.";action_needed[param]=message;valid=valid&&false;}}if(valid){var _arr2=["cpu","physical_memory","virtual_memory"];for(var _i2=0;_i2<_arr2.length;_i2++){var _param=_arr2[_i2];result=this.utils.isValidTrackerInput(this.utils.getMetricThreshold(_param,stateObj.resource_monitor),this.utils.getMetricInvert(_param,stateObj.resource_monitor));if(result){message="Enter a value of "+resourceMonitorParamsEnum[_param];action_needed[_param]=message;valid=valid&&false;}}}if(valid){result=this.utils.validateBoundedFloat.call(this,resourceMonitorParamsEnum.cpu,this.utils.getMetricThreshold("cpu",stateObj.resource_monitor),false,0.01,100);if(result!==true){action_needed.cpu=result;valid=valid&&false;}result=this.utils.validateBoundedFloat.call(this,resourceMonitorParamsEnum.physical_memory,this.utils.getMetricThreshold("physical_memory",stateObj.resource_monitor),false,0.01,1e9);if(result!==true){action_needed.physical_memory=result;valid=valid&&false;}result=this.utils.validateBoundedFloat.call(this,resourceMonitorParamsEnum.virtual_memory,this.utils.getMetricThreshold("virtual_memory",stateObj.resource_monitor),false,0.01,1e9);if(result!==true){action_needed.virtual_memory=result;valid=valid&&false;}}}return{valid:valid,action_needed:action_needed};},utils:{INVALID_FILE_CHARS:/[\\\\/:*?"<>|]/g,isValidName:function isValidName(name){var invalidFileChars=this.utils.INVALID_FILE_CHARS;if(!name||name.length===0||/^\\s+$/.test(name)){return{status:false,message:"Collection Name cannot be empty."};}if(!(typeof name==="string"||name instanceof String)){return{status:false,message:"Collection Name must be a string."};// check for data type\n}invalidFileChars.lastIndex=0;if(invalidFileChars.test(name)){return{status:false,message:"Collection Name contains invalid character(s)."};// check for certain invalid characters\n}if(name==="."||name===".."){return{status:false,message:"Collection Name contains invalid character(s)."};// check for reserved values\n}if(name.length>256){return{valid:false,message:"Collection name cannot contain more than 256 characters."};}return{status:true};},isEmpty:function isEmpty(value){return value===""||value===null||value===undefined;},isBound:function isBound(value,min,max){return min!==null&&value<min||max!==null&&value>max;},isZero:function isZero(value){return value===0;},isValidTrackerInput:function isValidTrackerInput(value,invert){return invert&&!value;},messageBound:function messageBound(description,min,max){var message=description+" value should be";message+=min!==null?" at least "+min:"";message+=min!==null&&max!==null?" and":"";message+=max!==null?" at most "+max:"";return message;},validateBoundedFloat:function validateBoundedFloat(description,value,isMandatory){var min=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var max=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;if(this.utils.isEmpty(value)){return isMandatory?description+" cannot be empty.":true;}if(!Number.isFinite(value)){return description+" should be a float.";}if(this.utils.isBound(value,min,max)){var message=this.utils.messageBound(description,min,max);return message;}return true;},validateBoundedInt:function validateBoundedInt(description,value,isMandatory){var min=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var max=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;if(this.utils.isEmpty(value)){return isMandatory?description+" cannot be empty.":true;}if(!Number.isInteger(value)){return description+" should be an integer.";}if(this.utils.isBound(value,min,max)){var message=this.utils.messageBound(description,min,max);return message;}return true;},getMetricThreshold:function getMetricThreshold(metric,resource_monitor){if(resource_monitor.resource_monitor_trackers.length>0){for(var i=0;i<resource_monitor.resource_monitor_trackers.length;i++){if(metric===resource_monitor.resource_monitor_trackers[i].metric){return resource_monitor.resource_monitor_trackers[i].threshold;}}}return"";},getMetricInvert:function getMetricInvert(metric,resource_monitor){if(resource_monitor.resource_monitor_trackers.length>0){for(var i=0;i<resource_monitor.resource_monitor_trackers.length;i++){if(metric===resource_monitor.resource_monitor_trackers[i].metric){return resource_monitor.resource_monitor_trackers[i].invert;}}}return false;},getSearchDebugFlag:function getSearchDebugFlag(search_debug){return search_debug.filter(function(search_debug){return search_debug.selected==true;}).length>0;}}};var validate=exports.validate=function validate(cardName,stateObj){return allValidations[cardName](stateObj);};/***/},/* 51 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});/** \n * File contains methods to create task json from state objects\n */var ALL_TRIGGERS=["periodic","log_monitor","resource_monitor","search_debug"];var states=["system_call_trace","stack_trace","network_packet","search_result","iops","netstat","ps","lsof","periodic","log_monitor","resource_monitor","search_debug"];var addCollector=function addCollector(collector,collectors){if(collector.selected){delete collector.selected;collectors.push(collector);}return collectors;};var getChildrenObj=function getChildrenObj(data,arr,level){states.map(function(prop){return data[prop][0].selected&&data[prop].map(function(collector){if(collector.parentId===level){collector.name=prop;arr.push(collector);getChildrenObj(data,arr,collector.level);}});});return arr;};var getTaskObjs=function getTaskObjs(data){var tasks=[];states.map(function(prop){return data[prop][0].selected&&data[prop].map(function(collector){if(collector.parentId===0){var arr=[];collector.name=prop;arr.push(collector);getChildrenObj(data,arr,collector.level);tasks.push(arr);}});});return tasks;};var getNestedCollectors=function getNestedCollectors(task,parentId){return task.filter(function(object){return object.parentId===parentId;}).map(function(object){var collectors=getNestedCollectors(task,object.level);if(ALL_TRIGGERS.indexOf(object.name)!==-1||collectors.length>0){object.collectors=collectors;object.collectors.state="Waiting";}delete object.name;delete object.parentId;delete object.level;delete object.selected;delete object.action_needed;return object;});};var createTask=exports.createTask=function createTask(data){var collections=getTaskObjs(data);var tasks=collections.map(function(task){var collection=task.filter(function(object){return object.parentId===0;}).map(function(object){var collectors=getNestedCollectors(task,object.level);object.collectors=collectors;object.collectors.state="Waiting";delete object.parentId;delete object.level;delete object.selected;delete object.name;delete object.action_needed;return object;});return collection[0];});/**\n     * if any trigger is selected it removes `splunk_diag` from array\n     */tasks=addCollector(data.splunk_diag[0],tasks);var task={"__class__":"rapid_diag.task.Task","name":data.name,"description":data.description,"collectors":tasks};return task;};/***/},/* 52 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.RequestDataCollection=undefined;var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/step-wizard/src/RequestDataCollection.jsx";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _url=__webpack_require__(2);var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);__webpack_require__(102);var _TaskRunService=__webpack_require__(103);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var RequestDataCollection=exports.RequestDataCollection=function(_Component){_inherits(RequestDataCollection,_Component);function RequestDataCollection(props){_classCallCheck(this,RequestDataCollection);var _this=_possibleConstructorReturn(this,(RequestDataCollection.__proto__||Object.getPrototypeOf(RequestDataCollection)).call(this,props));_this.prepareData=function(rawData){var data=JSON.parse(rawData);// If the JSON in var/run folder is uploaded\nif("task"in data){data=data.task;}// delete host and task_id in case it is uploaded by file\ndelete data.host;delete data.task_id;data=encodeURI(JSON.stringify(data));return data;};_this.state={message:"Starting data collection task."};return _this;}_createClass(RequestDataCollection,[{key:"componentDidMount",value:function componentDidMount(){var _this2=this;var data=this.props.data.collectorData;data=this.prepareData(data);var url=(0,_url.createRESTURL)("rapid_diag/task_runner");var params={payload:data,peers:JSON.stringify(this.props.selectedIndexers)};(0,_TaskRunService.axiosGetCall)(url,params).then(function(){window.location.href=(0,_url.createURL)("app/splunk_rapid_diag/task_manager");}).catch(function(err){_this2.setState({message:"Task can not be started."});});}},{key:"render",value:function render(){return _react2.default.createElement("div",{style:{marginTop:"3%",textAlign:"center",fontSize:17,fontWeight:500},__source:{fileName:_jsxFileName,lineNumber:46},__self:this},this.state.message);}}]);return RequestDataCollection;}(_react.Component);/***/},/* 53 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/step-wizard/src/Container.jsx";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _StepWizard=__webpack_require__(54);var _StepWizard2=_interopRequireDefault(_StepWizard);var _ErrorBoundary=__webpack_require__(112);var _ErrorBoundary2=_interopRequireDefault(_ErrorBoundary);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Container=function(_Component){_inherits(Container,_Component);function Container(props){var _ref;_classCallCheck(this,Container);for(var _len=arguments.length,args=Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}var _this=_possibleConstructorReturn(this,(_ref=Container.__proto__||Object.getPrototypeOf(Container)).call.apply(_ref,[this,props].concat(args)));_this.handleChildren=function(key,value){_this.setState(_defineProperty({},key,value));};_this.setCollectorStateById=function(collectorObj,stateName){var index=null;var tempState=_this.state[stateName];for(var i=0;i<tempState.length;i++){if(tempState[i].id===collectorObj.id){index=i;break;}}tempState[index]=collectorObj;_this.setState(_defineProperty({},_this.state[stateName],tempState));};_this.state={activePanelId:"one"};return _this;}_createClass(Container,[{key:"render",value:function render(){return _react2.default.createElement("div",{__source:{fileName:_jsxFileName,lineNumber:33},__self:this},_react2.default.createElement(_ErrorBoundary2.default,{__source:{fileName:_jsxFileName,lineNumber:34},__self:this},_react2.default.createElement(_StepWizard2.default,{handler:this.handleChildren,activePanelId:this.state.activePanelId,setCollectorStateById:this.setCollectorStateById,__source:{fileName:_jsxFileName,lineNumber:35},__self:this})));}}]);return Container;}(_react.Component);exports.default=Container;/***/},/* 54 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.CollectionActionWarning=undefined;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/step-wizard/src/StepWizard.jsx";/* eslint-disable react/no-did-update-set-state */var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _lodash=__webpack_require__(17);var _Button=__webpack_require__(8);var _Button2=_interopRequireDefault(_Button);var _ChevronLeft=__webpack_require__(55);var _ChevronLeft2=_interopRequireDefault(_ChevronLeft);var _ChevronRight=__webpack_require__(56);var _ChevronRight2=_interopRequireDefault(_ChevronRight);var _StepBar=__webpack_require__(57);var _StepBar2=_interopRequireDefault(_StepBar);var _Heading=__webpack_require__(31);var _Heading2=_interopRequireDefault(_Heading);var _Toaster=__webpack_require__(18);var _Toaster2=_interopRequireDefault(_Toaster);var _ToastMessages=__webpack_require__(58);var _ToastMessages2=_interopRequireDefault(_ToastMessages);var _ToastConstants=__webpack_require__(19);var _ColumnLayout=__webpack_require__(59);var _ColumnLayout2=_interopRequireDefault(_ColumnLayout);var _InfoCircle=__webpack_require__(20);var _InfoCircle2=_interopRequireDefault(_InfoCircle);var _url=__webpack_require__(2);var _TabbedPane=__webpack_require__(60);var _StepZero=__webpack_require__(38);var _StepOne=__webpack_require__(93);var _StepTwo=__webpack_require__(94);var _StepThree=__webpack_require__(95);var _StepFour=__webpack_require__(101);var _StepOne2=__webpack_require__(33);var _StepTwo2=__webpack_require__(104);var _StepThree2=__webpack_require__(106);var _RapidDiagInfoService=__webpack_require__(107);var _RapidDiagInfoService2=_interopRequireDefault(_RapidDiagInfoService);var _StepWizardStyles=__webpack_require__(108);var StepWizardStyles=_interopRequireWildcard(_StepWizardStyles);var _Validation=__webpack_require__(109);var _CommonService=__webpack_require__(5);var _Helper=__webpack_require__(110);var _Helper2=_interopRequireDefault(_Helper);var _CheckUtility=__webpack_require__(28);var _buildReviewObject=__webpack_require__(22);var _JSON_KEY_BINDINGS=__webpack_require__(6);var _constants=__webpack_require__(9);var _utils=__webpack_require__(27);function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key))newObj[key]=obj[key];}}newObj.default=obj;return newObj;}}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var createToast=(0,_Toaster.makeCreateToast)(_Toaster2.default);var CollectionActionWarning=exports.CollectionActionWarning=_react2.default.memo(function(props){return _react2.default.createElement("div",{style:{color:"red",display:"contents"},__source:{fileName:_jsxFileName,lineNumber:38},__self:undefined},_react2.default.createElement(_InfoCircle2.default,{size:1,style:{marginTop:"-3px",width:"20px"},__source:{fileName:_jsxFileName,lineNumber:39},__self:undefined}),_react2.default.createElement("div",{style:{display:"contents"},__source:{fileName:_jsxFileName,lineNumber:40},__self:undefined},props.message));});var StepWizard=function(_Component){_inherits(StepWizard,_Component);function StepWizard(props){var _this2=this;_classCallCheck(this,StepWizard);var _this=_possibleConstructorReturn(this,(StepWizard.__proto__||Object.getPrototypeOf(StepWizard)).call(this,props));_this.setNavState=function(next){if(next<_this.state.headings.length){_this.setState({activeStepId:next});_this.props.handler("activeStepId",next);}};_this.getPageHeadings=function(){var totalPages=_this.state.headings.length;var pageHeadings=[];for(var i=0;i<totalPages;i++){pageHeadings.push(_react2.default.createElement(_StepBar2.default.Step,{key:i,__source:{fileName:_jsxFileName,lineNumber:195},__self:_this2},_this.state.headings[i]));}return pageHeadings;};_this.showLoader=function(){_this.setState({clusterLoader:true});};_this.hideLoader=function(){_this.setState({clusterLoader:false});};_this.isValidSchema=function(fileData){var url=(0,_url.createRESTURL)("rapid_diag/json_validation");var data=JSON.parse(fileData);var params={payload:data};return(0,_CommonService.axiosGetCall)(url,params);};_this.handleChildren=function(key,value){_this.setState(_defineProperty({},key,value));_this.props.handler(key,value);};_this.handleObj=function(allObj){_this.setState(_extends({},allObj));};_this.handleNext=function(){var _isValid=(0,_Validation.isValid)(_this.state),valid=_isValid.valid,action_needed=_isValid.action_needed;if(valid===true){if(_this.state.activePanelId==="two"&&_this.state.activeStepId===0){_this.isValidSchema(_this.state.fileData).then(function(response){if(response.data.valid){if(_this.state.activeStepId!==_this.state.headings.length-1){_this.setNavState(_this.state.activeStepId+1);}}else{var errorMessage=response.data.message;var arr=errorMessage.split(":");var key=arr[0].trim();if(arr[0].indexOf("cpu")>=0){key="cpu";}else if(arr[0].indexOf("physical_memory")>=0){key="physical_memory";}else if(arr[0].indexOf("virtual_memory")>=0){key="virtual_memory";}/**\n                             * some keys are not having mapping in KEY_BINDING because those keys are only set and used by backend\n                             */if(_JSON_KEY_BINDINGS.KEY_BINDING[key]!==undefined){errorMessage=arr[0]+" : "+_JSON_KEY_BINDINGS.KEY_BINDING[key]+arr[1];}else{errorMessage=arr[0]+" : "+arr[1];}_this.generateToast(errorMessage);}}).catch(function(response){var errorMessage=response.data.message;_this.generateToast(errorMessage);});}else if(_this.state.activeStepId!==_this.state.headings.length-1){_this.setNavState(_this.state.activeStepId+1);}if(_this.state.activePanelId==="two"&&_this.state.activeStepId===0){_this.state.reviewObj.cluster=_this.state.cluster;_this.state.reviewObj.selectedIndexers=_this.state.selectedIndexers;var availMatrix=(0,_CheckUtility.checkCollectorInfo)(_this.state,_this.state.selectedCollectors);var stateAvailMatrix=_this.state.availMatrix;stateAvailMatrix.runningCollectors=availMatrix.runningCollectors;stateAvailMatrix.unavailableUtilities=availMatrix.unavailableUtilities;_this.setState({availMatrix:stateAvailMatrix});(0,_buildReviewObject.disableNextButton)(_this,availMatrix,_this.state.selectedCollectors);}}else{Object.keys(action_needed).map(function(key,index){return _this.generateToast(action_needed[key]);});}};_this.generateToast=function(message){createToast({type:_ToastConstants.TOAST_TYPES.ERROR,message:message,autoDismiss:true,dismissOnActionClick:true,showAction:false});};_this.handlePrevious=function(){_this.setNavState(_this.state.activeStepId-1);};_this.handleTabPane=function(key,value){_this.setState(_defineProperty({},key,value));_this.props.handler(key,value);};_this.state={activeStepId:0,name:"",description:"",system_call_trace:[{id:(0,_utils.generateUID)(),selected:false,process:null,collection_time:null,__class__:"rapid_diag.collector.system_call_trace.SystemCallTrace",level:1,parentId:0}],stack_trace:[{id:(0,_utils.generateUID)(),selected:false,process:null,__class__:"rapid_diag.collector.stack_trace.StackTrace",level:1,parentId:0}],network_packet:[{id:(0,_utils.generateUID)(),selected:false,ip_address:null,port:null,collection_time:null,__class__:"rapid_diag.collector.network_packet.NetworkPacket",level:1,parentId:0}],search_result:[{id:(0,_utils.generateUID)(),selected:false,search_query:null,__class__:"rapid_diag.collector.search_result.SearchResult",level:1,parentId:0}],iops:[{id:(0,_utils.generateUID)(),selected:false,collection_time:null,__class__:"rapid_diag.collector.iops.IOPS",level:1,parentId:0}],netstat:[{id:(0,_utils.generateUID)(),selected:false,__class__:"rapid_diag.collector.netstat.NetStat",level:1,parentId:0}],ps:[{id:(0,_utils.generateUID)(),selected:false,__class__:"rapid_diag.collector.ps.PS",level:1,parentId:0}],lsof:[{id:(0,_utils.generateUID)(),selected:false,process:null,__class__:"rapid_diag.collector.lsof.LSOF",level:1,parentId:0}],splunk_diag:[{id:(0,_utils.generateUID)(),selected:true,__class__:"rapid_diag.collector.diag.Diag"}],search_debug:[{id:(0,_utils.generateUID)(),selected:false,__class__:"rapid_diag.collector.trigger.search_debug.SearchDebug",search_regex:"",level:1,parentId:0}],periodic:[{id:(0,_utils.generateUID)(),selected:false,__class__:"rapid_diag.collector.trigger.periodic.Periodic",sampleCount:null,interval:null,level:1,parentId:0}],log_monitor:[{id:(0,_utils.generateUID)(),selected:false,__class__:"rapid_diag.collector.trigger.log_monitor.LogMonitor",selectedFile:null,regex:null,level:1,parentId:0}],resource_monitor:[{id:(0,_utils.generateUID)(),selected:false,__class__:"rapid_diag.collector.trigger.resource_monitor.ResourceMonitor",resource_monitor_trackers:[],level:1,parentId:0}],clusterLoader:false,disableNext:false,disableNextMessage:"",isLoading:false,options:[],cluster:false,selectedIndexers:[],indexerList:[],rapidDiagData:[],localHostName:"",fileName:"",fileData:"",fileList:[],processData:[],availMatrix:{runningCollectors:{},unavailableUtilities:{}},reviewObj:{},steps:_this.props.activePanelId==="one"?[{name:"StepZero",component:_react2.default.createElement(_StepZero.StepZero,_extends({handler:_this.handleChildren},_this.state,{__source:{fileName:_jsxFileName,lineNumber:86},__self:this}))},{name:"StepOne",component:_react2.default.createElement(_StepOne.StepOne,_extends({handler:_this.handleChildren},_this.state,{__source:{fileName:_jsxFileName,lineNumber:87},__self:this}))},{name:"StepTwo",component:_react2.default.createElement(_StepTwo.StepTwo,_extends({handler:_this.handleChildren},_this.state,{__source:{fileName:_jsxFileName,lineNumber:88},__self:this}))},{name:"StepThree",component:_react2.default.createElement(_StepThree.StepThree,_extends({handler:_this.handleChildren},_this.state,{setCollectorStateById:_this.props.setCollectorStateById,__source:{fileName:_jsxFileName,lineNumber:89},__self:this}))},{name:"StepFour",component:_react2.default.createElement(_StepFour.StepFour,_extends({},_this.state,{__source:{fileName:_jsxFileName,lineNumber:90},__self:this}))}]:[{name:"StepOne",component:_react2.default.createElement(_StepOne2.StepOne,_extends({handler:_this.handleChildren},_this.state,{handleObj:_this.handleObj,__source:{fileName:_jsxFileName,lineNumber:92},__self:this}))},{name:"StepTwo",component:_react2.default.createElement(_StepTwo2.StepTwo,_extends({handler:_this.handleChildren},_this.state,{setCollectorStateById:_this.props.setCollectorStateById,__source:{fileName:_jsxFileName,lineNumber:93},__self:this}))},{name:"StepThree",component:_react2.default.createElement(_StepThree2.StepThree,_extends({},_this.state,{__source:{fileName:_jsxFileName,lineNumber:94},__self:this}))}],headings:_this.props.activePanelId==="one"?["Collection Details","Select Collection Type","Select Trigger Type","Review","Done"]:["Select File","Review","Done"]};return _this;}_createClass(StepWizard,[{key:"componentDidMount",value:function componentDidMount(){(0,_RapidDiagInfoService2.default)(this);}},{key:"componentWillReceiveProps",value:function componentWillReceiveProps(nextProps){var createSteps=[{name:"StepZero",component:_react2.default.createElement(_StepZero.StepZero,_extends({handler:this.handleChildren},this.state,{__source:{fileName:_jsxFileName,lineNumber:108},__self:this}))},{name:"StepOne",component:_react2.default.createElement(_StepOne.StepOne,_extends({handler:this.handleChildren},this.state,{__source:{fileName:_jsxFileName,lineNumber:109},__self:this}))},{name:"StepTwo",component:_react2.default.createElement(_StepTwo.StepTwo,_extends({handler:this.handleChildren},this.state,{__source:{fileName:_jsxFileName,lineNumber:110},__self:this}))},{name:"StepThree",component:_react2.default.createElement(_StepThree.StepThree,_extends({handler:this.handleChildren},this.state,{setCollectorStateById:this.props.setCollectorStateById,__source:{fileName:_jsxFileName,lineNumber:111},__self:this}))},{name:"StepFour",component:_react2.default.createElement(_StepFour.StepFour,_extends({},this.state,{__source:{fileName:_jsxFileName,lineNumber:112},__self:this}))}];var fileSteps=[{name:"StepOne",component:_react2.default.createElement(_StepOne2.StepOne,_extends({handler:this.handleChildren},this.state,{handleObj:this.handleObj,__source:{fileName:_jsxFileName,lineNumber:117},__self:this}))},{name:"StepTwo",component:_react2.default.createElement(_StepTwo2.StepTwo,_extends({handler:this.handleChildren},this.state,{setCollectorStateById:this.props.setCollectorStateById,disableNext:this.state.disableNext,__source:{fileName:_jsxFileName,lineNumber:118},__self:this}))},{name:"StepThree",component:_react2.default.createElement(_StepThree2.StepThree,_extends({},this.state,{__source:{fileName:_jsxFileName,lineNumber:119},__self:this}))}];var createStepHeadings=["Collection Details","Select Collection Type","Select Trigger Type","Review","Done"];var fileStepHeadings=["Select File","Review","Done"];if(nextProps.activePanelId==="one"){this.setState({steps:createSteps});this.setState({headings:createStepHeadings});}else{this.setState({steps:fileSteps});this.setState({headings:fileStepHeadings});}}},{key:"componentDidUpdate",value:function componentDidUpdate(prevProps,prevState){var _this3=this;if((this.state.cluster&&prevState.selectedIndexers!==this.state.selectedIndexers||prevState.cluster!==this.state.cluster)&&this.state.activeStepId===0){var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=_constants.INIT_COLLECTORS[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var collector=_step.value;this.toggleCollector(collector,false);}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}}if(this.state.activePanelId==="one"&&!(0,_lodash.isEqual)(this.state.search_debug,prevState.search_debug)){var stackStraceState=this.state.stack_trace.map(function(stack_trace){if(_this3.state.search_debug.filter(function(search_debug){return search_debug.selected===true;}).length>0){stack_trace.process=_constants.DUMMY_PROCESS;}else{stack_trace.process=null;}return stack_trace;});this.setState({stack_trace:stackStraceState});var systemCallState=this.state.system_call_trace.map(function(system_call_trace){if(_this3.state.search_debug.filter(function(search_debug){return search_debug.selected===true;}).length>0){system_call_trace.process=_constants.DUMMY_PROCESS;}else{system_call_trace.process=null;}return system_call_trace;});this.setState({system_call_trace:systemCallState});var lsofState=this.state.lsof.map(function(lsof){if(_this3.state.search_debug.filter(function(search_debug){return search_debug.selected===true;}).length>0){lsof.process=_constants.DUMMY_PROCESS;}else{lsof.process=null;}return lsof;});this.setState({lsof:lsofState});// this.setState({ buttonText: { system_call_trace: "Select a process...", stack_trace: "Select a process..." } });\n}}// Check and move to the next page if valid, else show error\n},{key:"toggleCollector",value:function toggleCollector(collector,isEnabled){var tempState=_extends({},this.state[collector][0]);tempState.selected=isEnabled;this.setState(_defineProperty({},collector,[tempState]));}},{key:"loadStepZero",value:function loadStepZero(){return _react2.default.createElement(_TabbedPane.TabbedPane,{activePanelId:this.state.activePanelId,handleObj:this.handleObj,handler:this.handleTabPane,data:this.state,__source:{fileName:_jsxFileName,lineNumber:309},__self:this});}},{key:"handleDisable",value:function handleDisable(){return this.state.activeStepId===this.state.headings.length-1;}},{key:"render",value:function render(){var _state=this.state,activeStepId=_state.activeStepId,activePanelId=_state.activePanelId,headings=_state.headings,disableNext=_state.disableNext,steps=_state.steps,disableNextMessage=_state.disableNextMessage;return _react2.default.createElement("div",{style:{width:100+"%"},__source:{fileName:_jsxFileName,lineNumber:320},__self:this},_react2.default.createElement(_ToastMessages2.default,{__source:{fileName:_jsxFileName,lineNumber:321},__self:this}),_react2.default.createElement("div",{style:StepWizardStyles.mainDivStyle,__source:{fileName:_jsxFileName,lineNumber:322},__self:this},_react2.default.createElement(_ColumnLayout2.default,{__source:{fileName:_jsxFileName,lineNumber:323},__self:this},_react2.default.createElement(_ColumnLayout2.default.Row,{style:{marginTop:20+"px"},__source:{fileName:_jsxFileName,lineNumber:324},__self:this},_react2.default.createElement(_ColumnLayout2.default.Column,{style:StepWizardStyles.colStyleHead,span:3,__source:{fileName:_jsxFileName,lineNumber:325},__self:this},_react2.default.createElement(_Heading2.default,{level:1,style:StepWizardStyles.colHeading,__source:{fileName:_jsxFileName,lineNumber:326},__self:this},"Data Collection Wizard")),_react2.default.createElement(_ColumnLayout2.default.Column,{style:StepWizardStyles.colStyle,span:7,__source:{fileName:_jsxFileName,lineNumber:328},__self:this},_react2.default.createElement(_StepBar2.default,{activeStepId:activeStepId,inline:true,style:StepWizardStyles.stepBar,__source:{fileName:_jsxFileName,lineNumber:329},__self:this},this.getPageHeadings())),_react2.default.createElement(_ColumnLayout2.default.Column,{style:StepWizardStyles.colStyleButton,span:2,__source:{fileName:_jsxFileName,lineNumber:333},__self:this},_react2.default.createElement("div",{__source:{fileName:_jsxFileName,lineNumber:334},__self:this},_react2.default.createElement(_Button2.default,{id:"stepWizardBackButton",icon:_react2.default.createElement(_ChevronLeft2.default,{__source:{fileName:_jsxFileName,lineNumber:337},__self:this}),label:"Back",appearance:"default",disabled:activeStepId===0||activeStepId===headings.length-1,onClick:this.handlePrevious,style:{marginBottom:"40px"},__source:{fileName:_jsxFileName,lineNumber:335},__self:this}),_react2.default.createElement(_Button2.default,{id:"stepWizardNextButton",label:activeStepId===headings.length-1?"Done":"Next",appearance:"primary",onClick:this.handleNext,disabled:activeStepId===headings.length-1||disableNext,style:{marginBottom:"40px"},__source:{fileName:_jsxFileName,lineNumber:344},__self:this},_react2.default.createElement(_ChevronRight2.default,{__source:{fileName:_jsxFileName,lineNumber:352},__self:this})),_react2.default.createElement(_Helper2.default,{id:"helpDocInfoButton",buttonStyle:{marginBottom:"40px",float:"right"},appearance:"pill",openByDefault:false,__source:{fileName:_jsxFileName,lineNumber:354},__self:this}),disableNext&&disableNextMessage&&activeStepId===1&&activePanelId=="two"?_react2.default.createElement("div",{style:{marginLeft:"-13px",marginTop:"-20px"},__source:{fileName:_jsxFileName,lineNumber:356},__self:this},_react2.default.createElement(CollectionActionWarning,{message:this.state.disableNextMessage,__source:{fileName:_jsxFileName,lineNumber:357},__self:this})):null))))),activeStepId===0?this.loadStepZero():steps[activeStepId].component);}}]);return StepWizard;}(_react.Component);exports.default=StepWizard;/***/},/* 55 *//***/function(module,exports){module.exports=__webpack_require__(110);/***/},/* 56 *//***/function(module,exports){module.exports=__webpack_require__(42);/***/},/* 57 *//***/function(module,exports){module.exports=__webpack_require__(593);/***/},/* 58 *//***/function(module,exports){module.exports=__webpack_require__(155);/***/},/* 59 *//***/function(module,exports){module.exports=__webpack_require__(245);/***/},/* 60 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.TabbedPane=undefined;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/step-wizard/src/TabbedPane.jsx";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _Plus=__webpack_require__(61);var _Plus2=_interopRequireDefault(_Plus);var _Upload=__webpack_require__(62);var _Upload2=_interopRequireDefault(_Upload);var _TabLayout=__webpack_require__(32);var _TabLayout2=_interopRequireDefault(_TabLayout);var _StepOne=__webpack_require__(33);var _StepZero=__webpack_require__(38);var _utils=__webpack_require__(27);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var TabbedPane=exports.TabbedPane=function(_Component){_inherits(TabbedPane,_Component);function TabbedPane(props){_classCallCheck(this,TabbedPane);var _this=_possibleConstructorReturn(this,(TabbedPane.__proto__||Object.getPrototypeOf(TabbedPane)).call(this,props));_initialiseProps.call(_this);var data=_this.props.data;data.activePanelId=_this.props.activePanelId?_this.props.activePanelId:"one";_this.state=data;return _this;}_createClass(TabbedPane,[{key:"componentWillReceiveProps",value:function componentWillReceiveProps(nextProps){if(nextProps.data.activePanelId===this.state.activePanelId){this.setState(nextProps.data);}else{this.setState(this.initTaskObjects());this.props.handleObj(this.initTaskObjects());}}// Get the value from children and store it in state\n},{key:"render",value:function render(){return _react2.default.createElement("div",{__source:{fileName:_jsxFileName,lineNumber:67},__self:this},_react2.default.createElement(_TabLayout2.default,{activePanelId:this.state.activePanelId,iconSize:"small",layout:"vertical",onChange:this.handleChange,style:{marginLeft:20},__source:{fileName:_jsxFileName,lineNumber:68},__self:this},_react2.default.createElement(_TabLayout2.default.Panel,{label:"Create",panelId:"one",icon:_react2.default.createElement(_Plus2.default,{__source:{fileName:_jsxFileName,lineNumber:69},__self:this}),__source:{fileName:_jsxFileName,lineNumber:69},__self:this},_react2.default.createElement(_StepZero.StepZero,_extends({handler:this.handleChildren},this.state,{__source:{fileName:_jsxFileName,lineNumber:70},__self:this}))),_react2.default.createElement(_TabLayout2.default.Panel,{label:"File",panelId:"two",icon:_react2.default.createElement(_Upload2.default,{__source:{fileName:_jsxFileName,lineNumber:72},__self:this}),__source:{fileName:_jsxFileName,lineNumber:72},__self:this},_react2.default.createElement(_StepOne.StepOne,_extends({handler:this.handleChildren,handleObj:this.props.handleObj},this.state,{__source:{fileName:_jsxFileName,lineNumber:73},__self:this})))));}}]);return TabbedPane;}(_react.Component);var _initialiseProps=function _initialiseProps(){var _this2=this;this.initTaskObjects=function(){return{name:"",description:"",system_call_trace:[{id:(0,_utils.generateUID)(),selected:false,process:null,collection_time:null,__class__:"rapid_diag.collector.system_call_trace.SystemCallTrace",level:1,parentId:0}],stack_trace:[{id:(0,_utils.generateUID)(),selected:false,process:null,__class__:"rapid_diag.collector.stack_trace.StackTrace",level:1,parentId:0}],network_packet:[{id:(0,_utils.generateUID)(),selected:false,ip_address:null,port:null,collection_time:null,__class__:"rapid_diag.collector.network_packet.NetworkPacket",level:1,parentId:0}],search_result:[{id:(0,_utils.generateUID)(),selected:false,search_query:null,__class__:"rapid_diag.collector.search_result.SearchResult",level:1,parentId:0}],iops:[{id:(0,_utils.generateUID)(),selected:false,collection_time:null,__class__:"rapid_diag.collector.iops.IOPS",level:1,parentId:0}],ps:[{id:(0,_utils.generateUID)(),selected:false,__class__:"rapid_diag.collector.ps.PS",level:1,parentId:0}],lsof:[{id:(0,_utils.generateUID)(),selected:false,process:null,__class__:"rapid_diag.collector.lsof.LSOF",level:1,parentId:0}],netstat:[{id:(0,_utils.generateUID)(),selected:false,__class__:"rapid_diag.collector.netstat.NetStat",level:1,parentId:0}],splunk_diag:[{id:(0,_utils.generateUID)(),selected:true,__class__:"rapid_diag.collector.diag.Diag"}],search_debug:[{id:(0,_utils.generateUID)(),selected:false,__class__:"rapid_diag.collector.trigger.search_debug.SearchDebug",search_regex:"",level:1,parentId:0}],periodic:[{id:(0,_utils.generateUID)(),selected:false,__class__:"rapid_diag.collector.trigger.periodic.Periodic",sampleCount:null,interval:null,level:1,parentId:0}],log_monitor:[{id:(0,_utils.generateUID)(),selected:false,__class__:"rapid_diag.collector.trigger.log_monitor.LogMonitor",selectedFile:null,regex:null,level:1,parentId:0}],resource_monitor:[{id:(0,_utils.generateUID)(),selected:false,__class__:"rapid_diag.collector.trigger.resource_monitor.ResourceMonitor",resource_monitor_trackers:[],level:1,parentId:0}],selectedCollectors:{},availMatrix:{runningCollectors:{},unavailableUtilities:{}},fileName:"",fileData:"",create:!_this2.props.data.create};};this.handleChildren=function(key,value){_this2.setState(_defineProperty({},key,value));_this2.props.handler(key,value);};this.handleChange=function(e,data){_this2.setState({activePanelId:data.activePanelId});_this2.props.handler("activePanelId",data.activePanelId);};};/***/},/* 61 *//***/function(module,exports){module.exports=__webpack_require__(246);/***/},/* 62 *//***/function(module,exports){module.exports=__webpack_require__(247);/***/},/* 63 *//***/function(module,exports){module.exports=__webpack_require__(595);/***/},/* 64 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.StyledMultiSelect=undefined;var _templateObject=_taggedTemplateLiteral(["\\n\\n    & [data-test=toggle] {\\n        border: 0;\\n        background: #ffffff;\\n        box-shadow: rgba(0, 0, 0, 0) 0px 10px 10px -10px\\n\\n\\n        &: hover {\\n            border: 0;\\n            background-color: #ffffff;\\n            box-shadow: rgba(92, 192, 92, 0.48) 0px 10px 10px -10px\\n        }\\n\\n        &: focus {\\n            border: 0;\\n            background-color: #ffffff;\\n            box-shadow: rgba(92, 192, 92, 0.48) 0px 10px 10px -10px\\n        }\\n    }\\n"],["\\n\\n    & [data-test=toggle] {\\n        border: 0;\\n        background: #ffffff;\\n        box-shadow: rgba(0, 0, 0, 0) 0px 10px 10px -10px\\n\\n\\n        &: hover {\\n            border: 0;\\n            background-color: #ffffff;\\n            box-shadow: rgba(92, 192, 92, 0.48) 0px 10px 10px -10px\\n        }\\n\\n        &: focus {\\n            border: 0;\\n            background-color: #ffffff;\\n            box-shadow: rgba(92, 192, 92, 0.48) 0px 10px 10px -10px\\n        }\\n    }\\n"]);var _styledComponents=__webpack_require__(21);var _styledComponents2=_interopRequireDefault(_styledComponents);var _Multiselect=__webpack_require__(35);var _Multiselect2=_interopRequireDefault(_Multiselect);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _taggedTemplateLiteral(strings,raw){return Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}));}var StyledMultiSelect=exports.StyledMultiSelect=(0,_styledComponents2.default)(_Multiselect2.default)(_templateObject);/***/},/* 65 *//***/function(module,exports){module.exports=__webpack_require__(57);/***/},/* 66 *//***/function(module,exports){module.exports=__webpack_require__(76);/***/},/* 67 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var iconStyle={width:15+"px",height:15+"px"};var dialogueBoxStyle={padding:20+"px",width:300+"px"};var warningIconStyle={width:15+"px",height:15+"px",color:"#F2A900"};exports.iconStyle=iconStyle;exports.dialogueBoxStyle=dialogueBoxStyle;exports.warningIconStyle=warningIconStyle;/***/},/* 68 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/src/components/SystemCallTrace/SystemCallTrace.jsx";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _ProcessSelector=__webpack_require__(24);var _NumberInput=__webpack_require__(14);var _NumberInput2=_interopRequireDefault(_NumberInput);var _CollectorCard=__webpack_require__(1);var _CollectorCard2=_interopRequireDefault(_CollectorCard);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var SystemCallTrace=function(_Component){_inherits(SystemCallTrace,_Component);function SystemCallTrace(props){_classCallCheck(this,SystemCallTrace);var _this=_possibleConstructorReturn(this,(SystemCallTrace.__proto__||Object.getPrototypeOf(SystemCallTrace)).call(this,props));_this.handleChildren=function(attribute,value){_this.props.handler(attribute,value);};_this.state={};return _this;}_createClass(SystemCallTrace,[{key:"render",value:function render(){var _props=this.props,availMatrix=_props.availMatrix,collectorObj=_props.collectorObj,system_call_trace=_props.system_call_trace,stack_trace=_props.stack_trace,search_debug=_props.search_debug,cluster=_props.cluster,selectedIndexers=_props.selectedIndexers,processData=_props.processData,loader=_props.loader,isReview=_props.isReview;return _react2.default.createElement(_CollectorCard2.default,{id:1,name:"system_call_trace",handler:this.handleChildren,availMatrix:availMatrix,collectorObj:collectorObj,search_debug:search_debug,customStyle:this.props.customStyle,isReview:isReview,__source:{fileName:_jsxFileName,lineNumber:31},__self:this},_react2.default.createElement(_ProcessSelector.ProcessSelector,{handler:this.handleChildren,collectorName:"system_call_trace",collectorObj:collectorObj,system_call_trace:system_call_trace,stack_trace:stack_trace,search_debug:search_debug,cluster:cluster,selectedIndexers:selectedIndexers,processData:processData,loader:loader,__source:{fileName:_jsxFileName,lineNumber:41},__self:this}),_react2.default.createElement(_NumberInput2.default,{name:"collection_time",min:0,collectorName:"system_call_trace",placeholder:"Collection Time (s)",collectorObj:collectorObj,handler:this.handleChildren,style:{width:50+"%"},__source:{fileName:_jsxFileName,lineNumber:53},__self:this}));}}]);return SystemCallTrace;}(_react.Component);SystemCallTrace.defaultProps={isReview:false};exports.default=SystemCallTrace;/***/},/* 69 *//***/function(module,exports){// shim for using process in browser\nvar process=module.exports={};// cached from whatever global is present so that test runners that stub it\n// don\'t break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn\'t define any globals.  It\'s inside a\n// function because try/catches deoptimize in certain engines.\nvar cachedSetTimeout;var cachedClearTimeout;function defaultSetTimout(){throw new Error(\'setTimeout has not been defined\');}function defaultClearTimeout(){throw new Error(\'clearTimeout has not been defined\');}(function(){try{if(typeof setTimeout===\'function\'){cachedSetTimeout=setTimeout;}else{cachedSetTimeout=defaultSetTimout;}}catch(e){cachedSetTimeout=defaultSetTimout;}try{if(typeof clearTimeout===\'function\'){cachedClearTimeout=clearTimeout;}else{cachedClearTimeout=defaultClearTimeout;}}catch(e){cachedClearTimeout=defaultClearTimeout;}})();function runTimeout(fun){if(cachedSetTimeout===setTimeout){//normal enviroments in sane situations\nreturn setTimeout(fun,0);}// if setTimeout wasn\'t available but was latter defined\nif((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout){cachedSetTimeout=setTimeout;return setTimeout(fun,0);}try{// when when somebody has screwed with setTimeout but no I.E. maddness\nreturn cachedSetTimeout(fun,0);}catch(e){try{// When we are in I.E. but the script has been evaled so I.E. doesn\'t trust the global object when called normally\nreturn cachedSetTimeout.call(null,fun,0);}catch(e){// same as above but when it\'s a version of I.E. that must have the global object for \'this\', hopfully our context correct otherwise it will throw a global error\nreturn cachedSetTimeout.call(this,fun,0);}}}function runClearTimeout(marker){if(cachedClearTimeout===clearTimeout){//normal enviroments in sane situations\nreturn clearTimeout(marker);}// if clearTimeout wasn\'t available but was latter defined\nif((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout){cachedClearTimeout=clearTimeout;return clearTimeout(marker);}try{// when when somebody has screwed with setTimeout but no I.E. maddness\nreturn cachedClearTimeout(marker);}catch(e){try{// When we are in I.E. but the script has been evaled so I.E. doesn\'t  trust the global object when called normally\nreturn cachedClearTimeout.call(null,marker);}catch(e){// same as above but when it\'s a version of I.E. that must have the global object for \'this\', hopfully our context correct otherwise it will throw a global error.\n// Some versions of I.E. have different rules for clearTimeout vs setTimeout\nreturn cachedClearTimeout.call(this,marker);}}}var queue=[];var draining=false;var currentQueue;var queueIndex=-1;function cleanUpNextTick(){if(!draining||!currentQueue){return;}draining=false;if(currentQueue.length){queue=currentQueue.concat(queue);}else{queueIndex=-1;}if(queue.length){drainQueue();}}function drainQueue(){if(draining){return;}var timeout=runTimeout(cleanUpNextTick);draining=true;var len=queue.length;while(len){currentQueue=queue;queue=[];while(++queueIndex<len){if(currentQueue){currentQueue[queueIndex].run();}}queueIndex=-1;len=queue.length;}currentQueue=null;draining=false;runClearTimeout(timeout);}process.nextTick=function(fun){var args=new Array(arguments.length-1);if(arguments.length>1){for(var i=1;i<arguments.length;i++){args[i-1]=arguments[i];}}queue.push(new Item(fun,args));if(queue.length===1&&!draining){runTimeout(drainQueue);}};// v8 likes predictible objects\nfunction Item(fun,array){this.fun=fun;this.array=array;}Item.prototype.run=function(){this.fun.apply(null,this.array);};process.title=\'browser\';process.browser=true;process.env={};process.argv=[];process.version=\'\';// empty string to avoid regexp issues\nprocess.versions={};function noop(){}process.on=noop;process.addListener=noop;process.once=noop;process.off=noop;process.removeListener=noop;process.removeAllListeners=noop;process.emit=noop;process.prependListener=noop;process.prependOnceListener=noop;process.listeners=function(name){return[];};process.binding=function(name){throw new Error(\'process.binding is not supported\');};process.cwd=function(){return\'/\';};process.chdir=function(dir){throw new Error(\'process.chdir is not supported\');};process.umask=function(){return 0;};/***/},/* 70 *//***/function(module,exports){module.exports=__webpack_require__(248);/***/},/* 71 *//***/function(module,exports){module.exports=__webpack_require__(156);/***/},/* 72 *//***/function(module,exports){module.exports=__webpack_require__(254);/***/},/* 73 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _jsxFileName=\'/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/components/Loader/Loader.jsx\';var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _WaitSpinner=__webpack_require__(74);var _WaitSpinner2=_interopRequireDefault(_WaitSpinner);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var Loader=function Loader(props){return props.load?_react2.default.createElement(_WaitSpinner2.default,{size:\'medium\',__source:{fileName:_jsxFileName,lineNumber:5},__self:undefined}):null;};exports.default=Loader;/***/},/* 74 *//***/function(module,exports){module.exports=__webpack_require__(150);/***/},/* 75 *//***/function(module,exports){module.exports=__webpack_require__(151);/***/},/* 76 *//***/function(module,exports){module.exports=__webpack_require__(75);/***/},/* 77 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var errorIconStyle={color:\'#DC4E41\',width:24+\'px\',height:24+\'px\'};var runningCollectorStyle={float:\'left\',marginRight:60+\'px\'};var unavailableUtilityStyle={float:\'left\',marginRight:30+\'px\'};var footerNoteStyle={float:\'left\',marginRight:30+\'px\',marginLeft:8+\'px\'};var fontStyle={fontFamily:\'"Splunk Platform Sans", "Proxima Nova", Roboto, Droid, "Helvetica Neue", Helvetica, Arial, sans-serif\'};exports.errorIconStyle=errorIconStyle;exports.runningCollectorStyle=runningCollectorStyle;exports.unavailableUtilityStyle=unavailableUtilityStyle;exports.footerNoteStyle=footerNoteStyle;exports.fontStyle=fontStyle;/***/},/* 78 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var card={height:300+"px",margin:10+"px",border:0,boxShadow:"0 6px 20px 0 rgba(92,192,92,0.38)",borderRadius:10+"px",minWidth:450+"px"};var cardHeader={fontWeight:700,fontSize:"large",display:"contents"};var cardBody={display:"inline",flexDirection:"column",justifyContent:"space-between",zIndex:"1",position:"relative"};var cardDisable={textAlign:"right",color:"#5cc05c"};var triggerCardChildren={position:"absolute",width:90+"%"};var cardChildren={position:"absolute",bottom:20,width:90+"%"};var enabledCard={textAlign:"justify"};var disabledCard={textAlign:"justify",opacity:0.5};exports.card=card;exports.cardHeader=cardHeader;exports.cardBody=cardBody;exports.cardDisable=cardDisable;exports.cardChildren=cardChildren;exports.enabledCard=enabledCard;exports.disabledCard=disabledCard;exports.triggerCardChildren=triggerCardChildren;/***/},/* 79 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/src/components/StackTrace/StackTrace.jsx";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _ProcessSelector=__webpack_require__(24);var _CollectorCard=__webpack_require__(1);var _CollectorCard2=_interopRequireDefault(_CollectorCard);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var StackTrace=function(_Component){_inherits(StackTrace,_Component);function StackTrace(props){_classCallCheck(this,StackTrace);var _this=_possibleConstructorReturn(this,(StackTrace.__proto__||Object.getPrototypeOf(StackTrace)).call(this,props));_this.handleChildren=function(attribute,value){_this.props.handler(attribute,value);};_this.state={};return _this;}_createClass(StackTrace,[{key:"render",value:function render(){var _props=this.props,availMatrix=_props.availMatrix,collectorObj=_props.collectorObj,system_call_trace=_props.system_call_trace,stack_trace=_props.stack_trace,search_debug=_props.search_debug,cluster=_props.cluster,selectedIndexers=_props.selectedIndexers,processData=_props.processData,open=_props.open,loader=_props.loader,isReview=_props.isReview;return _react2.default.createElement(_CollectorCard2.default,{id:2,name:"stack_trace",handler:this.handleChildren,availMatrix:availMatrix,collectorObj:collectorObj,search_debug:search_debug,customStyle:this.props.customStyle,isReview:isReview,__source:{fileName:_jsxFileName,lineNumber:30},__self:this},_react2.default.createElement(_ProcessSelector.ProcessSelector,{handler:this.handleChildren,collectorName:"stack_trace",system_call_trace:system_call_trace,stack_trace:stack_trace,search_debug:search_debug,collectorObj:collectorObj,cluster:cluster,selectedIndexers:selectedIndexers,open:open,processData:processData,loader:loader,__source:{fileName:_jsxFileName,lineNumber:40},__self:this}));}}]);return StackTrace;}(_react.Component);StackTrace.defaultProps={isReview:false};exports.default=StackTrace;/***/},/* 80 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/src/components/NetworkPacket/NetworkPacket.jsx";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _i18n=__webpack_require__(3);var _NumberInput=__webpack_require__(14);var _NumberInput2=_interopRequireDefault(_NumberInput);var _TextInput=__webpack_require__(16);var _TextInput2=_interopRequireDefault(_TextInput);var _CollectorCard=__webpack_require__(1);var _CollectorCard2=_interopRequireDefault(_CollectorCard);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var NetworkPacket=function(_Component){_inherits(NetworkPacket,_Component);function NetworkPacket(props){_classCallCheck(this,NetworkPacket);var _this=_possibleConstructorReturn(this,(NetworkPacket.__proto__||Object.getPrototypeOf(NetworkPacket)).call(this,props));_this.handleChildren=function(attribute,value){_this.setState(_defineProperty({},attribute,value));_this.props.handler(attribute,value);};_this.state={};return _this;}_createClass(NetworkPacket,[{key:"render",value:function render(){var _props=this.props,availMatrix=_props.availMatrix,collectorObj=_props.collectorObj,search_debug=_props.search_debug,isReview=_props.isReview;return _react2.default.createElement(_CollectorCard2.default,{id:3,name:"network_packet",handler:this.handleChildren,availMatrix:availMatrix,collectorObj:collectorObj,search_debug:search_debug,customStyle:this.props.customStyle,isReview:isReview,__source:{fileName:_jsxFileName,lineNumber:22},__self:this},_react2.default.createElement(_TextInput2.default,{name:"ip_address",cardName:"network_packet",placeholder:"Dest IP Address",collectorObj:collectorObj,handler:this.handleChildren,style:{width:30+"%"},__source:{fileName:_jsxFileName,lineNumber:32},__self:this}),_react2.default.createElement(_NumberInput2.default,{name:"port",collectorName:"network_packet",min:0,roundTo:0,placeholder:"Port",collectorObj:collectorObj,handler:this.handleChildren,style:{width:18+"%"},__source:{fileName:_jsxFileName,lineNumber:40},__self:this}),_react2.default.createElement(_NumberInput2.default,{name:"collection_time",collectorName:"network_packet",min:0,placeholder:"Collection Time (s)",collectorObj:collectorObj,handler:this.handleChildren,style:{width:45+"%"},__source:{fileName:_jsxFileName,lineNumber:50},__self:this}));}}]);return NetworkPacket;}(_react.Component);NetworkPacket.defaultProps={isReview:false};exports.default=NetworkPacket;/***/},/* 81 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/src/components/SearchResult/SearchResult.jsx";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _url=__webpack_require__(2);var _Anchor=__webpack_require__(82);var _Anchor2=_interopRequireDefault(_Anchor);var _TextInput=__webpack_require__(16);var _TextInput2=_interopRequireDefault(_TextInput);var _CollectorCard=__webpack_require__(1);var _CollectorCard2=_interopRequireDefault(_CollectorCard);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var searchUrl=(0,_url.createURL)("app/search/search?q=");var SearchResult=function(_Component){_inherits(SearchResult,_Component);function SearchResult(props){_classCallCheck(this,SearchResult);var _this=_possibleConstructorReturn(this,(SearchResult.__proto__||Object.getPrototypeOf(SearchResult)).call(this,props));_this.handleChildren=function(attribute,value){_this.props.handler(attribute,value);};_this.state={};return _this;}_createClass(SearchResult,[{key:"render",value:function render(){var _props=this.props,availMatrix=_props.availMatrix,collectorObj=_props.collectorObj,search_debug=_props.search_debug,isReview=_props.isReview;return _react2.default.createElement(_CollectorCard2.default,{id:4,name:"search_result",handler:this.handleChildren,availMatrix:availMatrix,collectorObj:collectorObj,search_debug:search_debug,customStyle:this.props.customStyle,isReview:isReview,__source:{fileName:_jsxFileName,lineNumber:22},__self:this},_react2.default.createElement(_TextInput2.default,{name:"search_query",cardName:"search_result",handler:this.handleChildren,multiline:true,collectorObj:collectorObj,style:{width:100+"%"},__source:{fileName:_jsxFileName,lineNumber:32},__self:this}),_react2.default.createElement("br",{__source:{fileName:_jsxFileName,lineNumber:40},__self:this}),_react2.default.createElement(_Anchor2.default,{url:""+searchUrl+collectorObj.search_query,openInNewContext:true,style:{width:30+"%"},disabled:!collectorObj.selected,__source:{fileName:_jsxFileName,lineNumber:41},__self:this},"Run Search"));}}]);return SearchResult;}(_react.Component);SearchResult.defaultProps={isReview:false};exports.default=SearchResult;/***/},/* 82 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/step-wizard/src/components/Anchor/Anchor.jsx";var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _propTypes=__webpack_require__(4);var _propTypes2=_interopRequireDefault(_propTypes);var _Link=__webpack_require__(44);var _Link2=_interopRequireDefault(_Link);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _objectWithoutProperties(obj,keys){var target={};for(var i in obj){if(keys.indexOf(i)>=0)continue;if(!Object.prototype.hasOwnProperty.call(obj,i))continue;target[i]=obj[i];}return target;}var handleClick=function handleClick(e){return e.stopPropagation();};function Anchor(props){var url=props.url,style=props.style,disabled=props.disabled,rest=_objectWithoutProperties(props,["url","style","disabled"]);return _react2.default.createElement(_Link2.default,_extends({to:url,style:style,disabled:disabled,onClick:handleClick},rest,{__source:{fileName:_jsxFileName,lineNumber:10},__self:this}));}Anchor.defaultProps={style:{}};Anchor.propTypes={/**\n     * url to open\n     */url:_propTypes2.default.string,/**\n     * style for Component\n     */style:_propTypes2.default.object,/**\n     * Component disabled or enabled\n     */disabled:_propTypes2.default.bool};exports.default=Anchor;/***/},/* 83 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/src/components/Iops/Iops.jsx";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _i18n=__webpack_require__(3);var _NumberInput=__webpack_require__(14);var _NumberInput2=_interopRequireDefault(_NumberInput);var _CollectorCard=__webpack_require__(1);var _CollectorCard2=_interopRequireDefault(_CollectorCard);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Iops=function(_Component){_inherits(Iops,_Component);function Iops(props){_classCallCheck(this,Iops);var _this=_possibleConstructorReturn(this,(Iops.__proto__||Object.getPrototypeOf(Iops)).call(this,props));_this.handleChildren=function(attribute,value){_this.props.handler(attribute,value);};_this.state={};return _this;}_createClass(Iops,[{key:"render",value:function render(){var _props=this.props,availMatrix=_props.availMatrix,collectorObj=_props.collectorObj,search_debug=_props.search_debug,isReview=_props.isReview;return _react2.default.createElement(_CollectorCard2.default,{id:5,name:"iops",handler:this.handleChildren,availMatrix:availMatrix,collectorObj:collectorObj,search_debug:search_debug,customStyle:this.props.customStyle,isReview:isReview,__source:{fileName:_jsxFileName,lineNumber:19},__self:this},_react2.default.createElement(_NumberInput2.default,{name:"collection_time",collectorName:"iops",min:0,placeholder:"Collection Time (s)",collectorObj:collectorObj,handler:this.handleChildren,style:{width:70+"%"},__source:{fileName:_jsxFileName,lineNumber:29},__self:this}));}}]);return Iops;}(_react.Component);Iops.defaultProps={isReview:false};exports.default=Iops;/***/},/* 84 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/src/components/Netstat/Netstat.jsx";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _i18n=__webpack_require__(3);var _CollectorCard=__webpack_require__(1);var _CollectorCard2=_interopRequireDefault(_CollectorCard);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Netstat=function(_Component){_inherits(Netstat,_Component);function Netstat(props){_classCallCheck(this,Netstat);var _this=_possibleConstructorReturn(this,(Netstat.__proto__||Object.getPrototypeOf(Netstat)).call(this,props));_this.handleChildren=function(attribute,value){_this.props.handler(attribute,value);};_this.state={};return _this;}_createClass(Netstat,[{key:"render",value:function render(){var _props=this.props,availMatrix=_props.availMatrix,collectorObj=_props.collectorObj,search_debug=_props.search_debug,isReview=_props.isReview;return _react2.default.createElement(_CollectorCard2.default,{id:6,name:"netstat",handler:this.handleChildren,availMatrix:availMatrix,collectorObj:collectorObj,search_debug:search_debug,customStyle:this.props.customStyle,isReview:isReview,__source:{fileName:_jsxFileName,lineNumber:19},__self:this});}}]);return Netstat;}(_react.Component);Netstat.defaultProps={isReview:false};exports.default=Netstat;/***/},/* 85 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/src/components/Ps/Ps.jsx";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _i18n=__webpack_require__(3);var _CollectorCard=__webpack_require__(1);var _CollectorCard2=_interopRequireDefault(_CollectorCard);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Ps=function(_Component){_inherits(Ps,_Component);function Ps(props){_classCallCheck(this,Ps);var _this=_possibleConstructorReturn(this,(Ps.__proto__||Object.getPrototypeOf(Ps)).call(this,props));_this.handleChildren=function(attribute,value){_this.props.handler(attribute,value);};_this.state={};return _this;}_createClass(Ps,[{key:"render",value:function render(){var _props=this.props,availMatrix=_props.availMatrix,collectorObj=_props.collectorObj,search_debug=_props.search_debug,isReview=_props.isReview;return _react2.default.createElement(_CollectorCard2.default,{id:7,name:"ps",handler:this.handleChildren,availMatrix:availMatrix,collectorObj:collectorObj,search_debug:search_debug,customStyle:this.props.customStyle,isReview:isReview,__source:{fileName:_jsxFileName,lineNumber:19},__self:this});}}]);return Ps;}(_react.Component);Ps.defaultProps={isReview:false};exports.default=Ps;/***/},/* 86 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/src/components/Lsof/Lsof.jsx";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _ProcessSelector=__webpack_require__(24);var _CollectorCard=__webpack_require__(1);var _CollectorCard2=_interopRequireDefault(_CollectorCard);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Lsof=function(_Component){_inherits(Lsof,_Component);function Lsof(props){_classCallCheck(this,Lsof);var _this=_possibleConstructorReturn(this,(Lsof.__proto__||Object.getPrototypeOf(Lsof)).call(this,props));_this.handleChildren=function(attribute,value){_this.props.handler(attribute,value);};_this.state={};return _this;}_createClass(Lsof,[{key:"render",value:function render(){var _props=this.props,availMatrix=_props.availMatrix,collectorObj=_props.collectorObj,search_debug=_props.search_debug,cluster=_props.cluster,selectedIndexers=_props.selectedIndexers,processData=_props.processData,open=_props.open,loader=_props.loader,isReview=_props.isReview;return _react2.default.createElement(_CollectorCard2.default,{id:8,name:"lsof",handler:this.handleChildren,availMatrix:availMatrix,collectorObj:collectorObj,search_debug:search_debug,customStyle:this.props.customStyle,isReview:isReview,__source:{fileName:_jsxFileName,lineNumber:28},__self:this},_react2.default.createElement(_ProcessSelector.ProcessSelector,{handler:this.handleChildren,collectorName:"lsof",search_debug:search_debug,collectorObj:collectorObj,cluster:cluster,selectedIndexers:selectedIndexers,open:open,processData:processData,loader:loader,__source:{fileName:_jsxFileName,lineNumber:38},__self:this}));}}]);return Lsof;}(_react.Component);Lsof.defaultProps={isReview:false};exports.default=Lsof;/***/},/* 87 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/src/components/SplunkDiag/SplunkDiag.jsx";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _CollectorCard=__webpack_require__(1);var _CollectorCard2=_interopRequireDefault(_CollectorCard);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var SplunkDiag=function(_Component){_inherits(SplunkDiag,_Component);function SplunkDiag(props){_classCallCheck(this,SplunkDiag);var _this=_possibleConstructorReturn(this,(SplunkDiag.__proto__||Object.getPrototypeOf(SplunkDiag)).call(this,props));_this.handleChildren=function(attribute,value){_this.props.handler(attribute,value);};_this.state={};return _this;}_createClass(SplunkDiag,[{key:"render",value:function render(){var _props=this.props,availMatrix=_props.availMatrix,collectorObj=_props.collectorObj,search_debug=_props.search_debug,isReview=_props.isReview;return _react2.default.createElement(_CollectorCard2.default,{id:9,name:"splunk_diag",handler:this.handleChildren,availMatrix:availMatrix,collectorObj:collectorObj,search_debug:search_debug,customStyle:this.props.customStyle,isReview:isReview,__source:{fileName:_jsxFileName,lineNumber:18},__self:this});}}]);return SplunkDiag;}(_react.Component);SplunkDiag.defaultProps={isReview:false};exports.default=SplunkDiag;/***/},/* 88 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/src/components/SearchDebug/SearchDebug.jsx";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _ControlGroup=__webpack_require__(7);var _ControlGroup2=_interopRequireDefault(_ControlGroup);var _TextInput=__webpack_require__(16);var _TextInput2=_interopRequireDefault(_TextInput);var _CollectorCard=__webpack_require__(1);var _CollectorCard2=_interopRequireDefault(_CollectorCard);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var width=175;var SearchDebug=function(_Component){_inherits(SearchDebug,_Component);function SearchDebug(props){_classCallCheck(this,SearchDebug);var _this=_possibleConstructorReturn(this,(SearchDebug.__proto__||Object.getPrototypeOf(SearchDebug)).call(this,props));_this.handleChildren=function(attribute,value){_this.props.handler(attribute,value);};_this.state={};return _this;}_createClass(SearchDebug,[{key:"render",value:function render(){var _props=this.props,availMatrix=_props.availMatrix,collectorObj=_props.collectorObj,search_debug=_props.search_debug,isReview=_props.isReview;return _react2.default.createElement(_CollectorCard2.default,{id:1,name:"search_debug",handler:this.handleChildren,collectorObj:collectorObj,search_debug:search_debug,availMatrix:availMatrix,customStyle:this.props.customStyle,isReview:isReview,__source:{fileName:_jsxFileName,lineNumber:21},__self:this},_react2.default.createElement(_ControlGroup2.default,{label:"Search Regex",tooltip:"Enter the regular expression to match the search",labelWidth:width,style:{marginTop:"30px"},__source:{fileName:_jsxFileName,lineNumber:31},__self:this},_react2.default.createElement(_TextInput2.default,{name:"search_regex",collectorObj:collectorObj,cardName:"search_debug",disabled:!collectorObj.selected,handler:this.handleChildren,__source:{fileName:_jsxFileName,lineNumber:37},__self:this})));}}]);return SearchDebug;}(_react.Component);SearchDebug.defaultProps={isReview:false};exports.default=SearchDebug;/***/},/* 89 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/src/components/Periodic/Periodic.jsx";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _i18n=__webpack_require__(3);var _ControlGroup=__webpack_require__(7);var _ControlGroup2=_interopRequireDefault(_ControlGroup);var _NumberInput=__webpack_require__(14);var _NumberInput2=_interopRequireDefault(_NumberInput);var _CollectorCard=__webpack_require__(1);var _CollectorCard2=_interopRequireDefault(_CollectorCard);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Periodic=function(_Component){_inherits(Periodic,_Component);function Periodic(props){_classCallCheck(this,Periodic);var _this=_possibleConstructorReturn(this,(Periodic.__proto__||Object.getPrototypeOf(Periodic)).call(this,props));_this.handleChildren=function(attribute,value){_this.props.handler(attribute,value);};_this.state={};return _this;}_createClass(Periodic,[{key:"render",value:function render(){var width=175;var _props=this.props,availMatrix=_props.availMatrix,collectorObj=_props.collectorObj,search_debug=_props.search_debug,isReview=_props.isReview;return _react2.default.createElement(_CollectorCard2.default,{id:5,name:"periodic",handler:this.handleChildren,availMatrix:availMatrix,collectorObj:collectorObj,search_debug:search_debug,customStyle:this.props.customStyle,isReview:isReview,__source:{fileName:_jsxFileName,lineNumber:21},__self:this},_react2.default.createElement(_ControlGroup2.default,{label:"Number of Samples",labelWidth:width,tooltip:"Enter the number of samples to be generated for each collector",__source:{fileName:_jsxFileName,lineNumber:31},__self:this},_react2.default.createElement(_NumberInput2.default,{collectorName:"periodic",inline:true,collectorObj:collectorObj,roundTo:0,placeholder:"Enter the number of samples",handler:this.handleChildren,style:{float:"left"},min:0,name:"sampleCount",__source:{fileName:_jsxFileName,lineNumber:36},__self:this})),_react2.default.createElement(_ControlGroup2.default,{label:"Period",labelWidth:width,tooltip:"Enter the interval (in seconds) between each sample",__source:{fileName:_jsxFileName,lineNumber:48},__self:this},_react2.default.createElement(_NumberInput2.default,{collectorName:"periodic",inline:true,collectorObj:collectorObj,placeholder:"Enter Interval (in Seconds)",handler:this.handleChildren,style:{float:"left"},min:0,name:"interval",__source:{fileName:_jsxFileName,lineNumber:53},__self:this})));}}]);return Periodic;}(_react.Component);Periodic.defaultProps={isReview:false};exports.default=Periodic;/***/},/* 90 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/src/components/LogMonitor/LogMonitor.jsx";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _i18n=__webpack_require__(3);var _ControlGroup=__webpack_require__(7);var _ControlGroup2=_interopRequireDefault(_ControlGroup);var _Select=__webpack_require__(91);var _Select2=_interopRequireDefault(_Select);var _url=__webpack_require__(2);var _TextInput=__webpack_require__(16);var _TextInput2=_interopRequireDefault(_TextInput);var _CollectorCard=__webpack_require__(1);var _CollectorCard2=_interopRequireDefault(_CollectorCard);var _CommonService=__webpack_require__(5);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var LogMonitor=function(_Component){_inherits(LogMonitor,_Component);function LogMonitor(props){var _this2=this;_classCallCheck(this,LogMonitor);var _this=_possibleConstructorReturn(this,(LogMonitor.__proto__||Object.getPrototypeOf(LogMonitor)).call(this,props));_this.getLogFilesList=function(){var list=Object.values(_this.state.fileList).map(function(file){return _this.createOption(file);});return list;};_this.createOption=function(file){var isSelected=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;return _react2.default.createElement(_Select2.default.Option,{label:file,value:file,key:isSelected?"selected":file,hidden:!!isSelected,__source:{fileName:_jsxFileName,lineNumber:42},__self:_this2});};_this.handleFileChange=function(e,_ref){var name=_ref.name,value=_ref.value;var tempState=_this.props.collectorObj;if(e.key==="Enter"){tempState.selected=true;}tempState[name]=value;_this.props.handler("log_monitor",[tempState]);};_this.handleChildren=function(attribute,value){_this.props.handler(attribute,value);};_this.state={fileList:[]};return _this;}_createClass(LogMonitor,[{key:"componentDidMount",value:function componentDidMount(){var _this3=this;this.setState({isLoading:true});var url=(0,_url.createRESTURL)("rapid_diag/get_log_files");var peers=this.props.cluster?this.props.selectedIndexers:[];var params={peers:JSON.stringify(peers)};(0,_CommonService.axiosGetCall)(url,params).then(function(responseJson){_this3.setState({isLoading:false});_this3.setState({fileList:responseJson.data});_this3.handleChildren("fileList",responseJson.data);}).catch(function(){_this3.setState({isLoading:false});});}// create options on the basis of request output list\n},{key:"render",value:function render(){var _props=this.props,availMatrix=_props.availMatrix,collectorObj=_props.collectorObj,search_debug=_props.search_debug,isReview=_props.isReview;var isSearchDebug=search_debug.filter(function(collector){return collector.selected===true;}).length>0;var width=175;var fileList=this.getLogFilesList();return _react2.default.createElement(_CollectorCard2.default,{id:5,name:"log_monitor",handler:this.handleChildren,availMatrix:availMatrix,collectorObj:collectorObj,search_debug:search_debug,disabled:isSearchDebug&&!isReview,customStyle:this.props.customStyle,isReview:isReview,__source:{fileName:_jsxFileName,lineNumber:70},__self:this},_react2.default.createElement(_ControlGroup2.default,{label:"Select File",labelWidth:width,tooltip:"Select the file to monitor",style:{textAlign:"left",marginLeft:"5%"},__source:{fileName:_jsxFileName,lineNumber:81},__self:this},_react2.default.createElement(_Select2.default,{value:collectorObj.selectedFile,inline:true,placeholder:(0,_i18n._)("Select a file..."),isLoadingOptions:this.state.isLoading,onChange:this.handleFileChange,noOptionsMessage:"No matches",menuStyle:{maxHeight:200},style:{width:230},name:"selectedFile",disabled:!collectorObj.selected||isSearchDebug&&!isReview,filter:true,__source:{fileName:_jsxFileName,lineNumber:87},__self:this},fileList)),_react2.default.createElement(_ControlGroup2.default,{label:"Regex",labelWidth:width,tooltip:"Enter the regex",style:{textAlign:"left",marginLeft:"5%"},__source:{fileName:_jsxFileName,lineNumber:103},__self:this},_react2.default.createElement(_TextInput2.default,{inline:true,cardName:"log_monitor",collectorObj:collectorObj,disabled:isSearchDebug&&!isReview,handler:this.handleChildren,name:"regex",style:{float:"left"},__source:{fileName:_jsxFileName,lineNumber:109},__self:this})));}}]);return LogMonitor;}(_react.Component);LogMonitor.defaultProps={isReview:false};exports.default=LogMonitor;/***/},/* 91 *//***/function(module,exports){module.exports=__webpack_require__(255);/***/},/* 92 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/src/components/ResourceMonitor/ResourceMonitor.jsx";var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _Number=__webpack_require__(42);var _Number2=_interopRequireDefault(_Number);var _ControlGroup=__webpack_require__(7);var _ControlGroup2=_interopRequireDefault(_ControlGroup);var _Switch=__webpack_require__(47);var _Switch2=_interopRequireDefault(_Switch);var _CollectorCard=__webpack_require__(1);var _CollectorCard2=_interopRequireDefault(_CollectorCard);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var defaultMetric={threshold:null,metric:null,__class__:"rapid_diag.collector.trigger.resource_monitor_trackers.MovingAverageResourceMonitorTracker",invert:false,target:"system",num_samples:10};var invertHelp="\\nWhen Invert is False, Data collection would get started if any of the resource usage goes above the configured threshold value.\\n\\nWhen Invert is True, Data collection would get started if any of the resource usage goes below the configured threshold value.\\n\\n### For example: \\n* CPU Usage is set to 10% and Invert is True, the data collection would get started when the CPU Usage goes below 10%.\\n* CPU Usage is set to 10% and Invert is False, the data collection would get started when the CPU Usage goes above 10%.\\n";var ResourceMonitor=function(_Component){_inherits(ResourceMonitor,_Component);function ResourceMonitor(props){_classCallCheck(this,ResourceMonitor);var _this=_possibleConstructorReturn(this,(ResourceMonitor.__proto__||Object.getPrototypeOf(ResourceMonitor)).call(this,props));_this.getMetricThreshold=function(metric){if(_this.props.collectorObj.resource_monitor_trackers.length>0){for(var i=0;i<_this.props.collectorObj.resource_monitor_trackers.length;i++){if(metric===_this.props.collectorObj.resource_monitor_trackers[i].metric){return _this.props.collectorObj.resource_monitor_trackers[i].threshold;}}}return null;};_this.getMetricInvert=function(){var metricInvert={cpu:false,physical_memory:false,virtual_memory:false};if(_this.props.collectorObj.resource_monitor_trackers.length>0){_this.props.collectorObj.resource_monitor_trackers.forEach(function(tracker){metricInvert[tracker.metric]=tracker.invert;});}return metricInvert;};_this.removeEmptyTriggers=function(tempState){if(tempState.resource_monitor_trackers){for(var i=tempState.resource_monitor_trackers.length-1;i>=0;i--){if(!tempState.resource_monitor_trackers[i].invert&&[null,undefined].indexOf(tempState.resource_monitor_trackers[i].threshold)>-1){tempState.resource_monitor_trackers.splice(i,1);}}}_this.handleChildren("resource_monitor",[tempState]);};_this.handleInvert=function(e,name){var tempState=Object.assign({},_this.props.collectorObj);var found=false;if(tempState.resource_monitor_trackers.length>0){for(var i=0;i<tempState.resource_monitor_trackers.length;i++){if(tempState.resource_monitor_trackers[i].metric===name){tempState.resource_monitor_trackers[i].invert=!tempState.resource_monitor_trackers[i].invert;found=true;break;}}if(!found){tempState.resource_monitor_trackers.push(_extends({},defaultMetric,{metric:name,invert:true}));}}else{tempState.resource_monitor_trackers=[_extends({},defaultMetric,{metric:name,invert:true})];}_this.removeEmptyTriggers(tempState);e.stopPropagation();try{e.stopImmediatePropagation();}catch(err){}};_this.handleChange=function(e,name,value){var tempState=Object.assign({},_this.props.collectorObj);var invert=_this.getMetricInvert()[name];var found=false;if(tempState.resource_monitor_trackers.length>0){for(var i=0;i<tempState.resource_monitor_trackers.length;i++){if(name===tempState.resource_monitor_trackers[i].metric){tempState.resource_monitor_trackers[i].threshold=value;found=true;break;}}if(!found){tempState.resource_monitor_trackers.push(_extends({},defaultMetric,{metric:name,threshold:value,invert:invert}));}}else{tempState.resource_monitor_trackers=[_extends({},defaultMetric,{metric:name,threshold:value})];}_this.removeEmptyTriggers(tempState);};_this.handleClick=function(e){var tempState=_this.props.collectorObj;if(!tempState.selected){tempState.selected=true;_this.handleChildren("resource_monitor",[tempState]);}e.stopPropagation();try{e.stopImmediatePropagation();}catch(err){}};_this.handleChildren=function(attribute,value){_this.props.handler(attribute,value);};_this.state={};return _this;}// handle invert checkbox changes and send it to parent\n// On change, send the data to parent\n// Put the changed value in the object of that metric in resource_monitor trackers list\n_createClass(ResourceMonitor,[{key:"render",value:function render(){var _this2=this;var _props=this.props,availMatrix=_props.availMatrix,collectorObj=_props.collectorObj,search_debug=_props.search_debug,isReview=_props.isReview;var isSearchDebug=search_debug.filter(function(collector){return collector.selected===true;}).length>0;var width=125;var metricInvert=this.getMetricInvert();return _react2.default.createElement(_CollectorCard2.default,{id:5,name:"resource_monitor",handler:this.handleChildren,availMatrix:availMatrix,collectorObj:collectorObj,search_debug:search_debug,disabled:isSearchDebug&&!isReview,customStyle:this.props.customStyle,isReview:isReview,helpInfo:invertHelp,__source:{fileName:_jsxFileName,lineNumber:146},__self:this},_react2.default.createElement(_ControlGroup2.default,{label:"CPU Usage",labelWidth:width,tooltip:"Enter the CPU threshold in percentage ",__source:{fileName:_jsxFileName,lineNumber:158},__self:this},_react2.default.createElement(_Number2.default,{inline:true,value:this.getMetricThreshold("cpu"),placeholder:"Enter the threshold for CPU (%)",onChange:function onChange(e,_ref){var value=_ref.value;return _this2.handleChange(e,"cpu",value);},onClick:function onClick(e){return!isSearchDebug?_this2.handleClick(e):null;},disabled:!collectorObj.selected||isSearchDebug&&!isReview,style:{float:"left",marginLeft:"5%"},min:0,name:"cpu",__source:{fileName:_jsxFileName,lineNumber:163},__self:this}),_react2.default.createElement("div",{style:{marginLeft:"10px"},__source:{fileName:_jsxFileName,lineNumber:174},__self:this},_react2.default.createElement(_Switch2.default,{id:"cpu",name:"cpu_invert",value:metricInvert.cpu,onClick:function onClick(e){return _this2.handleInvert(e,"cpu");},disabled:!collectorObj.selected||isSearchDebug&&!isReview,selected:metricInvert.cpu,appearance:"checkbox",__source:{fileName:_jsxFileName,lineNumber:175},__self:this}))),_react2.default.createElement(_ControlGroup2.default,{label:"Physical Memory",labelWidth:width,tooltip:"Enter the threshold for Physical Memory",__source:{fileName:_jsxFileName,lineNumber:186},__self:this},_react2.default.createElement(_Number2.default,{inline:true,value:this.getMetricThreshold("physical_memory"),placeholder:"Enter the threshold for Physical Memory(in MB)",onChange:function onChange(e,_ref2){var value=_ref2.value;return _this2.handleChange(e,"physical_memory",value);},onClick:function onClick(e){return!isSearchDebug?_this2.handleClick(e):null;},disabled:!collectorObj.selected||isSearchDebug&&!isReview,style:{float:"left",marginLeft:"5%"},min:0,name:"physical_memory",__source:{fileName:_jsxFileName,lineNumber:191},__self:this}),_react2.default.createElement("div",{style:{marginLeft:"10px"},__source:{fileName:_jsxFileName,lineNumber:202},__self:this},_react2.default.createElement(_Switch2.default,{id:"physical_memory",name:"physical_memory_invert",value:metricInvert.physical_memory,onClick:function onClick(e){return _this2.handleInvert(e,"physical_memory");},disabled:!collectorObj.selected||isSearchDebug&&!isReview,selected:metricInvert.physical_memory,appearance:"checkbox",__source:{fileName:_jsxFileName,lineNumber:203},__self:this}))),_react2.default.createElement(_ControlGroup2.default,{label:"Virtual Memory",labelWidth:width,tooltip:"Enter the threshold for Virtual Memory",__source:{fileName:_jsxFileName,lineNumber:214},__self:this},_react2.default.createElement(_Number2.default,{inline:true,value:this.getMetricThreshold("virtual_memory"),placeholder:"Enter the threshold for Virtual Memory(in MB)",onChange:function onChange(e,_ref3){var value=_ref3.value;return _this2.handleChange(e,"virtual_memory",value);},onClick:function onClick(e){return!isSearchDebug?_this2.handleClick(e):null;},disabled:!collectorObj.selected||isSearchDebug&&!isReview,style:{float:"left",marginLeft:"5%"},min:0,name:"virtual_memory",__source:{fileName:_jsxFileName,lineNumber:219},__self:this}),_react2.default.createElement("div",{style:{marginLeft:"10px"},__source:{fileName:_jsxFileName,lineNumber:230},__self:this},_react2.default.createElement(_Switch2.default,{id:"virtual_memory",name:"virtual_memory_invert",value:metricInvert.virtual_memory,onClick:function onClick(e){return _this2.handleInvert(e,"virtual_memory");},disabled:!collectorObj.selected||isSearchDebug&&!isReview,selected:metricInvert.virtual_memory,appearance:"checkbox",__source:{fileName:_jsxFileName,lineNumber:231},__self:this}))));}}]);return ResourceMonitor;}(_react.Component);ResourceMonitor.defaultProps={isReview:false};exports.default=ResourceMonitor;/***/},/* 93 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.StepOne=undefined;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/step-wizard/src/create/StepOne.jsx";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _url=__webpack_require__(2);var _CardLayout=__webpack_require__(23);var _CardLayout2=_interopRequireDefault(_CardLayout);var _CheckUtility=__webpack_require__(28);var _constants=__webpack_require__(9);var _CommonService=__webpack_require__(5);var _CollectorWrapper=__webpack_require__(12);var _CollectorWrapper2=_interopRequireDefault(_CollectorWrapper);var _InfoMessage=__webpack_require__(29);var _InfoMessage2=_interopRequireDefault(_InfoMessage);var _descriptions=__webpack_require__(25);var _JSON_KEY_BINDINGS=__webpack_require__(6);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var StepOne=exports.StepOne=function(_React$Component){_inherits(StepOne,_React$Component);function StepOne(props){_classCallCheck(this,StepOne);var _this=_possibleConstructorReturn(this,(StepOne.__proto__||Object.getPrototypeOf(StepOne)).call(this,props));_this.handleChildren=function(attribute,value){_this.setState(_defineProperty({},attribute,value));_this.props.handler(attribute,value);};_this.state={system_call_trace:_this.props.system_call_trace,stack_trace:_this.props.stack_trace,splunk_diag:_this.props.splunk_diag,network_packet:_this.props.network_packet,netstat:_this.props.netstat,iops:_this.props.iops,ps:_this.props.ps,lsof:_this.props.lsof,search_result:_this.props.search_result,rapidDiagData:_this.props.rapidDiagData,cluster:_this.props.cluster,selectedIndexers:_this.props.selectedIndexers,open:false,buttonText:_this.props.buttonText,search_debug:_this.props.search_debug,processData:_this.props.processData,loader:false};return _this;}_createClass(StepOne,[{key:"componentDidMount",value:function componentDidMount(){var _this2=this;var peers=this.state.cluster?this.state.selectedIndexers:[];var getProcessUrl=(0,_url.createRESTURL)("rapid_diag/get_process_info?output_mode=json");var params={peers:JSON.stringify(peers)};this.showLoader();(0,_CommonService.axiosGetCall)(getProcessUrl,params).then(function(responseJson){_this2.setState({processData:responseJson.data});_this2.props.handler("processData",responseJson.data);}).catch(function(error){// eslint-disable-next-line no-console\nconsole.error(error);_this2.hideLoader();});}// Get the data from children and send it to parent\n},{key:"showLoader",value:function showLoader(){this.setState({loader:true});}},{key:"hideLoader",value:function hideLoader(){this.setState({loader:false});}// Render the first page form\n},{key:"render",value:function render(){var _this3=this;var i=-1;var selectedCollectors={};var toolsCollectors=_constants.TOOLS_COLLECTORS;var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=toolsCollectors[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var collector=_step.value;selectedCollectors[collector]=true;}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}var availMatrix=(0,_CheckUtility.checkCollectorInfo)(this.props,selectedCollectors);var _props=this.props,system_call_trace=_props.system_call_trace,stack_trace=_props.stack_trace,lsof=_props.lsof,search_debug=_props.search_debug,cluster=_props.cluster,selectedIndexers=_props.selectedIndexers;var processData=this.state.processData;var requiredParameters={search_debug:search_debug,cluster:cluster,selectedIndexers:selectedIndexers};var processParameters={system_call_trace:system_call_trace,stack_trace:stack_trace,lsof:lsof,processData:processData};var isSearchDebug=search_debug.filter(function(collector){return collector.selected===true;}).length>0;var helptext="Process selector is disabled for"+_descriptions.searchdebugCollectors.map(function(collectors){return" "+_JSON_KEY_BINDINGS.KEY_BINDING[collectors];})+" collectors if Search Debug collection is enabled.";return _react2.default.createElement("div",{__source:{fileName:_jsxFileName,lineNumber:102},__self:this},_react2.default.createElement("div",{__source:{fileName:_jsxFileName,lineNumber:103},__self:this},isSearchDebug?_react2.default.createElement(_InfoMessage2.default,{id:"infoMessageButton",helptext:helptext,__source:{fileName:_jsxFileName,lineNumber:104},__self:this}):null),_react2.default.createElement(_CardLayout2.default,{gutterSize:10,wrapCards:true,__source:{fileName:_jsxFileName,lineNumber:108},__self:this},_constants.ALL_COLLECTORS.map(function(collectors){return _this3.state[collectors].map(function(collector){return _react2.default.createElement(_CollectorWrapper2.default,_extends({key:i,name:collectors,handler:_this3.handleChildren,availMatrix:availMatrix,collectorObj:collector},requiredParameters,processParameters,{customStyle:{maxWidth:455+"px"},__source:{fileName:_jsxFileName,lineNumber:111},__self:_this3}));});})));}}]);return StepOne;}(_react2.default.Component);/***/},/* 94 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.StepTwo=undefined;var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/step-wizard/src/create/StepTwo.jsx";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _InfoMessage=__webpack_require__(29);var _InfoMessage2=_interopRequireDefault(_InfoMessage);var _CollectorWrapper=__webpack_require__(12);var _CollectorWrapper2=_interopRequireDefault(_CollectorWrapper);var _descriptions=__webpack_require__(25);var _JSON_KEY_BINDINGS=__webpack_require__(6);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var StepTwo=exports.StepTwo=function(_React$Component){_inherits(StepTwo,_React$Component);function StepTwo(props){_classCallCheck(this,StepTwo);var _this=_possibleConstructorReturn(this,(StepTwo.__proto__||Object.getPrototypeOf(StepTwo)).call(this,props));_this.handleChildren=function(attribute,value){_this.setState(_defineProperty({},attribute,value));_this.props.handler(attribute,value);if(attribute==="log_monitor"&&value[0].selected){_this.disableMonitor("resource_monitor");}else if(attribute==="resource_monitor"&&value[0].selected){_this.disableMonitor("log_monitor");}};_this.disableMonitor=function(name){var tempState=Object.assign({},_this.state[name][0]);tempState.selected=false;_this.setState(_defineProperty({},name,[tempState]));_this.props.handler(name,[tempState]);};_this.state={periodic:_this.props.periodic,log_monitor:_this.props.log_monitor,resource_monitor:_this.props.resource_monitor};return _this;}// Get the data from children and send it to parent\n_createClass(StepTwo,[{key:"render",value:function render(){var width=175;var isSearchDebug=this.props.search_debug.filter(function(collector){return collector.selected===true;}).length>0;var helptext=_descriptions.searchdebugTriggers.map(function(triggers){return" "+_JSON_KEY_BINDINGS.KEY_BINDING[triggers];})+" are disabled if Search Debug collection is enabled.";return _react2.default.createElement("div",{__source:{fileName:_jsxFileName,lineNumber:40},__self:this},isSearchDebug?_react2.default.createElement(_InfoMessage2.default,{id:"infoMessage",helptext:helptext,__source:{fileName:_jsxFileName,lineNumber:41},__self:this}):null,_react2.default.createElement(_CollectorWrapper2.default,{key:this.state.periodic[0].id,name:"periodic",handler:this.handleChildren,availMatrix:this.props.availMatrix,search_debug:this.props.search_debug,collectorObj:this.state.periodic[0],customStyle:{height:"180px",width:"920px"},__source:{fileName:_jsxFileName,lineNumber:44},__self:this}),_react2.default.createElement("div",{__source:{fileName:_jsxFileName,lineNumber:53},__self:this},_react2.default.createElement(_CollectorWrapper2.default,{key:this.state.log_monitor[0].id,name:"log_monitor",handler:this.handleChildren,availMatrix:this.props.availMatrix,search_debug:this.props.search_debug,collectorObj:this.state.log_monitor[0],selectedIndexers:this.props.selectedIndexers,cluster:this.props.cluster,fileList:this.props.fileList,__source:{fileName:_jsxFileName,lineNumber:54},__self:this}),_react2.default.createElement(_CollectorWrapper2.default,{key:this.state.resource_monitor[0].id,name:"resource_monitor",handler:this.handleChildren,availMatrix:this.props.availMatrix,search_debug:this.props.search_debug,collectorObj:this.state.resource_monitor[0],__source:{fileName:_jsxFileName,lineNumber:65},__self:this})));}}]);return StepTwo;}(_react2.default.Component);/***/},/* 95 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.StepThree=undefined;var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/step-wizard/src/create/StepThree.jsx";var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _propTypes=__webpack_require__(4);var _propTypes2=_interopRequireDefault(_propTypes);var _Review=__webpack_require__(48);var _Review2=_interopRequireDefault(_Review);var _constants=__webpack_require__(9);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}else{return Array.from(arr);}}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var StepThree=exports.StepThree=function(_React$Component){_inherits(StepThree,_React$Component);function StepThree(props){_classCallCheck(this,StepThree);var _this=_possibleConstructorReturn(this,(StepThree.__proto__||Object.getPrototypeOf(StepThree)).call(this,props));_this.setCollectors=function(data,level){_constants.INIT_COLLECTORS.forEach(function(collectorName){if(data[collectorName][0].selected){Object.keys(data[collectorName][0]).forEach(function(key){if(data[collectorName][0][key]===""||typeof data[collectorName][0][key]==="undefined"){data[collectorName][0][key]=null;}});_this.handleChildren(collectorName,[_extends({},data[collectorName][0],level)]);}else{_this.handleChildren(collectorName,[_extends({selected:false},data[collectorName][0])]);}});};_this.handleChildren=function(attribute,value){_this.setState(_defineProperty({},attribute,value));_this.props.handler(attribute,value);};_this.state={processData:_this.props.processData};return _this;}_createClass(StepThree,[{key:"componentWillMount",value:function componentWillMount(){var periodicTrigger=this.props.periodic[0];this.setCollectors(this.props,{level:1,parentId:0});if(this.props.search_debug.filter(function(collector){return collector.selected;}).length>0){this.setState({search_debug:[].concat(_toConsumableArray(this.props.search_debug))});if(this.props.periodic.filter(function(collector){return collector.selected;}).length>0){periodicTrigger.level=2;periodicTrigger.parentId=1;this.handleChildren("periodic",[periodicTrigger]);this.setCollectors(this.props,{level:3,parentId:2});}else{this.setCollectors(this.props,{level:2,parentId:1});}}else if(this.props.log_monitor.filter(function(collector){return collector.selected;}).length>0){this.setState({log_monitor:this.props.log_monitor});if(this.props.periodic.filter(function(collector){return collector.selected;}).length>0){periodicTrigger.level=2;periodicTrigger.parentId=1;this.handleChildren("periodic",[periodicTrigger]);this.setCollectors(this.props,{level:3,parentId:2});}else{this.setCollectors(this.props,{level:2,parentId:1});}}else if(this.props.resource_monitor.filter(function(collector){return collector.selected;}).length>0){this.setState({resource_monitor:this.props.resource_monitor});if(this.props.periodic.filter(function(collector){return collector.selected;}).length>0){periodicTrigger.level=2;periodicTrigger.parentId=1;this.handleChildren("periodic",[periodicTrigger]);this.setCollectors(this.props,{level:3,parentId:2});}else{this.setCollectors(this.props,{level:2,parentId:1});}}else if(this.props.periodic.filter(function(collector){return collector.selected;}).length>0){periodicTrigger.level=1;periodicTrigger.parentId=0;this.handleChildren("periodic",[periodicTrigger]);this.setCollectors(this.props,{level:2,parentId:1});}else{this.setState({search_debug:[].concat(_toConsumableArray(this.props.search_debug))});}this.handleChildren("splunk_diag",this.props.splunk_diag);}},{key:"render",value:function render(){var _props=this.props,selectedIndexers=_props.selectedIndexers,cluster=_props.cluster,name=_props.name,description=_props.description,availMatrix=_props.availMatrix,indexerList=_props.indexerList,activePanelId=_props.activePanelId,fileData=_props.fileData,rapidDiagData=_props.rapidDiagData,search_debug=_props.search_debug;var validationParameters={name:name,description:description,selectedIndexers:selectedIndexers,cluster:cluster,activePanelId:activePanelId,fileData:fileData,rapidDiagData:rapidDiagData,search_debug:search_debug};return _react2.default.createElement("div",{__source:{fileName:_jsxFileName,lineNumber:115},__self:this},_react2.default.createElement(_Review2.default,_extends({availMatrix:availMatrix,rapidDiagData:rapidDiagData,selectedIndexers:selectedIndexers,indexerList:indexerList,fileList:this.props.fileList,name:name,description:description,cluster:cluster},this.state,{search_debug:search_debug,handler:this.handleChildren,setCollectorStateById:this.props.setCollectorStateById,validationParameters:validationParameters,__source:{fileName:_jsxFileName,lineNumber:116},__self:this})));}}]);return StepThree;}(_react2.default.Component);StepThree.propTypes={/**\n     * data: props from StepWizard.\n     */data:_propTypes2.default.object};exports.default=StepThree;/***/},/* 96 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/task-template-wizard/src/components/TaskContent/TaskContent.jsx";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _lodash=__webpack_require__(17);var _DefinitionList=__webpack_require__(30);var _DefinitionList2=_interopRequireDefault(_DefinitionList);var _propTypes=__webpack_require__(4);var _propTypes2=_interopRequireDefault(_propTypes);var _Pencil=__webpack_require__(97);var _Pencil2=_interopRequireDefault(_Pencil);var _CardLayout=__webpack_require__(23);var _CardLayout2=_interopRequireDefault(_CardLayout);var _JSON_KEY_BINDINGS=__webpack_require__(6);var _ReviewCard=__webpack_require__(98);var _ReviewCard2=_interopRequireDefault(_ReviewCard);var _ErrorModal=__webpack_require__(43);var _ErrorModal2=_interopRequireDefault(_ErrorModal);var _PopOverText=__webpack_require__(10);var _PopOverText2=_interopRequireDefault(_PopOverText);var _DefinitionList3=__webpack_require__(99);var _DefinitionList4=_interopRequireDefault(_DefinitionList3);var _InfoMessage=__webpack_require__(29);var _InfoMessage2=_interopRequireDefault(_InfoMessage);var _buildReviewObject=__webpack_require__(22);var _ReviewPopUp=__webpack_require__(100);var _ReviewPopUp2=_interopRequireDefault(_ReviewPopUp);var _CheckUtility=__webpack_require__(28);var _ReviewCardStyles=__webpack_require__(49);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var states=["system_call_trace","stack_trace","network_packet","search_result","iops","netstat","ps","lsof","periodic","log_monitor","resource_monitor","search_debug"];var ignoreKeys=["__class__","parentId","level","selected","name","id","action_needed"];var ignoreDefaults=["regex","search_regex"];var TaskContent=function(_Component){_inherits(TaskContent,_Component);function TaskContent(props,context){var _this2=this;_classCallCheck(this,TaskContent);var _this=_possibleConstructorReturn(this,(TaskContent.__proto__||Object.getPrototypeOf(TaskContent)).call(this,props,context));_this.getResourceMonitorDescription=function(data){return data.map(function(resource){return _react2.default.createElement(_DefinitionList2.default,{termWidth:300,__source:{fileName:_jsxFileName,lineNumber:50},__self:_this2},_react2.default.createElement(_DefinitionList2.default.Term,{__source:{fileName:_jsxFileName,lineNumber:51},__self:_this2},_JSON_KEY_BINDINGS.KEY_BINDING[resource.metric]),_react2.default.createElement(_DefinitionList2.default.Description,{__source:{fileName:_jsxFileName,lineNumber:52},__self:_this2},resource.threshold+" ("+resource.invert+")"));});};_this.getProcessLabel=function(data,action_needed,key){if(data!==undefined){if(data.process){if(data.process.name==="dummy"){return _react2.default.createElement("div",{style:{display:"contents"},__source:{fileName:_jsxFileName,lineNumber:61},__self:_this2},_react2.default.createElement(_DefinitionList2.default.Description,{__source:{fileName:_jsxFileName,lineNumber:62},__self:_this2},"splunk search matched",_react2.default.createElement(_PopOverText2.default,{buttonStyle:{paddingBottom:"6px"},help:"This text is just for displaying purposes.  Actual trace will run on search process that matches the regular expression entered on the first page of wizard.",__source:{fileName:_jsxFileName,lineNumber:64},__self:_this2})));}return _react2.default.createElement(_DefinitionList2.default.Description,{__source:{fileName:_jsxFileName,lineNumber:74},__self:_this2},data.process.process_type+" ("+data.process.pid+")");}return _react2.default.createElement(_DefinitionList2.default.Description,{__source:{fileName:_jsxFileName,lineNumber:81},__self:_this2},data.name+" - "+data.process_type+" ("+data.pid+")");}return _react2.default.createElement(_DefinitionList2.default.Description,{__source:{fileName:_jsxFileName,lineNumber:87},__self:_this2},"splunk search matched");};_this.getChildren=function(collector){var action_needed=collector.action_needed!==undefined?collector.action_needed:{};return Object.keys(collector).map(function(key){return ignoreKeys.indexOf(key)===-1&&_react2.default.createElement(_DefinitionList2.default,{termWidth:300,style:{paddingLeft:"30px",cursor:"inherit"},__source:{fileName:_jsxFileName,lineNumber:95},__self:_this2},key!=="resource_monitor_trackers"&&_react2.default.createElement(_DefinitionList2.default.Term,{style:{cursor:"inherit"},__source:{fileName:_jsxFileName,lineNumber:97},__self:_this2},_JSON_KEY_BINDINGS.KEY_BINDING[key]),key==="process"||key==="resource_monitor_trackers"?key==="process"?_this.getProcessLabel(collector[key],action_needed,key):_this.getResourceMonitorDescription(collector[key]):_react2.default.createElement(_DefinitionList2.default.Description,{style:{cursor:"inherit",marginTop:"5px"},__source:{fileName:_jsxFileName,lineNumber:106},__self:_this2},collector[key]===null&&ignoreDefaults.indexOf(key)===-1?"All":collector[key],collector[key]==="splunk search matched"?_react2.default.createElement("div",{style:{display:"contents"},__source:{fileName:_jsxFileName,lineNumber:109},__self:_this2},_react2.default.createElement(_PopOverText2.default,{buttonStyle:{},help:"This text is just for displaying purposes.   Actual trace will run on search process that matches the regular expression entered on the first page of wizard.",__source:{fileName:_jsxFileName,lineNumber:110},__self:_this2})):null));});};_this.editCollector=(0,_lodash.throttle)(function(e,obj,cardName){e.stopPropagation();e.preventDefault();try{e.stopImmediatePropagation();}catch(err){}_this.setState({openCollector:true,editCollector:obj,editCardName:cardName});},300,{leading:false,trailing:true});_this.getDetails=function(obj){var availMatrix=_this.props.task.availMatrix;if(availMatrix===undefined){availMatrix={runningCollectors:{},unavailableUtilities:{}};}var disabled=false;if(Object.keys(availMatrix).length!==0){disabled=!!(availMatrix.runningCollectors[obj.name]||availMatrix.unavailableUtilities[obj.name]);}var StyledReviewC=!disabled&&_this.props.isReview?_ReviewCardStyles.StyledReview:_react.Fragment;return _react2.default.createElement(StyledReviewC,{onClick:function onClick(e){return _this.props.isReview&&!disabled&&_this.editCollector(e,obj,obj.name);},__source:{fileName:_jsxFileName,lineNumber:155},__self:_this2},_react2.default.createElement("div",{__source:{fileName:_jsxFileName,lineNumber:156},__self:_this2},_react2.default.createElement(StyledReviewC,{className:"header-"+obj.name,style:{display:"-webkit-box"},__source:{fileName:_jsxFileName,lineNumber:157},__self:_this2},_react2.default.createElement(_ReviewCardStyles.StyledHeader,{__source:{fileName:_jsxFileName,lineNumber:158},__self:_this2},_react2.default.createElement(_ReviewCardStyles.StyledHeaderTitle,{__source:{fileName:_jsxFileName,lineNumber:158},__self:_this2},_JSON_KEY_BINDINGS.KEY_BINDING[obj.name])),disabled?_react2.default.createElement(_ErrorModal2.default,{availMatrix:availMatrix,collector:obj.name,style:{display:"inline-block"},__source:{fileName:_jsxFileName,lineNumber:160},__self:_this2}):null,_this.props.isReview&&obj.action_needed&&obj.action_needed.length>0?_react2.default.createElement(_PopOverText2.default,{dialogueBoxStyle:{padding:"10px"},help:obj.action_needed,type:"warning",buttonStyle:{marginTop:"-6px",marginLeft:"25px"},__source:{fileName:_jsxFileName,lineNumber:167},__self:_this2}):null),_react2.default.createElement(StyledReviewC,{className:"detail-"+obj.name,__source:{fileName:_jsxFileName,lineNumber:174},__self:_this2},_react2.default.createElement(_ReviewCardStyles.PencilStyle,{style:{marginTop:"-53px"},__source:{fileName:_jsxFileName,lineNumber:175},__self:_this2},_react2.default.createElement(_Pencil2.default,{style:{width:"13px",height:"13px"},__source:{fileName:_jsxFileName,lineNumber:176},__self:_this2})),_this.getChildren(obj))));};_this.getChildrenObj=function(arr,level,collection){Object.keys(collection).map(function(prop){return states.indexOf(prop)!==-1&&collection[prop]!==null&&collection[prop].map(function(collector){if(collector.parentId===level){collector.name=prop;arr.push(collector);_this.getChildrenObj(arr,collector.level,collection);}});});return arr;};_this.getTaskObjs=function(collection){var tasks=[];Object.keys(collection).map(function(prop){return states.indexOf(prop)!==-1&&collection[prop]!==null&&collection[prop].filter(function(collector){return collector.selected===true&&collector.parentId===0;}).map(function(collector){var arr=[];collector.name=prop;arr.push(collector);_this.getChildrenObj(arr,collector.level,collection);tasks.push(arr);});});return tasks;};_this.handleChildren=function(attribute,value){_this.setState(_defineProperty({},attribute,value));_this.props.handler(attribute,value);};_this.validateNextButton=function(tasks){return tasks.filter(function(prop){return prop.filter(function(task){return task.action_needed&&task.action_needed.length>0;}).length>0;}).length>0;};_this.state={openCollector:false,editCollector:{},disableNext:props.disableNext,actionOpen:false};return _this;}_createClass(TaskContent,[{key:"componentDidUpdate",value:function componentDidUpdate(prevProps,prevState){if(this.props.task!==undefined&&this.props.isReview){var tasks=this.getTaskObjs(this.props.task);var disableNext=this.validateNextButton(tasks);if(prevProps.disableNext!==disableNext){var message=disableNext?"Please review value(s) for marked collector(s) and update and/or press Save to accept.":"";this.handleChildren("disableNext",disableNext);this.handleChildren("disableNextMessage",message);}}if(this.props.task.selectedIndexers!==prevProps.task.selectedIndexers){var selectedCollectors=(0,_buildReviewObject.getSelectedCollectors)(this.props.task);var availMatrix=(0,_CheckUtility.checkCollectorInfo)(this.props.task,selectedCollectors);var stateAvailMatrix=this.props.task.availMatrix;stateAvailMatrix.runningCollectors=availMatrix.runningCollectors;stateAvailMatrix.unavailableUtilities=availMatrix.unavailableUtilities;this.handleChildren("availMatrix",stateAvailMatrix);}}},{key:"render",value:function render(){var _this3=this;var tasks=this.getTaskObjs(this.props.task);var task=this.props.task;var isSearchDebug=task.search_debug&&task.search_debug.filter(function(collector){return collector.selected===true;}).length>0;var helptext="Process selector for collectors is disabled if Search Debug collection is enabled.";var name=task.name,description=task.description,rapidDiagData=task.rapidDiagData,indexerList=task.indexerList,search_debug=task.search_debug,clusterLoader=task.clusterLoader,cluster=task.cluster,selectedIndexers=task.selectedIndexers,system_call_trace=task.system_call_trace,stack_trace=task.stack_trace,lsof=task.lsof,processData=task.processData,availMatrix=task.availMatrix,fileList=task.fileList;var requiredParameters={search_debug:search_debug,cluster:cluster,selectedIndexers:selectedIndexers};var processParameters={system_call_trace:system_call_trace,stack_trace:stack_trace,lsof:lsof,processData:processData};var colInfo={};var taskInfo={};var servers="";if(this.props.isReview){servers=task.selectedIndexers.join(", ");colInfo={name:name,description:description};taskInfo={indexerList:indexerList,selectedIndexers:selectedIndexers,cluster:cluster,rapidDiagData:rapidDiagData,clusterLoader:clusterLoader};var disableNext=this.validateNextButton(tasks);if(this.props.disableNext!==disableNext){this.setState({disableNext:disableNext});this.props.handler("disableNext",disableNext);}}return _react2.default.createElement("div",{__source:{fileName:_jsxFileName,lineNumber:310},__self:this},this.props.isReview?_react2.default.createElement(_react.Fragment,{__source:{fileName:_jsxFileName,lineNumber:312},__self:this},isSearchDebug?_react2.default.createElement(_InfoMessage2.default,{id:"infoMessage",helptext:helptext,__source:{fileName:_jsxFileName,lineNumber:313},__self:this}):null,_react2.default.createElement(_CardLayout2.default,{style:{maxWidth:2000},__source:{fileName:_jsxFileName,lineNumber:314},__self:this},_react2.default.createElement(_ReviewCard2.default,{customStyle:{maxWidth:"100%"},__source:{fileName:_jsxFileName,lineNumber:315},__self:this},_react2.default.createElement(_ReviewCardStyles.StyledReview,{onClick:function onClick(e){return _this3.editCollector(e,colInfo,"collection_info");},__source:{fileName:_jsxFileName,lineNumber:318},__self:this},_react2.default.createElement(_ReviewCardStyles.PencilStyle,{__source:{fileName:_jsxFileName,lineNumber:319},__self:this},_react2.default.createElement(_Pencil2.default,{style:{width:"13px",height:"13px"},__source:{fileName:_jsxFileName,lineNumber:320},__self:this})),_react2.default.createElement(_ReviewCardStyles.StyledHeader,{__source:{fileName:_jsxFileName,lineNumber:322},__self:this},_react2.default.createElement(_ReviewCardStyles.StyledHeaderTitle,{__source:{fileName:_jsxFileName,lineNumber:322},__self:this},"Collection Information")),_react2.default.createElement(_ReviewCardStyles.StyledReview,{onClick:function onClick(e){return _this3.editCollector(e,colInfo,"collection_info");},__source:{fileName:_jsxFileName,lineNumber:323},__self:this},_react2.default.createElement(_DefinitionList4.default,{description:task.name,term:"Name",__source:{fileName:_jsxFileName,lineNumber:328},__self:this}),_react2.default.createElement(_DefinitionList4.default,{description:task.description,term:"Description",__source:{fileName:_jsxFileName,lineNumber:329},__self:this}))))),_react2.default.createElement(_CardLayout2.default,{__source:{fileName:_jsxFileName,lineNumber:337},__self:this},_react2.default.createElement(_ReviewCard2.default,{__source:{fileName:_jsxFileName,lineNumber:338},__self:this},_react2.default.createElement(_ReviewCardStyles.StyledReview,{onClick:function onClick(e){return _this3.editCollector(e,taskInfo,"distributed_collection");},__source:{fileName:_jsxFileName,lineNumber:339},__self:this},_react2.default.createElement(_ReviewCardStyles.PencilStyle,{__source:{fileName:_jsxFileName,lineNumber:340},__self:this},_react2.default.createElement(_Pencil2.default,{style:{width:"13px",height:"13px"},__source:{fileName:_jsxFileName,lineNumber:341},__self:this})),_react2.default.createElement(_ReviewCardStyles.StyledHeader,{__source:{fileName:_jsxFileName,lineNumber:343},__self:this},_react2.default.createElement(_ReviewCardStyles.StyledHeaderTitle,{__source:{fileName:_jsxFileName,lineNumber:343},__self:this},"Distributed Collection")),_react2.default.createElement(_ReviewCardStyles.StyledReview,{onClick:function onClick(e){return _this3.editCollector(e,taskInfo,"distributed_collection");},__source:{fileName:_jsxFileName,lineNumber:344},__self:this},_react2.default.createElement(_DefinitionList4.default,{description:task.cluster?"Yes":"No",term:"Distributed Environment",__source:{fileName:_jsxFileName,lineNumber:349},__self:this}),cluster===true?_react2.default.createElement(_DefinitionList4.default,{description:servers,term:"Selected Peer Nodes",__source:{fileName:_jsxFileName,lineNumber:354},__self:this}):null))),_react2.default.createElement(_ReviewCard2.default,{__source:{fileName:_jsxFileName,lineNumber:362},__self:this},_react2.default.createElement(_ReviewCardStyles.StyledReview,{onClick:function onClick(e){return _this3.editCollector(e,task.splunk_diag[0],"splunk_diag");},__source:{fileName:_jsxFileName,lineNumber:363},__self:this},_react2.default.createElement(_ReviewCardStyles.PencilStyle,{__source:{fileName:_jsxFileName,lineNumber:364},__self:this},_react2.default.createElement(_Pencil2.default,{style:{width:"13px",height:"13px"},__source:{fileName:_jsxFileName,lineNumber:365},__self:this})),_react2.default.createElement(_ReviewCardStyles.StyledHeader,{__source:{fileName:_jsxFileName,lineNumber:367},__self:this},_react2.default.createElement(_ReviewCardStyles.StyledHeaderTitle,{__source:{fileName:_jsxFileName,lineNumber:367},__self:this},"Splunk Diag Collection")),_react2.default.createElement(_ReviewCardStyles.StyledReview,{onClick:function onClick(e){return _this3.editCollector(e,task.splunk_diag[0],"splunk_diag");},__source:{fileName:_jsxFileName,lineNumber:368},__self:this},_react2.default.createElement(_DefinitionList4.default,{description:task.splunk_diag[0].selected?"Yes":"No",term:"Splunk Diag",__source:{fileName:_jsxFileName,lineNumber:373},__self:this})))))):null,_react2.default.createElement(_CardLayout2.default,{cardMinWidth:"48%",cardMaxWidth:"48%",wrapCards:true,__source:{fileName:_jsxFileName,lineNumber:383},__self:this},tasks.map(function(task){return _react2.default.createElement(_ReviewCard2.default,{__source:{fileName:_jsxFileName,lineNumber:385},__self:_this3},task.map(function(obj){return _this3.getDetails(obj);}));})),this.state.editCollector!==null&&this.props.isReview&&_react2.default.createElement(_ReviewPopUp2.default,_extends({open:this.state.openCollector,collectorObj:this.state.editCollector,cardName:this.state.editCardName,setCollectorStateById:this.props.setCollectorStateById,availMatrix:availMatrix,handleChildren:this.handleChildren},requiredParameters,processParameters,{fileList:fileList,validationParameters:this.props.validationParameters,__source:{fileName:_jsxFileName,lineNumber:390},__self:this})));}}]);return TaskContent;}(_react.Component);TaskContent.defaultProps={isReview:false};TaskContent.propTypes={data:_propTypes2.default.object};exports.default=TaskContent;/***/},/* 97 *//***/function(module,exports){module.exports=__webpack_require__(157);/***/},/* 98 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/step-wizard/src/components/ReviewCard/ReviewCard.jsx";var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _propTypes=__webpack_require__(4);var _propTypes2=_interopRequireDefault(_propTypes);var _Card=__webpack_require__(15);var _Card2=_interopRequireDefault(_Card);var _ReviewCardStyles=__webpack_require__(49);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var ReviewCard=function ReviewCard(props){return _react2.default.createElement(_Card2.default,{style:_extends({},_ReviewCardStyles.cardStyle,props.customStyle),__source:{fileName:_jsxFileName,lineNumber:7},__self:undefined},props.name.length>0?_react2.default.createElement(_Card2.default.Header,{title:props.name,__source:{fileName:_jsxFileName,lineNumber:8},__self:undefined}):null,_react2.default.createElement(_Card2.default.Body,{__source:{fileName:_jsxFileName,lineNumber:9},__self:undefined},props.children));};ReviewCard.defaultProps={customStyle:_ReviewCardStyles.cardStyle,name:""};ReviewCard.propTypes={/**\n     * name: Name of header\n     */name:_propTypes2.default.string.isRequired,/**\n     * Child components of `ReviewCard`\n     */children:_propTypes2.default.array};exports.default=ReviewCard;/***/},/* 99 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/step-wizard/src/components/DefinitionList/DefinitionList.jsx";var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _DefinitionList=__webpack_require__(30);var _DefinitionList2=_interopRequireDefault(_DefinitionList);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function DefinitionList(props){if(props.description!==undefined&&props.description!==""){return _react2.default.createElement(_react.Fragment,{__source:{fileName:_jsxFileName,lineNumber:7},__self:this},_react2.default.createElement(_DefinitionList2.default,{termWidth:250,style:{paddingLeft:"30px",cursor:"inherit"},__source:{fileName:_jsxFileName,lineNumber:8},__self:this},_react2.default.createElement(_DefinitionList2.default.Term,{__source:{fileName:_jsxFileName,lineNumber:9},__self:this},props.term),_react2.default.createElement(_DefinitionList2.default.Description,{__source:{fileName:_jsxFileName,lineNumber:10},__self:this},props.description)));}return null;}exports.default=DefinitionList;/***/},/* 100 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/task-template-wizard/src/components/Review/ReviewPopUp.jsx";var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _Modal=__webpack_require__(13);var _Modal2=_interopRequireDefault(_Modal);var _Button=__webpack_require__(8);var _Button2=_interopRequireDefault(_Button);var _CollectorWrapper=__webpack_require__(12);var _CollectorWrapper2=_interopRequireDefault(_CollectorWrapper);var _ValidationConf=__webpack_require__(50);var ValidationConf=_interopRequireWildcard(_ValidationConf);var _CommonService=__webpack_require__(5);function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key))newObj[key]=obj[key];}}newObj.default=obj;return newObj;}}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var ReviewPopUp=function(_Component){_inherits(ReviewPopUp,_Component);function ReviewPopUp(props,context){_classCallCheck(this,ReviewPopUp);var _this=_possibleConstructorReturn(this,(ReviewPopUp.__proto__||Object.getPrototypeOf(ReviewPopUp)).call(this,props,context));_this.handleRequestClose=function(){_this.setState({openCollector:false});_this.props.handleChildren("openCollector",false);};_this.handleChildren=function(attribute,value){if(["collection_info","distributed_collection"].indexOf(_this.props.cardName)!==-1){var tempState=Object.assign({},_this.state.in_review);tempState[attribute]=value;_this.setState({in_review:tempState});if(_this.state.changedTaskAttributes.indexOf(attribute)===-1){_this.setState(function(state){var list=state.changedTaskAttributes.concat(attribute);return{changedTaskAttributes:list};});}}else if(attribute===_this.props.cardName){Object.keys(value[0]).forEach(function(key){if(value[0][key]===""||typeof value[0][key]==="undefined"){value[0][key]=null;}});_this.setState({in_review:value[0]});}};_this.handleSave=function(){var attrList=_this.state.changedTaskAttributes;var validationParameters={};if(["collection_info","distributed_collection"].indexOf(_this.props.cardName)!==-1){validationParameters=_extends({},_this.props.validationParameters,_this.state.in_review);}else{validationParameters=_extends({},_this.props.validationParameters,_defineProperty({},_this.props.cardName,_this.state.in_review));}var validationObj=ValidationConf.validate(_this.props.cardName,validationParameters);if(!validationObj.valid){Object.keys(validationObj.action_needed).map(function(key,index){return(0,_CommonService.generateToast)(validationObj.action_needed[key]);});return;}if(["collection_info","distributed_collection"].indexOf(_this.props.cardName)!==-1){attrList.forEach(function(item,index,attrList){if(_this.state.in_review[item]!==undefined){_this.props.handleChildren(item,_this.state.in_review[item]);}});}else{_this.state.in_review.action_needed=\'\';_this.props.setCollectorStateById(_this.state.in_review,_this.props.cardName);}_this.handleRequestClose();};_this.state={in_review:JSON.parse(JSON.stringify(_this.props.collectorObj)),openCollector:_this.props.open,changedTaskAttributes:[]};if(["collection_info","distributed_collection"].indexOf(_this.props.cardName)!==-1){_this.state.card_id=_this.props.cardName;}else{_this.state.card_id=_this.props.collectorObj.id;}return _this;}_createClass(ReviewPopUp,[{key:"componentDidUpdate",value:function componentDidUpdate(prevProps,prevState){if(this.props.open&&!prevState.openCollector){this.setState({openCollector:true});this.setState({in_review:JSON.parse(JSON.stringify(this.props.collectorObj))});}}},{key:"render",value:function render(){var _props=this.props,availMatrix=_props.availMatrix,fileList=_props.fileList,cluster=_props.cluster,selectedIndexers=_props.selectedIndexers,system_call_trace=_props.system_call_trace,stack_trace=_props.stack_trace,processData=_props.processData;return _react2.default.createElement(_Modal2.default,{onRequestClose:this.handleRequestClose,open:this.state.openCollector,__source:{fileName:_jsxFileName,lineNumber:103},__self:this},_react2.default.createElement(_Modal2.default.Body,{style:{minHeight:"400px"},__source:{fileName:_jsxFileName,lineNumber:104},__self:this},_react2.default.createElement(_CollectorWrapper2.default,{key:this.state.card_id,name:this.props.cardName,handler:this.handleChildren,availMatrix:availMatrix,collectorObj:this.state.in_review,search_debug:this.props.validationParameters.search_debug,cluster:cluster,selectedIndexers:selectedIndexers,system_call_trace:system_call_trace,stack_trace:stack_trace,processData:processData,fileList:fileList// eslint-disable-next-line react/jsx-boolean-value\n,isReview:true,__source:{fileName:_jsxFileName,lineNumber:105},__self:this})),_react2.default.createElement(_Modal2.default.Footer,{__source:{fileName:_jsxFileName,lineNumber:122},__self:this},_react2.default.createElement(_Button2.default,{appearance:"secondary",onClick:this.handleRequestClose,label:"Cancel",__source:{fileName:_jsxFileName,lineNumber:123},__self:this}),_react2.default.createElement(_Button2.default,{appearance:"primary",label:"Save",onClick:this.handleSave,__source:{fileName:_jsxFileName,lineNumber:128},__self:this})));}}]);return ReviewPopUp;}(_react.Component);exports.default=ReviewPopUp;/***/},/* 101 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.StepFour=undefined;var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/step-wizard/src/create/StepFour.jsx";var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _createTask=__webpack_require__(51);var _RequestDataCollection=__webpack_require__(52);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var StepFour=exports.StepFour=function(_React$Component){_inherits(StepFour,_React$Component);function StepFour(props){_classCallCheck(this,StepFour);var _this=_possibleConstructorReturn(this,(StepFour.__proto__||Object.getPrototypeOf(StepFour)).call(this,props));_this.state={collectorData:""};return _this;}_createClass(StepFour,[{key:"componentWillMount",value:function componentWillMount(){var task=(0,_createTask.createTask)(_extends({},this.props));this.setState({collectorData:JSON.stringify(task)});}// Show the message once received\n},{key:"render",value:function render(){return _react2.default.createElement("div",{__source:{fileName:_jsxFileName,lineNumber:21},__self:this},_react2.default.createElement("hr",{__source:{fileName:_jsxFileName,lineNumber:22},__self:this}),_react2.default.createElement(_RequestDataCollection.RequestDataCollection,{data:this.state,selectedIndexers:this.props.selectedIndexers,__source:{fileName:_jsxFileName,lineNumber:23},__self:this}));}}]);return StepFour;}(_react2.default.Component);/***/},/* 102 *//***/function(module,exports){module.exports=__webpack_require__(256);/***/},/* 103 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.axiosGetCall=undefined;var _axios=__webpack_require__(40);var _axios2=_interopRequireDefault(_axios);var _config=__webpack_require__(41);var _url=__webpack_require__(2);var _Toaster=__webpack_require__(18);var _Toaster2=_interopRequireDefault(_Toaster);var _ToastConstants=__webpack_require__(19);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var createToast=(0,_Toaster.makeCreateToast)(_Toaster2.default);var axiosGetCall=function axiosGetCall(url,params){var actionURL=(0,_url.createRESTURL)(url);var message=\'\';// We are returning a promise here to stop page from redirecting in case of errors. When resolve() gets called then only \n// .then() gets called which does the re-direction. In case of errors the promise will be rejected and .then() won\'t get called.\nreturn new Promise(function(resolve,reject){_axios2.default.get(actionURL,{params:params,credentials:\'include\',headers:{\'X-Splunk-Form-Key\':_config.CSRFToken,\'X-Requested-With\':\'XMLHttpRequest\',\'Content-Type\':\'application/json\'}}).catch(function(error){console.error(error);message=\'Error making request to \'+url;generateToast(message);reject("reject");});setTimeout(function(){resolve("resolved");},2000);});};var generateToast=function generateToast(message){createToast({type:_ToastConstants.TOAST_TYPES.ERROR,message:message,autoDismiss:true,dismissOnActionClick:true,showAction:false});};exports.axiosGetCall=axiosGetCall;/***/},/* 104 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.StepTwo=undefined;var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/step-wizard/src/file/StepTwo.jsx";var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _Review=__webpack_require__(48);var _Review2=_interopRequireDefault(_Review);var _taskExtraction=__webpack_require__(105);var _taskExtraction2=_interopRequireDefault(_taskExtraction);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _objectWithoutProperties(obj,keys){var target={};for(var i in obj){if(keys.indexOf(i)>=0)continue;if(!Object.prototype.hasOwnProperty.call(obj,i))continue;target[i]=obj[i];}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var StepTwo=exports.StepTwo=function(_React$Component){_inherits(StepTwo,_React$Component);function StepTwo(props){_classCallCheck(this,StepTwo);var _this=_possibleConstructorReturn(this,(StepTwo.__proto__||Object.getPrototypeOf(StepTwo)).call(this,props));_this.handleChildren=function(attribute,value){_this.setState(_defineProperty({},attribute,value));_this.props.handler(attribute,value);};_this.setCollectorStateById=function(collectorObj,stateName){var index=null;var tempState=_this.state[stateName];for(var i=0;i<tempState.length;i++){if(tempState[i].id===collectorObj.id){index=i;break;}}tempState[index]=collectorObj;_this.setState(_defineProperty({},_this.state[stateName],tempState));_this.handleChildren([_this.state[stateName]],tempState);};var data=JSON.parse(_this.props.fileData);if(data.task){data=data.task;}var task=(0,_taskExtraction2.default)(data);if(task.splunk_diag===undefined){task.splunk_diag=[{selected:false}];}var _this$props=_this.props,activePanelId=_this$props.activePanelId,activeStepId=_this$props.activeStepId,requireProps=_objectWithoutProperties(_this$props,["activePanelId","activeStepId"]);_this.state=_extends({},requireProps,task);return _this;}_createClass(StepTwo,[{key:"componentDidMount",value:function componentDidMount(){var _this2=this;Object.keys(this.state).forEach(function(key){if(["activePanelId","activeStepId"].indexOf(key)===-1){_this2.handleChildren(key,_this2.state[key]);}});}},{key:"componentWillUnmount",value:function componentWillUnmount(){// This leaves the button enabled on Back so that user can click Next to see ErrorModals\nthis.props.handler("disableNext",false);}},{key:"render",value:function render(){var _state=this.state,name=_state.name,description=_state.description,search_debug=_state.search_debug,selectedIndexers=_state.selectedIndexers,cluster=_state.cluster,fileData=_state.fileData,activePanelId=_state.activePanelId,rapidDiagData=_state.rapidDiagData;var availMatrix=this.props.availMatrix;var validationParameters={name:name,description:description,selectedIndexers:selectedIndexers,cluster:cluster,activePanelId:activePanelId,fileData:fileData,rapidDiagData:rapidDiagData,search_debug:search_debug};return _react2.default.createElement("div",{__source:{fileName:_jsxFileName,lineNumber:84},__self:this},_react2.default.createElement(_Review2.default,_extends({availMatrix:availMatrix,selectedIndexers:selectedIndexers,name:name,description:description,cluster:cluster},this.state,{handler:this.handleChildren,setCollectorStateById:this.setCollectorStateById,validationParameters:validationParameters,disableNext:this.props.disableNext,__source:{fileName:_jsxFileName,lineNumber:85},__self:this})));}}]);return StepTwo;}(_react2.default.Component);/***/},/* 105 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _utils=__webpack_require__(27);function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}else{return Array.from(arr);}}/**\n                                                                                                                                                                                                     * File contains method for collection collector and trigger objects with name and decription from JSON file\n                                                                                                                                                                                                     * It creates the object of each collector and trigger\n                                                                                                                                                                                                     */var getSystemCallCollector=function getSystemCallCollector(obj,collector,level,parentId){var reviewObj=obj;if(reviewObj.system_call_trace===undefined){reviewObj.system_call_trace=[];}else{reviewObj.system_call_trace=[].concat(_toConsumableArray(reviewObj.system_call_trace));}var test={id:(0,_utils.generateUID)(),selected:true,level:level,parentId:parentId,__class__:collector.__class__,process:collector.process,collection_time:collector.collection_time,action_needed:collector.action_needed};reviewObj.system_call_trace.push(test);};var getStackTraceCollector=function getStackTraceCollector(obj,collector,level,parentId){var reviewObj=obj;if(reviewObj.stack_trace===undefined){reviewObj.stack_trace=[];}else{reviewObj.stack_trace=[].concat(_toConsumableArray(reviewObj.stack_trace));}var test={id:(0,_utils.generateUID)(),selected:true,level:level,parentId:parentId,__class__:collector.__class__,process:collector.process,action_needed:collector.action_needed};reviewObj.stack_trace.push(test);};var getNetworkPacketCollector=function getNetworkPacketCollector(obj,collector,level,parentId){var reviewObj=obj;if(reviewObj.network_packet===undefined){reviewObj.network_packet=[];}else{reviewObj.network_packet=[].concat(_toConsumableArray(reviewObj.network_packet));}var test={id:(0,_utils.generateUID)(),selected:true,level:level,parentId:parentId,__class__:collector.__class__,port:collector.port,ip_address:collector.ip_address,collection_time:collector.collection_time,action_needed:collector.action_needed};reviewObj.network_packet.push(test);};var getSearchResultCollector=function getSearchResultCollector(obj,collector,level,parentId){var reviewObj=obj;if(reviewObj.search_result===undefined){reviewObj.search_result=[];}else{reviewObj.search_result=[].concat(_toConsumableArray(reviewObj.search_result));}var test={id:(0,_utils.generateUID)(),selected:true,level:level,parentId:parentId,__class__:collector.__class__,search_query:collector.search_query,action_needed:collector.action_needed};reviewObj.search_result.push(test);};var getIOPSCollector=function getIOPSCollector(obj,collector,level,parentId){var reviewObj=obj;if(reviewObj.iops===undefined){reviewObj.iops=[];}else{reviewObj.iops=[].concat(_toConsumableArray(reviewObj.iops));}var test={id:(0,_utils.generateUID)(),selected:true,level:level,parentId:parentId,__class__:collector.__class__,collection_time:collector.collection_time,action_needed:collector.action_needed};reviewObj.iops.push(test);};var getNetStatCollector=function getNetStatCollector(obj,collector,level,parentId){var reviewObj=obj;if(reviewObj.netstat===undefined){reviewObj.netstat=[];}else{reviewObj.netstat=[].concat(_toConsumableArray(reviewObj.netstat));}var test={id:(0,_utils.generateUID)(),selected:true,level:level,parentId:parentId,__class__:collector.__class__,action_needed:collector.action_needed};reviewObj.netstat.push(test);};var getPSCollector=function getPSCollector(obj,collector,level,parentId){var reviewObj=obj;if(reviewObj.ps===undefined){reviewObj.ps=[];}else{reviewObj.ps=[].concat(_toConsumableArray(reviewObj.ps));}var test={id:(0,_utils.generateUID)(),selected:true,level:level,parentId:parentId,__class__:collector.__class__,action_needed:collector.action_needed};reviewObj.ps.push(test);};var getLSOFCollector=function getLSOFCollector(obj,collector,level,parentId){var reviewObj=obj;if(reviewObj.lsof===undefined){reviewObj.lsof=[];}else{reviewObj.lsof=[].concat(_toConsumableArray(reviewObj.lsof));}var test={id:(0,_utils.generateUID)(),selected:true,level:level,parentId:parentId,__class__:collector.__class__,process:collector.process,action_needed:collector.action_needed};reviewObj.lsof.push(test);};var getPeriodicCollector=function getPeriodicCollector(obj,collector,level,parentId){var reviewObj=obj;var lvl=getLevel(level+1);if(reviewObj.periodic===undefined){reviewObj.periodic=[];}else{reviewObj.periodic=[].concat(_toConsumableArray(reviewObj.periodic));}var test={id:(0,_utils.generateUID)(),selected:true,level:level,parentId:parentId,__class__:collector.__class__,interval:collector.interval,sampleCount:collector.sampleCount,action_needed:collector.action_needed};reviewObj.periodic.push(test);if(collector.hasOwnProperty("collectors")&&collector.collectors.length!==0){getTriggersRecursive(reviewObj,collector.collectors,lvl,level);getCollectorsRecursive(reviewObj,collector.collectors,lvl,level);}};var getSplunkDiagCollector=function getSplunkDiagCollector(obj,collector,level,parentId){var reviewObj=obj;if(reviewObj.splunk_diag===undefined){reviewObj.splunk_diag=[];}else{reviewObj.splunk_diag=[].concat(_toConsumableArray(reviewObj.splunk_diag));}var test={id:(0,_utils.generateUID)(),selected:true,level:level,parentId:parentId,__class__:collector.__class__,action_needed:collector.action_needed};reviewObj.splunk_diag.push(test);};var getLogMonitorTrigger=function getLogMonitorTrigger(obj,collector,level,parentId){var reviewObj=obj;var lvl=getLevel(level+1);if(reviewObj.log_monitor===undefined){reviewObj.log_monitor=[];}else{reviewObj.log_monitor=[].concat(_toConsumableArray(reviewObj.log_monitor));}var test={id:(0,_utils.generateUID)(),selected:true,level:level,parentId:parentId,__class__:collector.__class__,selectedFile:collector.selectedFile,regex:collector.regex,action_needed:collector.action_needed};reviewObj.log_monitor.push(test);if(collector.hasOwnProperty("collectors")&&collector.collectors.length!==0){getTriggersRecursive(reviewObj,collector.collectors,lvl,level);getCollectorsRecursive(reviewObj,collector.collectors,lvl,level);}};var getResourceMonitorTrigger=function getResourceMonitorTrigger(obj,collector,level,parentId){var reviewObj=obj;var lvl=getLevel(level+1);if(reviewObj.resource_monitor===undefined){reviewObj.resource_monitor=[];}else{reviewObj.resource_monitor=[].concat(_toConsumableArray(reviewObj.resource_monitor));}var test={id:(0,_utils.generateUID)(),selected:true,level:level,parentId:parentId,__class__:collector.__class__,resource_monitor_trackers:collector.resource_monitor_trackers,action_needed:collector.action_needed};reviewObj.resource_monitor.push(test);if(collector.hasOwnProperty("collectors")&&collector.collectors.length!==0){getTriggersRecursive(reviewObj,collector.collectors,lvl,level);getCollectorsRecursive(reviewObj,collector.collectors,lvl,level);}};var getSearchDebugTrigger=function getSearchDebugTrigger(obj,collector,level,parentId){var reviewObj=obj;var lvl=getLevel(level+1);if(reviewObj.search_debug===undefined){reviewObj.search_debug=[];}else{reviewObj.search_debug=[].concat(_toConsumableArray(reviewObj.search_debug));}var test={id:(0,_utils.generateUID)(),selected:true,level:level,parentId:parentId,__class__:collector.__class__,search_regex:collector.search_regex,action_needed:collector.action_needed};reviewObj.search_debug.push(test);if(collector.hasOwnProperty("collectors")&&collector.collectors.length!==0){getTriggersRecursive(reviewObj,collector.collectors,lvl,level);getCollectorsRecursive(reviewObj,collector.collectors,lvl,level);}};var getCollectorsRecursive=function getCollectorsRecursive(reviewObj,collectors,level,parentId){collectors.map(function(collector){if(collector.__class__.endsWith("SystemCallTrace")){var lvl=getLevel(level+1);getSystemCallCollector(reviewObj,collector,lvl,parentId);}else if(collector.__class__.endsWith("StackTrace")){var _lvl=getLevel(level+1);getStackTraceCollector(reviewObj,collector,_lvl,parentId);}else if(collector.__class__.endsWith("NetworkPacket")){var _lvl2=getLevel(level+1);getNetworkPacketCollector(reviewObj,collector,_lvl2,parentId);}else if(collector.__class__.endsWith("SearchResult")){var _lvl3=getLevel(level+1);getSearchResultCollector(reviewObj,collector,_lvl3,parentId);}else if(collector.__class__.endsWith("Diag")){var _lvl4=getLevel(level+1);getSplunkDiagCollector(reviewObj,collector,_lvl4,parentId);}else if(collector.__class__.endsWith("IOPS")){var _lvl5=getLevel(level+1);getIOPSCollector(reviewObj,collector,_lvl5,parentId);}else if(collector.__class__.endsWith("NetStat")){var _lvl6=getLevel(level+1);getNetStatCollector(reviewObj,collector,_lvl6,parentId);}else if(collector.__class__.endsWith("PS")){var _lvl7=getLevel(level+1);getPSCollector(reviewObj,collector,_lvl7,parentId);}else if(collector.__class__.endsWith("LSOF")){var _lvl8=getLevel(level+1);getLSOFCollector(reviewObj,collector,_lvl8,parentId);}});};var getTriggersRecursive=function getTriggersRecursive(reviewObj,collectors,level,parentId){collectors.map(function(collector){if(collector.__class__.endsWith("SearchDebug")){var lvl=getLevel(level+1);getSearchDebugTrigger(reviewObj,collector,lvl,parentId);}else if(collector.__class__.endsWith("ResourceMonitor")){var _lvl9=getLevel(level+1);getResourceMonitorTrigger(reviewObj,collector,_lvl9,parentId);}else if(collector.__class__.endsWith("LogMonitor")){var _lvl10=getLevel(level+1);getLogMonitorTrigger(reviewObj,collector,_lvl10,parentId);}else if(collector.__class__.endsWith("Periodic")){var _lvl11=getLevel(level+1);getPeriodicCollector(reviewObj,collector,_lvl11,parentId);}});};var levels=new Set();var getLevel=function getLevel(level){while(levels.has(level)){level+=1;}levels.add(level);return level;};var extractObjects=function extractObjects(data){var obj={};data.collectors.map(function(trigger){if(trigger.__class__.endsWith("SearchDebug")){var lvl=getLevel(1);getSearchDebugTrigger(obj,trigger,lvl,0);}else if(trigger.__class__.endsWith("ResourceMonitor")){var _lvl12=getLevel(1);getResourceMonitorTrigger(obj,trigger,_lvl12,0);}else if(trigger.__class__.endsWith("LogMonitor")){var _lvl13=getLevel(1);getLogMonitorTrigger(obj,trigger,_lvl13,0);}else if(trigger.__class__.endsWith("Periodic")){var _lvl14=getLevel(1);getPeriodicCollector(obj,trigger,_lvl14,0);}else{var _lvl15=getLevel(1);getCollectorsRecursive(obj,[trigger],_lvl15,0);}});obj.name=data.name;obj.description=data.description;return obj;};exports.default=extractObjects;/***/},/* 106 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.StepThree=undefined;var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/step-wizard/src/file/StepThree.jsx";var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _createTask=__webpack_require__(51);var _RequestDataCollection=__webpack_require__(52);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var StepThree=exports.StepThree=function(_Component){_inherits(StepThree,_Component);function StepThree(props){var _ref;_classCallCheck(this,StepThree);for(var _len=arguments.length,rest=Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){rest[_key-1]=arguments[_key];}var _this=_possibleConstructorReturn(this,(_ref=StepThree.__proto__||Object.getPrototypeOf(StepThree)).call.apply(_ref,[this,props].concat(rest)));_this.state={collectorData:""};return _this;}_createClass(StepThree,[{key:"componentWillMount",value:function componentWillMount(){var task=(0,_createTask.createTask)(_extends({},this.props));this.setState({collectorData:JSON.stringify(task)});}// Show the message once received\n},{key:"render",value:function render(){return _react2.default.createElement("div",{__source:{fileName:_jsxFileName,lineNumber:21},__self:this},_react2.default.createElement("hr",{__source:{fileName:_jsxFileName,lineNumber:22},__self:this}),_react2.default.createElement(_RequestDataCollection.RequestDataCollection,{data:this.state,selectedIndexers:this.props.selectedIndexers,__source:{fileName:_jsxFileName,lineNumber:23},__self:this}));}}]);return StepThree;}(_react.Component);exports.default=StepThree;/***/},/* 107 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _url=__webpack_require__(2);var _CommonService=__webpack_require__(5);var getRapidDiagInfo=function getRapidDiagInfo(self){self.setState({disableNext:true});var indexerURL=(0,_url.createRESTURL)("rapid_diag/info");var localHostURL=(0,_url.createRESTURL)("server/info?output_mode=json");self.showLoader();(0,_CommonService.axiosGetCall)(indexerURL,{local:1}).then(function(responseJson){self.setState({disableNext:false});(0,_CommonService.axiosGetCall)(localHostURL,{}).then(function(responseJson){self.setState({localHostName:responseJson.data.entry[0].content.serverName});});var data=responseJson.data;var indexerList=data.map(function(peer){return JSON.parse(peer.value).splunk_server;});self.setState({indexerList:indexerList});self.setState({rapidDiagData:data});self.hideLoader();}).catch(function(){self.setState({disableNext:false});self.setState({isLoading:false});self.setState({indexer_dropdown_message:"couldn\'t retrieve rapid_diag information"});self.hideLoader();});};exports.default=getRapidDiagInfo;/***/},/* 108 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var colStyle={minHeight:80};var colStyleButton={minHeight:80,marginTop:5+"px",marginLeft:-50+"px"};var colStyleHead={minHeight:80,marginTop:5+"px"};var mainDivStyle={textAlign:"center",width:100+"%",boxShadow:"0 10px 10px -10px rgba(92, 192, 92, 0.38)"};var colHeading={float:"left",marginLeft:40,marginTop:10};var stepBar={width:100+"%",marginTop:10};exports.colStyle=colStyle;exports.colStyleButton=colStyleButton;exports.colStyleHead=colStyleHead;exports.mainDivStyle=mainDivStyle;exports.colHeading=colHeading;exports.stepBar=stepBar;/***/},/* 109 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.isValid=undefined;var _ValidationConf=__webpack_require__(50);var ValidationConf=_interopRequireWildcard(_ValidationConf);function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key))newObj[key]=obj[key];}}newObj.default=obj;return newObj;}}var message="";/**\n                   * This file has validation functions for UI which validates all fields.\n                   * Don\'t forget to keep the validations of backend in sync with this :)\n                   */var isValidJSON=function isValidJSON(str){try{JSON.parse(str);}catch(e){return false;}return true;};var validateCreateTab=function validateCreateTab(currentstate){var validationObj=null;var action_needed={};var selectedIndexers=currentstate.selectedIndexers,search_debug=currentstate.search_debug,system_call_trace=currentstate.system_call_trace,stack_trace=currentstate.stack_trace,network_packet=currentstate.network_packet,search_result=currentstate.search_result,iops=currentstate.iops,lsof=currentstate.lsof,periodic=currentstate.periodic,log_monitor=currentstate.log_monitor,resource_monitor=currentstate.resource_monitor;if(currentstate.activeStepId===0){/**\n         * validates:\n         *      `name`\n         *      `description`\n         *      `cluster`\n         *      `selectedIndexers`\n         *      `searchRegex`\n         */validationObj=ValidationConf.validate("collection_info",currentstate);if(!validationObj.valid){return validationObj;}validationObj=ValidationConf.validate("distributed_collection",{selectedIndexers:selectedIndexers});if(!validationObj.valid){return validationObj;}validationObj=ValidationConf.validate("search_debug",{search_debug:search_debug[0]});if(!validationObj.valid){return validationObj;}}else if(currentstate.activeStepId===1){/**\n         * validates:\n         *      `collectors`\n         *      `process`\n         *      `collection_time`\n         *      `ip_address`\n         *      `port`\n         *      `search_query`\n         */if(!currentstate.system_call_trace[0].selected&&!currentstate.stack_trace[0].selected&&!currentstate.splunk_diag[0].selected&&!currentstate.network_packet[0].selected&&!currentstate.search_result[0].selected&&!currentstate.iops[0].selected&&!currentstate.netstat[0].selected&&!currentstate.ps[0].selected&&!currentstate.lsof[0].selected){message="Please select a collector.";action_needed.message=message;return{valid:false,action_needed:action_needed};}validationObj=ValidationConf.validate("system_call_trace",{search_debug:search_debug,system_call_trace:system_call_trace[0]});if(!validationObj.valid){return validationObj;}validationObj=ValidationConf.validate("stack_trace",{search_debug:search_debug,stack_trace:stack_trace[0]});if(!validationObj.valid){return validationObj;}validationObj=ValidationConf.validate("network_packet",{network_packet:network_packet[0]});if(!validationObj.valid){return validationObj;}validationObj=ValidationConf.validate("search_result",{search_result:search_result[0]});if(!validationObj.valid){return validationObj;}validationObj=ValidationConf.validate("iops",{iops:iops[0]});if(!validationObj.valid){return validationObj;}validationObj=ValidationConf.validate("lsof",{search_debug:search_debug,lsof:lsof[0]});if(!validationObj.valid){return validationObj;}}else if(currentstate.activeStepId===2){/**\n         * validates:\n         *      `periodic`\n         *      `log_monitor`\n         *      `cpu`\n         *      `physical_memory`\n         *      `virtual_memory`\n         */validationObj=ValidationConf.validate("periodic",{periodic:periodic[0]});if(!validationObj.valid){return validationObj;}validationObj=ValidationConf.validate("log_monitor",{log_monitor:log_monitor[0]});if(!validationObj.valid){return validationObj;}validationObj=ValidationConf.validate("resource_monitor",{resource_monitor:resource_monitor[0]});if(!validationObj.valid){return validationObj;}}return{valid:true,message:""};};var validateFileTab=function validateFileTab(currentstate){/**\n     * validates:\n     *      `fileData`\n     *      `selectedIndexers`\n     */var validationObj=null;var valid=true;var action_needed={};var selectedIndexers=currentstate.selectedIndexers;if(!currentstate.fileData){message="Please select a file to proceed.";action_needed.fileData=message;valid=valid&&false;}if(valid&&isValidJSON(currentstate.fileData)===false){message="Please upload a valid JSON file.";action_needed.fileData=message;valid=valid&&false;}if(valid){var file=JSON.parse(currentstate.fileData);if(file.task){if(!currentstate.name){currentstate.name=file.task.name;}}else{currentstate.name=file.name;}// checks for the valid file name (Windows has some extra checks for file to be valid)\nvalidationObj=ValidationConf.validate("collection_info",currentstate);if(!validationObj.valid){return validationObj;}validationObj=ValidationConf.validate("distributed_collection",{selectedIndexers:selectedIndexers});if(!validationObj.valid){return validationObj;}}return{valid:valid,action_needed:action_needed};};/**\n * Validates `Create Tab` and `File Tab` fields.\n * @param state : component\'s current state\n */var isValid=exports.isValid=function isValid(state){var currentstate=state;var flag={valid:true,message:""};if(currentstate.activePanelId==="one"||currentstate.activePanelId===undefined){flag=validateCreateTab(currentstate);}else{flag=validateFileTab(currentstate);}return flag;};/***/},/* 110 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/components/Helper/Helper.jsx";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _InfoCircle=__webpack_require__(20);var _InfoCircle2=_interopRequireDefault(_InfoCircle);var _Modal=__webpack_require__(13);var _Modal2=_interopRequireDefault(_Modal);var _Markdown=__webpack_require__(37);var _Markdown2=_interopRequireDefault(_Markdown);var _Switch=__webpack_require__(47);var _Switch2=_interopRequireDefault(_Switch);var _RapidDiagHelpText=__webpack_require__(111);var _TaskCatalougeHeaderStyles=__webpack_require__(36);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Helper=function(_Component){_inherits(Helper,_Component);function Helper(props){var _ref;_classCallCheck(this,Helper);for(var _len=arguments.length,args=Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}var _this=_possibleConstructorReturn(this,(_ref=Helper.__proto__||Object.getPrototypeOf(Helper)).call.apply(_ref,[this,props].concat(args)));_this.openModal=function(){_this.setState({open:true});};_this.closeModal=function(){_this.setState({open:false});if(_this.props.openByDefault===true){if(_this.state.showItAgain===false){localStorage.setItem("showRapidDiagDocs",false);}else{localStorage.removeItem("showRapidDiagDocs");}}};_this.handleClick=function(){_this.setState({showItAgain:!_this.state.showItAgain});};var showItAgain="true";if(localStorage.getItem("showRapidDiagDocs")){showItAgain=localStorage.getItem("showRapidDiagDocs");}_this.state={open:_this.props.openByDefault?showItAgain==="true":false,showItAgain:_this.props.openByDefault?showItAgain==="true":false};return _this;}_createClass(Helper,[{key:"render",value:function render(){var text=_RapidDiagHelpText.RapidDiagHelpText;return _react2.default.createElement(_react2.default.Fragment,{__source:{fileName:_jsxFileName,lineNumber:51},__self:this},_react2.default.createElement(_TaskCatalougeHeaderStyles.StyleButton,{id:this.props.id,icon:_react2.default.createElement(_InfoCircle2.default,{size:1.5,style:{marginTop:"1px"},__source:{fileName:_jsxFileName,lineNumber:54},__self:this}),inline:true,appearance:"pill",onClick:this.openModal,style:this.props.buttonStyle,__source:{fileName:_jsxFileName,lineNumber:52},__self:this}),_react2.default.createElement(_Modal2.default,{onRequestClose:this.closeModal,open:this.state.open,enablePeek:true,__source:{fileName:_jsxFileName,lineNumber:60},__self:this},_react2.default.createElement(_Modal2.default.Header,{title:"RapidDiag Documentation",onRequestClose:this.closeModal,__source:{fileName:_jsxFileName,lineNumber:61},__self:this}),_react2.default.createElement(_Modal2.default.Body,{__source:{fileName:_jsxFileName,lineNumber:65},__self:this},_react2.default.createElement(_Markdown2.default,{text:text,__source:{fileName:_jsxFileName,lineNumber:66},__self:this})),this.props.openByDefault&&_react2.default.createElement(_Modal2.default.Footer,{__source:{fileName:_jsxFileName,lineNumber:69},__self:this},_react2.default.createElement(_Switch2.default,{key:!this.state.showItAgain,value:!this.state.showItAgain,onClick:this.handleClick,selected:!this.state.showItAgain,appearance:"checkbox",__source:{fileName:_jsxFileName,lineNumber:70},__self:this}," Don\'t show the pop-up again  "))));}}]);return Helper;}(_react.Component);exports.default=Helper;/***/},/* 111 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var RapidDiagHelpText=exports.RapidDiagHelpText=\'\\n# Overview\\n\\n\\nThe Splunk RapidDiag app collects diagnostic data on Splunk platform deployments that run on Linux and Windows operating systems for the purposes of analysis by the Splunk Support and Engineering teams.\\n\\nThe app provides command-line scripts and a web interface for various diagnostic data collection tasks:\\n\\n- Stack dumps: pstacks, eu-stacks, or procdump;\\n- System call traces: strace or procmon; \\n- Splunk diag;\\n- Rest endpoint outputs: ( ``|rest search`` exports);\\n- Network packet dumps: tcpdump or netsh;\\n- I/O operations: logman or iostat;\\n- Network statistics and network connections: netsh; and\\n- Process information: ps, lsof, or handle64.\\n\\nSplunk RapidDiag also offers automatic data collection based on triggers \\u2013 for example, start collecting data when certain keywords are written to a specific log file, or when systemwide memory usage crosses a threshold.\\n\\nSplunk RapidDiag can facilitate distributed data collection between search heads and selected peers in a distributed search environment.\\n\\n## Installation instructions\\n\\nYou can install the Splunk RapidDiag app like any other:\\n\\n1. Directly from Splunkbase, or\\n2. By installing the package after downloading it\\n\\nTo enable the Splunk RapidDiag App without restart, you can run the following search in splunk:\\n``| rest /services/apps/local/splunk_rapid_diag/_reload``\\n\\nIn distributed search environments, the app must be present and working on every machine where you want to collect data. For automated management of apps among nodes, see information about Indexer Cluster App Management, Search-Head Cluster Deployers, or Deployment Servers, depending on the topology of your system.\\n\\n## Dependencies\\n\\nSplunk RapidDiag depends on third-party utilities for some of the data it collects. Some of these utilities vary based on the platform. You must install these utilities separately. You can install them in one of the following ways:\\n\\n* System-wide, by following the installation instructions for each utility\\n* Into the ``splunk_rapid_diag/bin/tools`` directory within the Splunk RapidDiag app.\\n\\nYou can override the default app installation directory of ``$SPLUNK_HOME/etc/splunk_rapid_diag/bin/tools`` by editing ``$SPLUNK_HOME/etc/splunk_rapid_diag/default/rapid_diag.conf`` and changing the value of the ``basepath`` setting under the ``[tools]`` stanza.\\n\\nSee the platform-dependent sections below for specific utility installation instructions.\\n\\n#### Linux-specific utilities\\n\\nOn Linux operating systems, use your distribution package manager to install dependencies for Splunk RapidDiag. This document covers the ``yum`` and ``apt`` package managers, but most other package managers operate similarly.\\n\\n##### Stack traces\\n\\nSplunk RapidDiag requires the ``eu-stack`` utility, version **0.159** or above, to collect stack traces for running processes. The ``elfutils`` package provides this utility, and can be installed by running the following from a shell prompt:\\n\\n* ``apt install elfutils`` on Debian-based Linux deployments, or\\n* ``yum install elfutils`` on RHEL-based Linux deployments.\\n\\nThe user under which the instance runs must be able to perform the ``ptrace`` system call. To confirm that the ``eu-stack`` utility works for this user, run the following:\\n\\n* ``sudo su splunk sh -c "sleep 5 & eu-stack -p $! && echo SUCCESS || echo FAILURE"``\\n\\nIf the command returns "``FAILURE``", then the user cannot currently perform ``ptrace`` system calls. Some common reasons are:\\n\\n1. Linux capabilities disallow it. Try explicitly whitelisting ``eu-stack`` like so:\\n   * ``setcap cap_dac_override,cap_sys_ptrace+eip `which eu-stack` ``\\n2. Security-Enhanced Linux (SELinux) is blocking ptrace. You can try the following to fix the problem:\\n   * ``setsebool -P deny_ptrace off``\\n\\n##### System call traces\\n\\nSplunk RapidDiag requires the ``strace`` binary to run system call traces. The ``strace`` package includes this binary, and can be installed as follows:\\n\\n* ``apt install strace`` on Debian-based Linux deployments, or\\n* ``yum install strace`` on RHEL-based Linux deployments.\\n\\nThe user under which the instance runs must be able to run the utility. To confirm it can, run the following:\\n\\n1. ``sudo su splunk``\\n2. ``strace -o /dev/null sleep 0 && echo SUCCESS || echo FAILURE``\\n\\nIf the command returns FAILURE, follow the troubleshooting steps described earlier in this document to resolve problems with the "ptrace" system call.\\n\\n##### Network packet dumps\\n\\nThe ``tcpdump`` utility collects network packet dumps on Linux. The ``tcpdump`` package includes this utility, and can be installed as follows:\\n\\n* ``apt install tcpdump`` on Debian-based Linux deployments, or\\n* ``yum install tcpdump`` on RHEL-based Linux deployments.\\n\\nThe user under which the instance runs must be able to run the utility. To confirm it can, run the following:\\n\\n1. ``sudo su splunk``\\n2. ``tcpdump -qOc1 && echo SUCCESS || echo FAILURE``\\n\\nIf the command returns FAILURE, try the following commands to resolve the problem:\\n\\n1. ``sudo groupadd pcap``\\n2. ``sudo chgrp pcap $(which tcpdump)``\\n3. ``sudo chmod 750 $(which tcpdump)``\\n4. ``sudo setcap cap_net_raw,cap_net_admin=eip $(which tcpdump)``\\n5. ``sudo usermod -a -G pcap splunk``\\n\\nAfter you run these commands, try the test command again.\\n\\nIf the command continues to return FAILURE, it is possible that SELinux is interfering with tcpdump. In this case, change your SELinux policies to allow ``netutils_t`` permissions to splunk.\\n\\n##### IOPS\\n\\nThe ``iostat`` utility collects CPU statistics and input/output statistics for devices and partitions on Linux. The ``sysstat`` package includes this binary, and can be installed as follows:\\n\\n* ``sudo apt-get install sysstat -y`` on Debian-based Linux deployments, or\\n* ``yum install sysstat -y`` on RHEL-based Linux deployments.\\n\\nThe user under which the instance runs must be able to run the utility. To confirm it can, run the following:\\n\\n1. ``sudo su splunk``\\n2. ``iostat -x 1 10 && echo SUCCESS || echo FAILURE``\\n\\n##### Netstat\\n\\nThe ``netstat`` utility collects network connections and interface statistics on Linux. The ``net-tools`` package includes this binary, and can be installed as follows:\\n\\n* ``sudo apt-get install net-tools -y`` on Debian-based Linux deployments, or\\n* ``yum install net-tools -y`` on RHEL-based Linux deployments.\\n\\nThe user under which the instance runs must be able to run the utility. To confirm it can, run the following:\\n\\n1. ``sudo su splunk``\\n2. ``netstat -s && echo SUCCESS || echo FAILURE``\\n3. ``netstat -a -n -v -e -p && echo SUCCESS || echo FAILURE``\\n\\n##### PS\\n\\nThe ``ps`` utility collects information about a selection of the active processes on Linux. The ``ps`` package includes this binary, and its built-in utility of Linux deployments:\\n\\nThe user under which the instance runs must be able to run the utility. To confirm it can, run the following:\\n\\n1. ``sudo su splunk``\\n2. ``ps aux -ejL && echo SUCCESS || echo FAILURE``\\n\\n##### LSOF\\n\\nThe ``lsof`` utility collects list of opened files by processes on Linux. The ``lsof`` package includes this binary, and can be installed as follows:\\n\\n* ``sudo apt-get install lsof -y`` on Debian-based Linux deployments, or\\n* ``yum install lsof -y`` on RHEL-based Linux deployments.\\n\\nThe user under which the instance runs must be able to run the utility. To confirm it can, run the following:\\n\\n1. ``sudo su splunk``\\n2. ``lsof -s -V -n -a -K -p && echo SUCCESS || echo FAILURE``\\n\\n#### Windows-specific utilities\\n\\n##### System call traces\\n\\nSystem call traces are collected with the ``procmon.exe`` program, which is also part of the **Microsoft SysInternals** suite. It is available on: [https://docs.microsoft.com/en-us/sysinternals/downloads/procmon](https://docs.microsoft.com/en-us/sysinternals/downloads/procmon)\\n\\nPlease download the binary and copy it inside the app, under the ``splunk_rapid_diag\\\\bin\\\\tools`` directory.\\n\\n##### Stack traces\\n\\nThe ``procdump.exe`` utility, which is part of the **Microsoft SysInternals** suite, collects Stack traces traces on Windows. You can download it at [https://docs.microsoft.com/en-us/sysinternals/downloads/procdump](https://docs.microsoft.com/en-us/sysinternals/downloads/procdump).\\n\\nAfter you download the suite:\\n1. Extract and install the suite.\\n2. Copy the procdump.exe file into the Splunk RapidDiag app directory, in ``splunk_rapid_diag\\\\bin\\\\tools``.\\n\\n##### Network packet dumps\\n\\nThe ``netsh`` utility collects network packet dumps on Windows, and comes with every Windows installation.\\n\\n##### IOPS\\n\\nThe ``logman.exe`` utility collects CPU statistics and input/output statistics for devices and partitions on Windows. Its comes with every Windows installation.\\n\\n##### Netstat\\n\\nThe ``netstat.exe`` utility collects network connections and interface statistics on Windows, and comes with every Windows installation.\\n\\n##### PS\\n\\nThe ``tasklist.exe`` utility collects information about a selection of the active processes on Windows, and comes with every Windows installation.\\n\\n##### LSOF\\n\\nThe ``handle64.exe`` utility collects list of opened files by processes on Windows, which is also part of the **Microsoft SysInternals** suite. It is available on: [https://docs.microsoft.com/en-us/sysinternals/downloads/handle](https://docs.microsoft.com/en-us/sysinternals/downloads/handle)\\n\\nAfter you download the suite:\\n1. Extract and install the suite.\\n2. Copy the handle64.exe file into the Splunk RapidDiag app directory, in ``splunk_rapid_diag\\\\bin\\\\tools``.\\n\\n## Usage\\n\\nOn the Splunk RapidDiag data collection page, you can create data collection tasks. As part of creating a task, you must specify at least a name for the task and the Splunk platform instances from which the task should collect data. The instance that runs Splunk RapidDiag must be able to search these instances, and the searched instances must also run the Splunk RapidDiag app. After you specify a task name and target instances, click "Next" to proceed to the data collector description page, which shows cards that describe the available data collectors. A collector with a red exclamation mark badge indicates that collector is not available for the task and cannot be selected. You can get more information on why the collector is not available by clicking its badge.\\n\\nAfter you configure a name, one or more target machines, and data collectors, finish data collection task setup by identifying the task type and what will trigger execution of the collectors that are associated with the task. A task can be *single run*, where all collectors execute once only, or *periodic*, where collectors run together for a number of times. Tasks can also have no trigger and execute immediately, or start when specific text appears in a log file.\\n\\n### Data collectors\\n\\nEach data collector that Splunk RapidDiag offers has different disk space requirements, resource usage, and data privacy implications.\\n\\n#### System Call Trace\\nThe system call trace collector has significant disk space requirements. On a busy Splunk platform instance, the collector could consume more than 1GB per minute of disk space for data collection, and the speed on processes that the collector traces could drop by a factor that could range from 10 to 100. The collector gathers file paths, IP address, and other metadata, but no file data or network communications.\\n\\n#### Stack Trace\\nThe stack trace collector has low disk space requirements and performance impacts on machines that run Linux. Disk usage is typically in the 200KB range per run. This should let you run the collector every few hundred milliseconds without a noticeable performance hit on the instance. On Windows, disk space usage is significantly higher at 5MB per run, and performance requirements are also higher. You can still run the collector on Windows once per second without a significant performance drop on the target process. The collector does not gather user-related process information.\\n\\n#### Network Packet\\nThe network packet collector uses disk space equivalent to the volume of data that the network transmits over the specified IP address and port. Because of that data volume, the most significant performance impact is on the file system due to disk writes. The collector gathers all information that is transmitted over the wire, including passwords and other private data. As the Splunk platform encrypts data that it transmits, and no diagnostic tools collect decryption keys, there is no security risk in using the collector.\\n\\n#### Search Result\\nThe search results collector runs a search and collects the results that the search generates. Disk usage and performance impact depend on the search and can be validated outside of the app context. The collector gathers all search result data, including any private information within the results. Review the data that the collector collects before you share it.\\n\\n#### IOPS\\nThe IOPS collector has significant disk space requirements for Windows. the collector could consume more disk space depending on the collection time range. For the Linux environment, the IOPS collector has low disk space requirements. the collector gathers the CPU statistics and input/output statistics for devices and partitions.\\n\\n#### Netstat\\nThe Netstat collector has low disk space requirements and performance impacts on Windows and Linux. the collector gathers the network connections both incoming and outgoing as well as network statistics over the devices.\\n\\n#### PS\\nThe PS collector has low disk space requirements and performance impacts on Windows and Linux. the collector gathers information about the active processes on Windows and Linux.\\n\\n#### LSOF\\nThe LSOF collector has low disk space requirements and performance impacts on Windows and Linux. the collector gathers information about the list of opened files by processes on Windows and Linux.\\n\\n#### Splunk Diag\\nSplunk diagnostic files contain technical information about the instance. Diagnostic file sizes range from 50 to 600MB and their collection can have a significant effect on the machine owing to the amount of required disk I/O. Diagnostic files do not typically include sensitive information, but passwords located in non-default areas of configuration files and other places could be retained. Review the contents of diagnostic files before you share them.\\n\\nSee the following page in the Splunk Documentation for information on diagnostic files: [https://docs.splunk.com/Documentation/Splunk/latest/Troubleshooting/Generateadiag](https://docs.splunk.com/Documentation/Splunk/latest/Troubleshooting/Generateadiag)\\n\\n## Command Line Interface\\n\\n##### Usage Steps\\n\\n1. ``source $SPLUNK_HOME/bin/setSplunkEnv``\\n2. ``ln -s $SPLUNK_HOME/etc/apps/splunk_rapid_diag/bin/cli/__main__.py $SPLUNK_HOME/bin/rapidDiag``\\n3. ``chmod 755 $SPLUNK_HOME/bin/rapidDiag``\\n\\n##### Usage\\n\\n**rapidDiag** [help] [list] [run <task-id>] [add <file-path>| add <file-path> --name <new-file-name> | add <file-path> --name <new-file-name> --force] <command> [<args>]\\n\\n##### Commands\\n\\n* **list :** Lists pre-built tasks for the RapidDiag app. Predefined tasks are available in the SampleTasks directory within the app.\\n* **run :** Executes the task with the given task ID. If RapidDiag cannot find a file within the SampleTasks directory with a matching task ID, it returns a "task not found" error.\\n* **add :** Copies the collection JSON file to the SampleTasks directory. This process overwrites an existing file with the same name.\\n* **help :** Shows help message and exits\\n\\n## Troubleshooting\\n\\nWhen Splunk RapidDiag does not behave properly, check its log file at ``$SPLUNK_HOME/var/log/splunk/splunk_rapid_diag.log`` for details. You can increase the log file detail by setting ``log_level=DEBUG`` under the ``[logging]`` stanza in ``$SPLUNK_RAPID_DIAG/etc/apps/splunk_rapid_diag/local/rapid_diag.conf``.\\n### Permission Denied Issue:\\n    \\n1. Check the directory owner and permission.\\n2. App requires the read and write permission.\\n3. Try running below command to resove the issue:\\n\\n``sudo chmod -R a-w $SPLUNK_HOME/etc/apps/splunk_rapid_diag``\\n\\n\\n## Version Compatibility\\n\\n#### Splunk Version\\n\\n- 7.0.x\\n- 7.1.X\\n- 7.2.X\\n- 7.3.X\\n- 8.0.X (with either Python 2 or Python 3)\\n\\n#### OS/Browsers\\n\\nAny version supported by compatible Splunk version\\n\\n### Linux: Utilities Compatibility\\n\\n                         |  Ubuntu  |  CentOs  |  openSUSE  |\\n    -------------------  | -------- | -------- |  --------  |\\n    Distribution version |  16.04+  |  6.1+    |   15.1+    |\\n    Kernel version       |  4.4.0+  |  2.6.32+ |   4.12.14+ |\\n    Strace               |  4.11+   |  4.8+    |   4.2+     |\\n    eu-stack             |  0.165+  |  0.164+  |   0.168+   |\\n    tcpdump              |  4.7.4+  |  4.1+    |   4.9.2+   |\\n    IOPS                 |  11.2.0+ |  9.0.4+  |   12.0.2+  |\\n    netstat              |  1.42+   |  1.42+   |   2.1+     |\\n    lsof                 |  4.89+   |  4.82+   |   4.91+    |\\n    ps                   | In-built | In-built |  In-built  |\\n\\n\\n### Windows: Utilities Compatibility\\n    \\n    Collector          |  Utility  |  Version \\n    -----------------  | --------- |  ------- \\n    System Call Trace  | procmon   |  3.52+\\n    Stack Trace        | procdump  |  9.0+\\n    Network Packet     | netsh     |  In-built\\n    IOPS               | logman    |  In-built\\n    netstat            | netstat   |  In-built\\n    LSOF               | handle64  |  4.22+\\n    PS                 | tasklist  |  In-built\\n\';/***/},/* 112 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _jsxFileName="/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/components/ErrorBoundary/ErrorBoundary.jsx";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _Link=__webpack_require__(44);var _Link2=_interopRequireDefault(_Link);var _Message=__webpack_require__(26);var _Message2=_interopRequireDefault(_Message);var _ErrorBoundaryStyles=__webpack_require__(113);var _url=__webpack_require__(2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");}return call&&((typeof call===\'undefined\'?\'undefined\':_typeof(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass===\'undefined\'?\'undefined\':_typeof(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var ErrorBoundary=function(_React$Component){_inherits(ErrorBoundary,_React$Component);function ErrorBoundary(props){_classCallCheck(this,ErrorBoundary);var _this=_possibleConstructorReturn(this,(ErrorBoundary.__proto__||Object.getPrototypeOf(ErrorBoundary)).call(this,props));_this.state={hasError:false,errorMessage:""};return _this;}_createClass(ErrorBoundary,[{key:"componentDidCatch",value:function componentDidCatch(error,info){document.body.style.backgroundColor="#F2F4F5";this.setState({hasError:true});this.setState({errorMessage:error.toString()});}},{key:"componentWillUnmount",value:function componentWillUnmount(){document.body.style=null;}},{key:"render",value:function render(){var error=this.state.errorMessage;if(this.state.hasError){return _react2.default.createElement("div",{style:_ErrorBoundaryStyles.errorPageStyles,__source:{fileName:_jsxFileName,lineNumber:30},__self:this},_react2.default.createElement("h1",{style:_ErrorBoundaryStyles.errorHeaderStyles,__source:{fileName:_jsxFileName,lineNumber:31},__self:this},"Something went wrong!"),_react2.default.createElement("h3",{style:{fontFamily:"Verdana"},__source:{fileName:_jsxFileName,lineNumber:32},__self:this},"Click ",_react2.default.createElement(_Link2.default,{to:(0,_url.createURL)("/"),__source:{fileName:_jsxFileName,lineNumber:33},__self:this},"here")," to return to Splunk homepage."),_react2.default.createElement(_Message2.default,{fill:true,type:"error",style:_ErrorBoundaryStyles.errorMessageStyles,__source:{fileName:_jsxFileName,lineNumber:35},__self:this},error));}return this.props.children;}}]);return ErrorBoundary;}(_react2.default.Component);exports.default=ErrorBoundary;/***/},/* 113 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var errorPageStyles={height:100+\'%\',width:100+\'%\',display:\'flex\',flexDirection:\'column\',justifyContent:\'center\',textAlign:\'center\'};var errorMessageStyles={marginLeft:15+\'%\',marginRight:15+\'%\',fontFamily:\'Verdana\'};var errorHeaderStyles={marginTop:8+\'%\',fontFamily:\'Verdana\'};exports.errorPageStyles=errorPageStyles;exports.errorMessageStyles=errorMessageStyles;exports.errorHeaderStyles=errorHeaderStyles;/***/}]/******/);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///530\n')},799:function(module,exports,__webpack_require__){"use strict";eval('\n\nvar _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };\n\nmodule.exports =\n/******/function (modules) {\n    // webpackBootstrap\n    /******/ // The module cache\n    /******/var installedModules = {};\n    /******/\n    /******/ // The require function\n    /******/function __webpack_require__(moduleId) {\n        /******/\n        /******/ // Check if module is in cache\n        /******/if (installedModules[moduleId]) {\n            /******/return installedModules[moduleId].exports;\n            /******/\n        }\n        /******/ // Create a new module (and put it into the cache)\n        /******/var module = installedModules[moduleId] = {\n            /******/i: moduleId,\n            /******/l: false,\n            /******/exports: {}\n            /******/ };\n        /******/\n        /******/ // Execute the module function\n        /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n        /******/ // Flag the module as loaded\n        /******/module.l = true;\n        /******/\n        /******/ // Return the exports of the module\n        /******/return module.exports;\n        /******/\n    }\n    /******/\n    /******/\n    /******/ // expose the modules object (__webpack_modules__)\n    /******/__webpack_require__.m = modules;\n    /******/\n    /******/ // expose the module cache\n    /******/__webpack_require__.c = installedModules;\n    /******/\n    /******/ // define getter function for harmony exports\n    /******/__webpack_require__.d = function (exports, name, getter) {\n        /******/if (!__webpack_require__.o(exports, name)) {\n            /******/Object.defineProperty(exports, name, { enumerable: true, get: getter });\n            /******/\n        }\n        /******/\n    };\n    /******/\n    /******/ // define __esModule on exports\n    /******/__webpack_require__.r = function (exports) {\n        /******/if (typeof Symbol !== \'undefined\' && Symbol.toStringTag) {\n            /******/Object.defineProperty(exports, Symbol.toStringTag, { value: \'Module\' });\n            /******/\n        }\n        /******/Object.defineProperty(exports, \'__esModule\', { value: true });\n        /******/\n    };\n    /******/\n    /******/ // create a fake namespace object\n    /******/ // mode & 1: value is a module id, require it\n    /******/ // mode & 2: merge all properties of value into the ns\n    /******/ // mode & 4: return value when already ns object\n    /******/ // mode & 8|1: behave like require\n    /******/__webpack_require__.t = function (value, mode) {\n        /******/if (mode & 1) value = __webpack_require__(value);\n        /******/if (mode & 8) return value;\n        /******/if (mode & 4 && (typeof value === \'undefined\' ? \'undefined\' : _typeof(value)) === \'object\' && value && value.__esModule) return value;\n        /******/var ns = Object.create(null);\n        /******/__webpack_require__.r(ns);\n        /******/Object.defineProperty(ns, \'default\', { enumerable: true, value: value });\n        /******/if (mode & 2 && typeof value != \'string\') for (var key in value) {\n            __webpack_require__.d(ns, key, function (key) {\n                return value[key];\n            }.bind(null, key));\n        } /******/return ns;\n        /******/\n    };\n    /******/\n    /******/ // getDefaultExport function for compatibility with non-harmony modules\n    /******/__webpack_require__.n = function (module) {\n        /******/var getter = module && module.__esModule ?\n        /******/function getDefault() {\n            return module[\'default\'];\n        } :\n        /******/function getModuleExports() {\n            return module;\n        };\n        /******/__webpack_require__.d(getter, \'a\', getter);\n        /******/return getter;\n        /******/\n    };\n    /******/\n    /******/ // Object.prototype.hasOwnProperty.call\n    /******/__webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n    };\n    /******/\n    /******/ // __webpack_public_path__\n    /******/__webpack_require__.p = "";\n    /******/\n    /******/\n    /******/ // Load entry module and return exports\n    /******/return __webpack_require__(__webpack_require__.s = 114);\n    /******/\n}(\n/************************************************************************/\n/******/{\n\n    /***/114:\n    /***/function _(module, exports, __webpack_require__) {\n\n        "use strict";\n\n        Object.defineProperty(exports, "__esModule", {\n            value: true\n        });\n        exports.themes = exports.lite = exports.enterprise = exports.mixin = exports.variable = undefined;\n\n        var _enterprise = __webpack_require__(115);\n\n        var _enterprise2 = _interopRequireDefault(_enterprise);\n\n        var _lite = __webpack_require__(116);\n\n        var _lite2 = _interopRequireDefault(_lite);\n\n        function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n        }\n\n        var getTheme = function getTheme(props) {\n            return props.theme && props.theme["step-wizard"] ? props.theme["step-wizard"] : _enterprise2.default;\n        }; // prettier-ignore\n        var variable = exports.variable = function variable(name) {\n            return function (props) {\n                return getTheme(props)[name];\n            };\n        };\n        var mixin = exports.mixin = function mixin(name) {\n            return function () {\n                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                    args[_key] = arguments[_key];\n                }\n\n                return function (props) {\n                    var _getTheme$mixins;\n\n                    return (_getTheme$mixins = getTheme(props).mixins)[name].apply(_getTheme$mixins, args);\n                };\n            };\n        };\n\n        var enterprise = exports.enterprise = { "step-wizard": _enterprise2.default }; // prettier-ignore\n        var lite = exports.lite = { "step-wizard": _lite2.default }; // prettier-ignore\n        var themes = exports.themes = { enterprise: enterprise, lite: lite };\n\n        /***/\n    },\n\n    /***/115:\n    /***/function _(module, exports) {\n\n        module.exports = __webpack_require__(129);\n\n        /***/\n    },\n\n    /***/116:\n    /***/function _(module, exports) {\n\n        module.exports = __webpack_require__(217);\n\n        /***/\n    }\n\n    /******/ });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///799\n')},800:function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.StyledGreeting = exports.StyledContainer = undefined;\n\nvar _templateObject = _taggedTemplateLiteral(['\\n    ', ';\\n    display: block;\\n    font-size: ', ';\\n    line-height: 200%;\\n    margin: calc(', ' * 2) calc(', ' * 2);\\n'], ['\\n    ', ';\\n    display: block;\\n    font-size: ', ';\\n    line-height: 200%;\\n    margin: calc(', ' * 2) calc(', ' * 2);\\n']),\n    _templateObject2 = _taggedTemplateLiteral(['\\n    font-weight: bold;\\n    color: ', ';\\n    font-size: ', ';\\n'], ['\\n    font-weight: bold;\\n    color: ', ';\\n    font-size: ', ';\\n']);\n\nvar _styledComponents = __webpack_require__(4);\n\nvar _styledComponents2 = _interopRequireDefault(_styledComponents);\n\nvar _themes = __webpack_require__(293);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nvar StyledContainer = _styledComponents2.default.div(_templateObject, (0, _themes.mixin)('reset')('inline'), (0, _themes.variable)('fontSizeLarge'), (0, _themes.variable)('spacing'), (0, _themes.variable)('spacing'));\n\nvar StyledGreeting = _styledComponents2.default.div(_templateObject2, (0, _themes.variable)('infoColor'), (0, _themes.variable)('fontSizeXXLarge'));\n\nexports.StyledContainer = StyledContainer;\nexports.StyledGreeting = StyledGreeting;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvcGFnZXMvc3RlcC13aXphcmQvU3RhcnRTdHlsZXMuanM/YTFhNSJdLCJuYW1lcyI6WyJTdHlsZWRDb250YWluZXIiLCJzdHlsZWQiLCJkaXYiLCJTdHlsZWRHcmVldGluZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7OztBQUVBLElBQU1BLGtCQUFrQkMsMkJBQU9DLEdBQXpCLGtCQUNBLG1CQUFNLE9BQU4sRUFBZSxRQUFmLENBREEsRUFHVyxzQkFBUyxlQUFULENBSFgsRUFLYSxzQkFBUyxTQUFULENBTGIsRUFLOEMsc0JBQVMsU0FBVCxDQUw5QyxDQUFOOztBQVFBLElBQU1DLGlCQUFpQkYsMkJBQU9DLEdBQXhCLG1CQUVPLHNCQUFTLFdBQVQsQ0FGUCxFQUdXLHNCQUFTLGlCQUFULENBSFgsQ0FBTjs7UUFNU0YsZSxHQUFBQSxlO1FBQWlCRyxjLEdBQUFBLGMiLCJmaWxlIjoiODAwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQgeyB2YXJpYWJsZSwgbWl4aW4gfSBmcm9tICcuL3RoZW1lcyc7XG5cbmNvbnN0IFN0eWxlZENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gICAgJHttaXhpbigncmVzZXQnKSgnaW5saW5lJyl9O1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIGZvbnQtc2l6ZTogJHt2YXJpYWJsZSgnZm9udFNpemVMYXJnZScpfTtcbiAgICBsaW5lLWhlaWdodDogMjAwJTtcbiAgICBtYXJnaW46IGNhbGMoJHt2YXJpYWJsZSgnc3BhY2luZycpfSAqIDIpIGNhbGMoJHt2YXJpYWJsZSgnc3BhY2luZycpfSAqIDIpO1xuYDtcblxuY29uc3QgU3R5bGVkR3JlZXRpbmcgPSBzdHlsZWQuZGl2YFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGNvbG9yOiAke3ZhcmlhYmxlKCdpbmZvQ29sb3InKX07XG4gICAgZm9udC1zaXplOiAke3ZhcmlhYmxlKCdmb250U2l6ZVhYTGFyZ2UnKX07XG5gO1xuXG5leHBvcnQgeyBTdHlsZWRDb250YWluZXIsIFN0eWxlZEdyZWV0aW5nIH07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///800\n")}});