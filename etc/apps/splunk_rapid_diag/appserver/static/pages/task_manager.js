!function(I){function C(C){for(var Q,A,U=C[0],s=C[1],l=C[2],c=0,i=[];c<U.length;c++)A=U[c],Object.prototype.hasOwnProperty.call(F,A)&&F[A]&&i.push(F[A][0]),F[A]=0;for(Q in s)Object.prototype.hasOwnProperty.call(s,Q)&&(I[Q]=s[Q]);for(e&&e(C);i.length;)i.shift()();return B.push.apply(B,l||[]),g()}function g(){for(var I,C=0;C<B.length;C++){for(var g=B[C],Q=!0,U=1;U<g.length;U++){var s=g[U];0!==F[s]&&(Q=!1)}Q&&(B.splice(C--,1),I=A(A.s=g[0]))}return I}var Q={},F={2:0},B=[];function A(C){if(Q[C])return Q[C].exports;var g=Q[C]={i:C,l:!1,exports:{}};return I[C].call(g.exports,g,g.exports,A),g.l=!0,g.exports}A.m=I,A.c=Q,A.d=function(I,C,g){A.o(I,C)||Object.defineProperty(I,C,{enumerable:!0,get:g})},A.r=function(I){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},A.t=function(I,C){if(1&C&&(I=A(I)),8&C)return I;if(4&C&&"object"==typeof I&&I&&I.__esModule)return I;var g=Object.create(null);if(A.r(g),Object.defineProperty(g,"default",{enumerable:!0,value:I}),2&C&&"string"!=typeof I)for(var Q in I)A.d(g,Q,function(C){return I[C]}.bind(null,Q));return g},A.n=function(I){var C=I&&I.__esModule?function(){return I.default}:function(){return I};return A.d(C,"a",C),C},A.o=function(I,C){return Object.prototype.hasOwnProperty.call(I,C)},A.p="";var U=window.webpackJsonp=window.webpackJsonp||[],s=U.push.bind(U);U.push=C,U=U.slice();for(var l=0;l<U.length;l++)C(U[l]);var e=s;B.push([801,0]),g()}({429:function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.themes = exports.lite = exports.enterprise = exports.mixin = exports.variable = undefined;\n\nvar _enterprise = __webpack_require__(185);\n\nvar _enterprise2 = _interopRequireDefault(_enterprise);\n\nvar _lite = __webpack_require__(186);\n\nvar _lite2 = _interopRequireDefault(_lite);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar variable = exports.variable = function variable(name) {\n  return function (props) {\n    return props.theme['splunk-rapid-diag'][name];\n  };\n};\nvar mixin = exports.mixin = function mixin(name) {\n  return function () {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return function (props) {\n      var _props$theme$splunkR;\n\n      return (_props$theme$splunkR = props.theme['splunk-rapid-diag'].mixins)[name].apply(_props$theme$splunkR, args);\n    };\n  };\n};\n\nvar enterprise = exports.enterprise = { 'splunk-rapid-diag': _enterprise2.default }; // prettier-ignore\nvar lite = exports.lite = { 'splunk-rapid-diag': _lite2.default }; // prettier-ignore\nvar themes = exports.themes = { enterprise: enterprise, lite: lite };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvcGFnZXMvdGFzay1tYW5hZ2VyL3RoZW1lcy5qcz80NWI5Il0sIm5hbWVzIjpbInZhcmlhYmxlIiwicHJvcHMiLCJ0aGVtZSIsIm5hbWUiLCJtaXhpbiIsImFyZ3MiLCJtaXhpbnMiLCJlbnRlcnByaXNlIiwiYmFzZUVudGVycHJpc2UiLCJsaXRlIiwiYmFzZUxpdGUiLCJ0aGVtZXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7Ozs7QUFFTyxJQUFNQSw4QkFBVyxTQUFYQSxRQUFXO0FBQUEsU0FBUTtBQUFBLFdBQVNDLE1BQU1DLEtBQU4sQ0FBWSxtQkFBWixFQUFpQ0MsSUFBakMsQ0FBVDtBQUFBLEdBQVI7QUFBQSxDQUFqQjtBQUNBLElBQU1DLHdCQUFRLFNBQVJBLEtBQVE7QUFBQSxTQUFRO0FBQUEsc0NBQUlDLElBQUo7QUFBSUEsVUFBSjtBQUFBOztBQUFBLFdBQWE7QUFBQTs7QUFBQSxhQUFTLDhCQUFNSCxLQUFOLENBQVksbUJBQVosRUFBaUNJLE1BQWpDLEVBQXdDSCxJQUF4Qyw4QkFBaURFLElBQWpELENBQVQ7QUFBQSxLQUFiO0FBQUEsR0FBUjtBQUFBLENBQWQ7O0FBRUEsSUFBTUUsa0NBQWEsRUFBRSxxQkFBcUJDLG9CQUF2QixFQUFuQixDLENBQTREO0FBQzVELElBQU1DLHNCQUFPLEVBQUUscUJBQXFCQyxjQUF2QixFQUFiLEMsQ0FBZ0Q7QUFDaEQsSUFBTUMsMEJBQVMsRUFBRUosc0JBQUYsRUFBY0UsVUFBZCxFQUFmIiwiZmlsZSI6IjQyOS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBiYXNlRW50ZXJwcmlzZSBmcm9tICdAc3BsdW5rL3RoZW1lcy9lbnRlcnByaXNlJztcbmltcG9ydCBiYXNlTGl0ZSBmcm9tICdAc3BsdW5rL3RoZW1lcy9saXRlJztcblxuZXhwb3J0IGNvbnN0IHZhcmlhYmxlID0gbmFtZSA9PiBwcm9wcyA9PiBwcm9wcy50aGVtZVsnc3BsdW5rLXJhcGlkLWRpYWcnXVtuYW1lXTtcbmV4cG9ydCBjb25zdCBtaXhpbiA9IG5hbWUgPT4gKC4uLmFyZ3MpID0+IHByb3BzID0+IHByb3BzLnRoZW1lWydzcGx1bmstcmFwaWQtZGlhZyddLm1peGluc1tuYW1lXSguLi5hcmdzKTtcblxuZXhwb3J0IGNvbnN0IGVudGVycHJpc2UgPSB7ICdzcGx1bmstcmFwaWQtZGlhZyc6IGJhc2VFbnRlcnByaXNlIH07IC8vIHByZXR0aWVyLWlnbm9yZVxuZXhwb3J0IGNvbnN0IGxpdGUgPSB7ICdzcGx1bmstcmFwaWQtZGlhZyc6IGJhc2VMaXRlIH07IC8vIHByZXR0aWVyLWlnbm9yZVxuZXhwb3J0IGNvbnN0IHRoZW1lcyA9IHsgZW50ZXJwcmlzZSwgbGl0ZSB9O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///429\n")},801:function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _jsxFileName = '/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/src/main/webapp/pages/task-manager/index.jsx';\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _react = __webpack_require__(0);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _styledComponents = __webpack_require__(4);\n\nvar _reactPage = __webpack_require__(128);\n\nvar _reactPage2 = _interopRequireDefault(_reactPage);\n\nvar _themes = __webpack_require__(8);\n\nvar _themes2 = __webpack_require__(135);\n\nvar _taskManager = __webpack_require__(802);\n\nvar _taskManager2 = _interopRequireDefault(_taskManager);\n\nvar _themes3 = __webpack_require__(814);\n\nvar _StartStyles = __webpack_require__(815);\n\nvar _themes4 = __webpack_require__(429);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar themeName = (0, _themes2.defaultTheme)();\nvar theme = _extends({}, _themes4.themes[themeName], _themes3.themes[themeName], _themes.themes[themeName]);\n(0, _reactPage2.default)(_react2.default.createElement(\n    _styledComponents.ThemeProvider,\n    { theme: theme, __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n        },\n        __self: undefined\n    },\n    _react2.default.createElement(\n        _StartStyles.StyledContainer,\n        {\n            __source: {\n                fileName: _jsxFileName,\n                lineNumber: 21\n            },\n            __self: undefined\n        },\n        _react2.default.createElement(_taskManager2.default, {\n            __source: {\n                fileName: _jsxFileName,\n                lineNumber: 22\n            },\n            __self: undefined\n        })\n    )\n));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvcGFnZXMvdGFzay1tYW5hZ2VyL2luZGV4LmpzeD82MTU1Il0sIm5hbWVzIjpbInRoZW1lTmFtZSIsInRoZW1lIiwiYXBwVGhlbWVzIiwiY29tcG9uZW50VGhlbWVzIiwicmVhY3RVaVRoZW1lcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7QUFFQTs7OztBQUNBOztBQUNBOztBQUVBOzs7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxJQUFNQSxZQUFZLDRCQUFsQjtBQUNBLElBQU1DLHFCQUNDQyxnQkFBVUYsU0FBVixDQURELEVBRUNHLGdCQUFnQkgsU0FBaEIsQ0FGRCxFQUdDSSxlQUFjSixTQUFkLENBSEQsQ0FBTjtBQUtBLHlCQUNJO0FBQUMsbUNBQUQ7QUFBQSxNQUFlLE9BQU9DLEtBQXRCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNJO0FBQUMsb0NBQUQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNJLHNDQUFDLHFCQUFEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBREo7QUFESixDQURKIiwiZmlsZSI6IjgwMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IFRoZW1lUHJvdmlkZXIgfSBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XHJcblxyXG5pbXBvcnQgbGF5b3V0IGZyb20gJ0BzcGx1bmsvcmVhY3QtcGFnZSc7XHJcbmltcG9ydCB7IHRoZW1lcyBhcyByZWFjdFVpVGhlbWVzIH0gZnJvbSAnQHNwbHVuay9yZWFjdC11aS90aGVtZXMnO1xyXG5pbXBvcnQgeyBkZWZhdWx0VGhlbWUgfSBmcm9tICdAc3BsdW5rL3NwbHVuay11dGlscy90aGVtZXMnO1xyXG5cclxuaW1wb3J0IFRhc2tNYW5hZ2VyIGZyb20gJ0BzcGx1bmsvdGFzay1tYW5hZ2VyJztcclxuaW1wb3J0IHsgdGhlbWVzIGFzIGNvbXBvbmVudFRoZW1lcyB9IGZyb20gJ0BzcGx1bmsvdGFzay1tYW5hZ2VyL3RoZW1lcyc7XHJcbmltcG9ydCB7IFN0eWxlZENvbnRhaW5lciB9IGZyb20gJy4vU3RhcnRTdHlsZXMnO1xyXG5pbXBvcnQgeyB0aGVtZXMgYXMgYXBwVGhlbWVzIH0gZnJvbSAnLi90aGVtZXMnO1xyXG5cclxuY29uc3QgdGhlbWVOYW1lID0gZGVmYXVsdFRoZW1lKCk7XHJcbmNvbnN0IHRoZW1lID0ge1xyXG4gICAgLi4uYXBwVGhlbWVzW3RoZW1lTmFtZV0sXHJcbiAgICAuLi5jb21wb25lbnRUaGVtZXNbdGhlbWVOYW1lXSxcclxuICAgIC4uLnJlYWN0VWlUaGVtZXNbdGhlbWVOYW1lXSxcclxufTtcclxubGF5b3V0KFxyXG4gICAgPFRoZW1lUHJvdmlkZXIgdGhlbWU9e3RoZW1lfT5cclxuICAgICAgICA8U3R5bGVkQ29udGFpbmVyPlxyXG4gICAgICAgICAgICA8VGFza01hbmFnZXIgLz5cclxuICAgICAgICA8L1N0eWxlZENvbnRhaW5lcj5cclxuICAgIDwvVGhlbWVQcm92aWRlcj5cclxuKTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///801\n")},802:function(module,exports,__webpack_require__){"use strict";eval('\n\nvar _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };\n\nmodule.exports =\n/******/function (modules) {\n    // webpackBootstrap\n    /******/ // The module cache\n    /******/var installedModules = {};\n    /******/\n    /******/ // The require function\n    /******/function __webpack_require__(moduleId) {\n        /******/\n        /******/ // Check if module is in cache\n        /******/if (installedModules[moduleId]) {\n            /******/return installedModules[moduleId].exports;\n            /******/\n        }\n        /******/ // Create a new module (and put it into the cache)\n        /******/var module = installedModules[moduleId] = {\n            /******/i: moduleId,\n            /******/l: false,\n            /******/exports: {}\n            /******/ };\n        /******/\n        /******/ // Execute the module function\n        /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n        /******/ // Flag the module as loaded\n        /******/module.l = true;\n        /******/\n        /******/ // Return the exports of the module\n        /******/return module.exports;\n        /******/\n    }\n    /******/\n    /******/\n    /******/ // expose the modules object (__webpack_modules__)\n    /******/__webpack_require__.m = modules;\n    /******/\n    /******/ // expose the module cache\n    /******/__webpack_require__.c = installedModules;\n    /******/\n    /******/ // define getter function for harmony exports\n    /******/__webpack_require__.d = function (exports, name, getter) {\n        /******/if (!__webpack_require__.o(exports, name)) {\n            /******/Object.defineProperty(exports, name, { enumerable: true, get: getter });\n            /******/\n        }\n        /******/\n    };\n    /******/\n    /******/ // define __esModule on exports\n    /******/__webpack_require__.r = function (exports) {\n        /******/if (typeof Symbol !== \'undefined\' && Symbol.toStringTag) {\n            /******/Object.defineProperty(exports, Symbol.toStringTag, { value: \'Module\' });\n            /******/\n        }\n        /******/Object.defineProperty(exports, \'__esModule\', { value: true });\n        /******/\n    };\n    /******/\n    /******/ // create a fake namespace object\n    /******/ // mode & 1: value is a module id, require it\n    /******/ // mode & 2: merge all properties of value into the ns\n    /******/ // mode & 4: return value when already ns object\n    /******/ // mode & 8|1: behave like require\n    /******/__webpack_require__.t = function (value, mode) {\n        /******/if (mode & 1) value = __webpack_require__(value);\n        /******/if (mode & 8) return value;\n        /******/if (mode & 4 && (typeof value === \'undefined\' ? \'undefined\' : _typeof(value)) === \'object\' && value && value.__esModule) return value;\n        /******/var ns = Object.create(null);\n        /******/__webpack_require__.r(ns);\n        /******/Object.defineProperty(ns, \'default\', { enumerable: true, value: value });\n        /******/if (mode & 2 && typeof value != \'string\') for (var key in value) {\n            __webpack_require__.d(ns, key, function (key) {\n                return value[key];\n            }.bind(null, key));\n        } /******/return ns;\n        /******/\n    };\n    /******/\n    /******/ // getDefaultExport function for compatibility with non-harmony modules\n    /******/__webpack_require__.n = function (module) {\n        /******/var getter = module && module.__esModule ?\n        /******/function getDefault() {\n            return module[\'default\'];\n        } :\n        /******/function getModuleExports() {\n            return module;\n        };\n        /******/__webpack_require__.d(getter, \'a\', getter);\n        /******/return getter;\n        /******/\n    };\n    /******/\n    /******/ // Object.prototype.hasOwnProperty.call\n    /******/__webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n    };\n    /******/\n    /******/ // __webpack_public_path__\n    /******/__webpack_require__.p = "";\n    /******/\n    /******/\n    /******/ // Load entry module and return exports\n    /******/return __webpack_require__(__webpack_require__.s = 43);\n    /******/\n}(\n/************************************************************************/\n/******/[\n/* 0 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(0);\n\n    /***/\n},\n/* 1 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(2);\n\n    /***/\n},\n/* 2 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n\n    var _extends = Object.assign || function (target) {\n        for (var i = 1; i < arguments.length; i++) {\n            var source = arguments[i];for (var key in source) {\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }return target;\n    };\n\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/step-wizard/src/components/CollectorCard/CollectorCard.jsx";\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _Card = __webpack_require__(7);\n\n    var _Card2 = _interopRequireDefault(_Card);\n\n    var _Success = __webpack_require__(76);\n\n    var _Success2 = _interopRequireDefault(_Success);\n\n    var _propTypes = __webpack_require__(1);\n\n    var _propTypes2 = _interopRequireDefault(_propTypes);\n\n    var _descriptions = __webpack_require__(77);\n\n    var _ErrorModal = __webpack_require__(30);\n\n    var _ErrorModal2 = _interopRequireDefault(_ErrorModal);\n\n    var _JSON_KEY_BINDINGS = __webpack_require__(11);\n\n    var _CollectorCardStyles = __webpack_require__(78);\n\n    var CollectorCardStyles = _interopRequireWildcard(_CollectorCardStyles);\n\n    var _PopOverText = __webpack_require__(21);\n\n    var _PopOverText2 = _interopRequireDefault(_PopOverText);\n\n    function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n            return obj;\n        } else {\n            var newObj = {};if (obj != null) {\n                for (var key in obj) {\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n                }\n            }newObj.default = obj;return newObj;\n        }\n    }\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError("Cannot call a class as a function");\n        }\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n        }return call && ((typeof call === \'undefined\' ? \'undefined\' : _typeof(call)) === "object" || typeof call === "function") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== "function" && superClass !== null) {\n            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === \'undefined\' ? \'undefined\' : _typeof(superClass)));\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var CollectorCard = function (_Component) {\n        _inherits(CollectorCard, _Component);\n\n        function CollectorCard() {\n            var _ref,\n                _this2 = this;\n\n            var _temp, _this, _ret;\n\n            _classCallCheck(this, CollectorCard);\n\n            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n            }\n\n            return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CollectorCard.__proto__ || Object.getPrototypeOf(CollectorCard)).call.apply(_ref, [this].concat(args))), _this), _this.handleClick = function (e, _ref2) {\n                var value = _ref2.value;\n\n                /**\n                 * Click outside modal generates `Click Away` event.\n                 * Event is used for stopping propagation of click event.\n                 *\n                 * @info : `stopImmediatePropagation`\n                 * If several listeners are attached to the same element for the same event type, they are called in the order in which they were added.\n                 * If stopImmediatePropagation() is invoked during one such call, no remaining listeners will be called.\n                 *\n                 * @info : `stopPropagation`\n                 * The stopPropagation() method of the Event interface prevents further propagation of the current event in the capturing and bubbling phases.\n                 */\n                if (e.target.nodeName === "DIV" && e.target.className.match(/ModalLayerStyles__StyledClickAwayOverlay/g) !== null) {\n                    e.stopPropagation();\n                    try {\n                        e.stopImmediatePropagation();\n                    } catch (err) {}\n                } else {\n                    var tempState = Object.assign({}, _this.props.collectorObj);\n                    tempState.selected = !tempState.selected;\n                    _this.props.handler(_this.props.name, [tempState]);\n                }\n            }, _this.handleDisable = function () {\n                var tempState = Object.assign({}, _this.props.collectorObj);\n                tempState.selected = false;\n                _this.props.handler(_this.props.name, [tempState]);\n            }, _this.isCardSelected = function (cardSelected) {\n                return cardSelected ? _react2.default.createElement(_Success2.default, { size: "24px", __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 78\n                    },\n                    __self: _this2\n                }) : _react2.default.createElement("div", { style: { marginTop: "24px" }, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 78\n                    },\n                    __self: _this2\n                });\n            }, _temp), _possibleConstructorReturn(_this, _ret);\n        }\n\n        _createClass(CollectorCard, [{\n            key: "render",\n            value: function render() {\n                var _props = this.props,\n                    name = _props.name,\n                    id = _props.id,\n                    availMatrix = _props.availMatrix,\n                    collectorObj = _props.collectorObj,\n                    search_debug = _props.search_debug,\n                    isReview = _props.isReview;\n\n                var triggerChildren = name === "log_monitor" || name === "resource_monitor";\n                var selected = collectorObj.selected;\n\n                var isSearchDebug = search_debug.filter(function (collector) {\n                    return collector.selected === true;\n                }).length > 0;\n                var disabled = !!(availMatrix.runningCollectors[name] || availMatrix.unavailableUtilities[name]);\n                var disableSearchResult = isSearchDebug && name === "search_result";\n                var customStyle = CollectorCardStyles.card;\n                if (this.props.customStyle) {\n                    customStyle = _extends({}, customStyle, this.props.customStyle);\n                }\n\n                var clickHandler = isReview || this.props.disabled ? "" : disabled || disableSearchResult ? this.handleDisable : this.handleClick;\n\n                return _react2.default.createElement(_Card2.default, {\n                    key: id,\n                    value: name,\n                    onClick: clickHandler,\n                    selected: selected && !disabled,\n                    style: customStyle,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 97\n                    },\n                    __self: this\n                }, _react2.default.createElement(_Card2.default.Header, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 104\n                    },\n                    __self: this\n                }, _react2.default.createElement("div", { style: CollectorCardStyles.cardHeader, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 105\n                    },\n                    __self: this\n                }, _JSON_KEY_BINDINGS.KEY_BINDING[name]), _react2.default.createElement("div", { style: { textAlign: "left" }, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 106\n                    },\n                    __self: this\n                }, !isSearchDebug && name === "resource_monitor" ? _react2.default.createElement(_PopOverText2.default, {\n                    dialogueBoxStyle: { padding: "20px", width: "800px" },\n                    help: this.props.helpInfo,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 108\n                    },\n                    __self: this\n                }) : null), _react2.default.createElement("div", { style: CollectorCardStyles.cardDisable, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 114\n                    },\n                    __self: this\n                }, disabled ? _react2.default.createElement(_ErrorModal2.default, { availMatrix: availMatrix, collector: name, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 116\n                    },\n                    __self: this\n                }) : disableSearchResult ? null : this.isCardSelected(collectorObj.selected && !this.props.disabled))), _react2.default.createElement(_Card2.default.Body, { style: CollectorCardStyles.cardBody, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 122\n                    },\n                    __self: this\n                }, _react2.default.createElement("div", {\n                    style: disabled || disableSearchResult || disabled ? CollectorCardStyles.disabledCard : CollectorCardStyles.enabledCard,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 123\n                    },\n                    __self: this\n                }, _descriptions.descriptions[name], _react2.default.createElement("div", { style: triggerChildren ? CollectorCardStyles.triggerCardChildren : CollectorCardStyles.cardChildren, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 131\n                    },\n                    __self: this\n                }, this.props.children))));\n            }\n        }]);\n\n        return CollectorCard;\n    }(_react.Component);\n\n    CollectorCard.propTypes = {\n        /**\n         * name: name of collector\n         */\n        name: _propTypes2.default.string.isRequired,\n\n        /**\n         * collectorObj: Collector object\n         */\n        collectorObj: _propTypes2.default.object.isRequired,\n\n        /**\n         * handler: call back function to pass data to parent component\n         */\n        handler: _propTypes2.default.func.isRequired,\n\n        /**\n         * unique key for each `CollectorCard`\n         */\n        id: _propTypes2.default.number.isRequired,\n\n        /**\n         * availMatrix: object with information of `runningCollectors` and `unavailableUtilities`.\n         */\n        availMatrix: _propTypes2.default.object.isRequired,\n\n        /**\n         * disabled: is card disabled.\n         */\n        disabled: _propTypes2.default.bool\n    };\n\n    CollectorCard.defaultProps = {\n        isReview: false,\n        disabled: false\n    };\n\n    exports.default = CollectorCard;\n\n    /***/\n},\n/* 3 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(5);\n\n    /***/\n},\n/* 4 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(136);\n\n    /***/\n},\n/* 5 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(58);\n\n    /***/\n},\n/* 6 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(4);\n\n    /***/\n},\n/* 7 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(223);\n\n    /***/\n},\n/* 8 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(222);\n\n    /***/\n},\n/* 9 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    exports.selectHeaderStyle = exports.refreshButtonStyle = exports.StyleButton = undefined;\n\n    var _templateObject = _taggedTemplateLiteral(["\\n    border: 0;\\n    border-radius: 100%;\\n    background-color: #ffffff\\n    color: #5f6368;\\n\\n    &: hover:enabled {\\n        background-color: rgba(0,0,0,.12);\\n        color: #202124;\\n    }\\n\\n    &: focus:enabled {;\\n        outline: none;\\n        border-color: #ffffff;\\n        color: #5f6368;\\n        box-shadow: none;\\n    }\\n\\n"], ["\\n    border: 0;\\n    border-radius: 100%;\\n    background-color: #ffffff\\n    color: #5f6368;\\n\\n    &: hover:enabled {\\n        background-color: rgba(0,0,0,.12);\\n        color: #202124;\\n    }\\n\\n    &: focus:enabled {;\\n        outline: none;\\n        border-color: #ffffff;\\n        color: #5f6368;\\n        box-shadow: none;\\n    }\\n\\n"]);\n\n    var _Button = __webpack_require__(5);\n\n    var _Button2 = _interopRequireDefault(_Button);\n\n    var _styledComponents = __webpack_require__(6);\n\n    var _styledComponents2 = _interopRequireDefault(_styledComponents);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _taggedTemplateLiteral(strings, raw) {\n        return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));\n    }\n\n    var StyleButton = exports.StyleButton = (0, _styledComponents2.default)(_Button2.default)(_templateObject);\n\n    var refreshButtonStyle = exports.refreshButtonStyle = { paddingLeft: "10px", fontSize: "x-large" };\n\n    var selectHeaderStyle = exports.selectHeaderStyle = { paddingLeft: "5px", fontSize: "large", paddingTop: "7px" };\n\n    /***/\n},\n/* 10 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(218);\n\n    /***/\n},\n/* 11 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var KEY_BINDING = exports.KEY_BINDING = {\n        system_call_trace: "System Call Trace",\n        stack_trace: "Stack Trace",\n        network_packet: "Network Packet",\n        search_result: "Search Result",\n        splunk_diag: "Splunk Diag",\n        iops: "IOPS",\n        netstat: "Netstat",\n        ps: "PS",\n        lsof: "LSOF",\n        interval: "Period(sec)",\n        sampleCount: "Number of Samples",\n        process: "Process",\n        collection_time: "Collection Time(sec)",\n        port: "Port",\n        ip_address: "IP Address",\n        search_query: "Search Query",\n        selectedFile: "Selected File",\n        regex: "Regex",\n        searchRegex: "Search Regex",\n        search_regex: "Search Regex",\n        invert: "Invert",\n        cpu: "CPU Usage(%)",\n        physical_memory: "Physical Memory(MB)",\n        virtual_memory: "Virtual Memory(MB)",\n        single_run: "Single Run",\n        periodic_run: "Periodic Run",\n        periodic: "Periodic Run",\n        log_monitor: "Log Monitor",\n        resource_monitor: "Resource Monitor",\n        template_tasks: "Task Templates",\n        historical_tasks: "Historical Collections",\n        searchDebug: "Search Debug",\n        search_debug: "Search Debug"\n    };\n\n    /***/\n},\n/* 12 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(225);\n\n    /***/\n},\n/* 13 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(87);\n\n    /***/\n},\n/* 14 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    exports.generateToast = exports.axiosGetCall = undefined;\n\n    var _axios = __webpack_require__(35);\n\n    var _axios2 = _interopRequireDefault(_axios);\n\n    var _config = __webpack_require__(36);\n\n    var _url = __webpack_require__(4);\n\n    var _Toaster = __webpack_require__(37);\n\n    var _Toaster2 = _interopRequireDefault(_Toaster);\n\n    var _ToastConstants = __webpack_require__(38);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    var createToast = (0, _Toaster.makeCreateToast)(_Toaster2.default);\n\n    var axiosGetCall = function axiosGetCall(url, params) {\n\n        var actionURL = (0, _url.createRESTURL)(url);\n        var message = "";\n        return _axios2.default.get(actionURL, {\n            params: params,\n            credentials: "include",\n            headers: {\n                "X-Splunk-Form-Key": _config.CSRFToken,\n                "X-Requested-With": "XMLHttpRequest",\n                "Content-Type": "application/json"\n            }\n        }).catch(function (error) {\n            // Error\n            if (error.response) {\n                // The request was made and the server responded with a status code\n                throw error.response;\n            } else if (error.request) {\n                // The request was made but no response was received\n                console.error(error);\n                message = "Error making request to " + url;\n                generateToast(message);\n            } else {\n                // Something happened in setting up the request that triggered an Error\n                console.log("Error", error.message);\n            }\n        });\n    };\n\n    var generateToast = function generateToast(message) {\n        createToast({\n            type: _ToastConstants.TOAST_TYPES.ERROR,\n            message: message,\n            autoDismiss: true,\n            dismissOnActionClick: true,\n            showAction: false\n        });\n    };\n\n    exports.axiosGetCall = axiosGetCall;\n    exports.generateToast = generateToast;\n\n    /***/\n},\n/* 15 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/step-wizard/src/components/NumberInput/NumberInput.jsx";\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _propTypes = __webpack_require__(1);\n\n    var _propTypes2 = _interopRequireDefault(_propTypes);\n\n    var _Number = __webpack_require__(39);\n\n    var _Number2 = _interopRequireDefault(_Number);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError("Cannot call a class as a function");\n        }\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n        }return call && ((typeof call === \'undefined\' ? \'undefined\' : _typeof(call)) === "object" || typeof call === "function") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== "function" && superClass !== null) {\n            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === \'undefined\' ? \'undefined\' : _typeof(superClass)));\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var NumberInput = function (_Component) {\n        _inherits(NumberInput, _Component);\n\n        function NumberInput() {\n            var _ref;\n\n            var _temp, _this, _ret;\n\n            _classCallCheck(this, NumberInput);\n\n            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n            }\n\n            return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = NumberInput.__proto__ || Object.getPrototypeOf(NumberInput)).call.apply(_ref, [this].concat(args))), _this), _this.handleChange = function (e, _ref2) {\n                var name = _ref2.name,\n                    value = _ref2.value;\n\n                var tempState = Object.assign({}, _this.props.collectorObj);\n                tempState[name] = value;\n                _this.props.handler(_this.props.collectorName, [tempState]);\n            }, _this.handleClick = function (e) {\n                var _this$props = _this.props,\n                    collectorObj = _this$props.collectorObj,\n                    handler = _this$props.handler;\n\n                if (!collectorObj.selected) {\n                    var tempState = Object.assign({}, _this.props.collectorObj);\n                    tempState.selected = true;\n                    handler(_this.props.collectorName, [tempState]);\n                } else {\n                    e.stopPropagation();\n                }\n            }, _temp), _possibleConstructorReturn(_this, _ret);\n        }\n\n        _createClass(NumberInput, [{\n            key: "render",\n            value: function render() {\n                var _props = this.props,\n                    name = _props.name,\n                    min = _props.min,\n                    placeholder = _props.placeholder,\n                    style = _props.style,\n                    roundTo = _props.roundTo,\n                    collectorObj = _props.collectorObj;\n\n                var disabled = !collectorObj.selected;\n                return _react2.default.createElement(_Number2.default, {\n                    name: name,\n                    value: collectorObj[name],\n                    min: min,\n                    roundTo: roundTo,\n                    placeholder: placeholder,\n                    onChange: this.handleChange,\n                    onClick: this.handleClick,\n                    disabled: disabled,\n                    style: style,\n                    inline: true,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 70\n                    },\n                    __self: this\n                });\n            }\n        }]);\n\n        return NumberInput;\n    }(_react.Component);\n\n    NumberInput.propTypes = {\n        /**\n         * name: name of field\n         */\n        name: _propTypes2.default.string.isRequired,\n\n        /**\n         * collectorObj: collector object\n         */\n        collectorObj: _propTypes2.default.object,\n\n        /**\n         * min: Minimum value allowed\n         */\n        min: _propTypes2.default.number.isRequired,\n\n        /**\n         * collectorName: name of collector\n         */\n        collectorName: _propTypes2.default.string.isRequired,\n\n        /**\n         * placeholder: Placeholder for textbox\n         */\n        placeholder: _propTypes2.default.string.isRequired,\n\n        /**\n         * style: css style object\n         */\n        style: _propTypes2.default.object,\n        /**\n         * handler: call back function to pass data to parent component\n         */\n        handler: _propTypes2.default.func.isRequired,\n\n        roundTo: _propTypes2.default.number\n    };\n    NumberInput.defaultProps = {\n        roundTo: 5\n    };\n    exports.default = NumberInput;\n\n    /***/\n},\n/* 16 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/step-wizard/src/components/TextInput/TextInput.jsx";\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _propTypes = __webpack_require__(1);\n\n    var _propTypes2 = _interopRequireDefault(_propTypes);\n\n    var _Text = __webpack_require__(13);\n\n    var _Text2 = _interopRequireDefault(_Text);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError("Cannot call a class as a function");\n        }\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n        }return call && ((typeof call === \'undefined\' ? \'undefined\' : _typeof(call)) === "object" || typeof call === "function") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== "function" && superClass !== null) {\n            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === \'undefined\' ? \'undefined\' : _typeof(superClass)));\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    } /* eslint-disable no-undef */\n\n    var SPACE_KEY = 32;\n\n    var TextInput = function (_Component) {\n        _inherits(TextInput, _Component);\n\n        function TextInput() {\n            var _ref;\n\n            var _temp, _this, _ret;\n\n            _classCallCheck(this, TextInput);\n\n            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n            }\n\n            return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TextInput.__proto__ || Object.getPrototypeOf(TextInput)).call.apply(_ref, [this].concat(args))), _this), _this.handleChange = function (e, _ref2) {\n                var name = _ref2.name,\n                    value = _ref2.value;\n\n                var tempState = Object.assign({}, _this.props.collectorObj);\n                tempState[name] = value;\n                _this.props.handler(_this.props.cardName, [tempState]);\n            }, _this.handleClick = function (e) {\n                var _this$props = _this.props,\n                    collectorObj = _this$props.collectorObj,\n                    handler = _this$props.handler,\n                    cardName = _this$props.cardName;\n\n                if (!collectorObj.selected) {\n                    handler(cardName, true);\n                } else {\n                    e.stopPropagation();\n                }\n            }, _this.handleSpace = function (e) {\n                if (e.keyCode === SPACE_KEY) {\n                    e.preventDefault();\n                }\n            }, _temp), _possibleConstructorReturn(_this, _ret);\n        }\n\n        _createClass(TextInput, [{\n            key: "componentDidMount",\n            value: function componentDidMount() {\n                document.addEventListener("keyup", this.handleSpace, false);\n            }\n        }, {\n            key: "componentWillUnmount",\n            value: function componentWillUnmount() {\n                document.removeEventListener("keyup", this.handleSpace, false);\n            }\n        }, {\n            key: "render",\n            value: function render() {\n                var _props = this.props,\n                    name = _props.name,\n                    multiline = _props.multiline,\n                    placeholder = _props.placeholder,\n                    style = _props.style,\n                    collectorObj = _props.collectorObj;\n\n                var disabled = !collectorObj.selected;\n                return _react2.default.createElement(_Text2.default, {\n                    name: name,\n                    multiline: multiline,\n                    value: collectorObj[name],\n                    placeholder: placeholder,\n                    onChange: this.handleChange,\n                    onClick: this.props.disabled ? "" : this.handleClick,\n                    onKeyPress: this.handleSpace,\n                    disabled: disabled || this.props.disabled,\n                    style: style,\n                    inline: true,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 78\n                    },\n                    __self: this\n                });\n            }\n        }]);\n\n        return TextInput;\n    }(_react.Component);\n\n    TextInput.propTypes = {\n        /**\n         * name: name of field\n         */\n        name: _propTypes2.default.string.isRequired,\n\n        /**\n         * collectorObj: collector object\n         */\n        collectorObj: _propTypes2.default.object,\n\n        /**\n         * cardName: name of card\n         */\n        cardName: _propTypes2.default.string.isRequired,\n\n        /**\n         * multiline: Textbox is single-line or multi-line\n         */\n        multiline: _propTypes2.default.bool,\n\n        /**\n         * placeholder: Placeholder for textbox\n         */\n        placeholder: _propTypes2.default.string,\n\n        /**\n         * style: css style object\n         */\n        style: _propTypes2.default.object,\n        /**\n         * handler: call back function to pass data to parent component\n         */\n        handler: _propTypes2.default.func.isRequired\n    };\n\n    TextInput.defaultProps = {\n        disabled: false\n    };\n\n    exports.default = TextInput;\n\n    /***/\n},\n/* 17 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    exports.themes = exports.lite = exports.enterprise = exports.mixin = exports.variable = undefined;\n\n    var _enterprise = __webpack_require__(18);\n\n    var _enterprise2 = _interopRequireDefault(_enterprise);\n\n    var _lite = __webpack_require__(19);\n\n    var _lite2 = _interopRequireDefault(_lite);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    var getTheme = function getTheme(props) {\n        return props.theme && props.theme[\'task-manager\'] ? props.theme[\'task-manager\'] : _enterprise2.default;\n    }; // prettier-ignore\n    var variable = exports.variable = function variable(name) {\n        return function (props) {\n            return getTheme(props)[name];\n        };\n    };\n    var mixin = exports.mixin = function mixin(name) {\n        return function () {\n            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n            }\n\n            return function (props) {\n                var _getTheme$mixins;\n\n                return (_getTheme$mixins = getTheme(props).mixins)[name].apply(_getTheme$mixins, args);\n            };\n        };\n    };\n\n    var enterprise = exports.enterprise = { \'task-manager\': _enterprise2.default }; // prettier-ignore\n    var lite = exports.lite = { \'task-manager\': _lite2.default }; // prettier-ignore\n    var themes = exports.themes = { enterprise: enterprise, lite: lite };\n\n    /***/\n},\n/* 18 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(296);\n\n    /***/\n},\n/* 19 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(299);\n\n    /***/\n},\n/* 20 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(6);\n\n    /***/\n},\n/* 21 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var _jsxFileName = \'/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/components/PopOverText/PopOverText.jsx\';\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _TaskCatalougeHeaderStyles = __webpack_require__(9);\n\n    var _Popover = __webpack_require__(63);\n\n    var _Popover2 = _interopRequireDefault(_Popover);\n\n    var _InfoCircle = __webpack_require__(33);\n\n    var _InfoCircle2 = _interopRequireDefault(_InfoCircle);\n\n    var _Warning = __webpack_require__(64);\n\n    var _Warning2 = _interopRequireDefault(_Warning);\n\n    var _PopOverTextStyles = __webpack_require__(65);\n\n    var _Markdown = __webpack_require__(34);\n\n    var _Markdown2 = _interopRequireDefault(_Markdown);\n\n    var _propTypes = __webpack_require__(1);\n\n    var _propTypes2 = _interopRequireDefault(_propTypes);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError("Cannot call a class as a function");\n        }\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n        }return call && ((typeof call === \'undefined\' ? \'undefined\' : _typeof(call)) === "object" || typeof call === "function") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== "function" && superClass !== null) {\n            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === \'undefined\' ? \'undefined\' : _typeof(superClass)));\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var PopOverText = function (_Component) {\n        _inherits(PopOverText, _Component);\n\n        function PopOverText(props, context) {\n            _classCallCheck(this, PopOverText);\n\n            var _this = _possibleConstructorReturn(this, (PopOverText.__proto__ || Object.getPrototypeOf(PopOverText)).call(this, props, context));\n\n            _this.handleMount = function (component) {\n                _this.setState({\n                    anchor: component\n                });\n            };\n\n            _this.handleOpen = function (e) {\n                if (!_this.state.open) {\n                    _this.setState({\n                        open: true\n                    });\n                }\n                e.stopPropagation();\n            };\n\n            _this.handleRequestClose = function () {\n                _this.setState({\n                    open: false\n                });\n            };\n\n            _this.state = {\n                open: false,\n                anchor: null\n            };\n            return _this;\n        }\n\n        _createClass(PopOverText, [{\n            key: \'render\',\n            value: function render() {\n                var _state = this.state,\n                    anchor = _state.anchor,\n                    open = _state.open;\n\n                return _react2.default.createElement(_react.Fragment, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 49\n                    },\n                    __self: this\n                }, _react2.default.createElement(_TaskCatalougeHeaderStyles.StyleButton, {\n                    id: this.props.id,\n                    icon: this.props.type && this.props.type === \'warning\' ? _react2.default.createElement(_Warning2.default, { style: _PopOverTextStyles.warningIconStyle, __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 52\n                        },\n                        __self: this\n                    }) : _react2.default.createElement(_InfoCircle2.default, { style: _PopOverTextStyles.iconStyle, __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 52\n                        },\n                        __self: this\n                    }),\n                    appearance: \'pill\',\n                    onClick: this.handleOpen,\n                    ref: this.handleMount,\n                    style: this.props.buttonStyle, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 50\n                    },\n                    __self: this\n                }), _react2.default.createElement(_Popover2.default, {\n                    open: open,\n                    anchor: anchor,\n                    onRequestClose: this.handleRequestClose,\n                    appearance: \'light\',\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 57\n                    },\n                    __self: this\n                }, _react2.default.createElement(\'div\', { style: this.props.dialogueBoxStyle, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 63\n                    },\n                    __self: this\n                }, _react2.default.createElement(_Markdown2.default, { text: this.props.help, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 63\n                    },\n                    __self: this\n                }))));\n            }\n        }]);\n\n        return PopOverText;\n    }(_react.Component);\n\n    PopOverText.defaultProps = {\n        buttonStyle: { marginTop: -6 + \'px\' },\n        dialogueBoxStyle: _PopOverTextStyles.dialogueBoxStyle\n    };\n\n    PopOverText.propTypes = {\n        buttonStyle: _propTypes2.default.object,\n        dialogueBoxStyle: _propTypes2.default.object\n    };\n\n    exports.default = PopOverText;\n\n    /***/\n},\n/* 22 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n    /* WEBPACK VAR INJECTION */\n    (function (process) {\n\n        Object.defineProperty(exports, "__esModule", {\n            value: true\n        });\n        exports.ProcessSelector = undefined;\n        var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/step-wizard/src/components/ProcessSelector/ProcessSelector.jsx";\n\n        var _slicedToArray = function () {\n            function sliceIterator(arr, i) {\n                var _arr = [];var _n = true;var _d = false;var _e = undefined;try {\n                    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n                        _arr.push(_s.value);if (i && _arr.length === i) break;\n                    }\n                } catch (err) {\n                    _d = true;_e = err;\n                } finally {\n                    try {\n                        if (!_n && _i["return"]) _i["return"]();\n                    } finally {\n                        if (_d) throw _e;\n                    }\n                }return _arr;\n            }return function (arr, i) {\n                if (Array.isArray(arr)) {\n                    return arr;\n                } else if (Symbol.iterator in Object(arr)) {\n                    return sliceIterator(arr, i);\n                } else {\n                    throw new TypeError("Invalid attempt to destructure non-iterable instance");\n                }\n            };\n        }();\n\n        var _createClass = function () {\n            function defineProperties(target, props) {\n                for (var i = 0; i < props.length; i++) {\n                    var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n                }\n            }return function (Constructor, protoProps, staticProps) {\n                if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n            };\n        }();\n\n        var _lodash = __webpack_require__(20);\n\n        var _react = __webpack_require__(0);\n\n        var _react2 = _interopRequireDefault(_react);\n\n        var _Table = __webpack_require__(73);\n\n        var _Table2 = _interopRequireDefault(_Table);\n\n        var _TabLayout = __webpack_require__(74);\n\n        var _TabLayout2 = _interopRequireDefault(_TabLayout);\n\n        var _Button = __webpack_require__(5);\n\n        var _Button2 = _interopRequireDefault(_Button);\n\n        var _Modal = __webpack_require__(8);\n\n        var _Modal2 = _interopRequireDefault(_Modal);\n\n        var _i18n = __webpack_require__(3);\n\n        var _url = __webpack_require__(4);\n\n        var _Text = __webpack_require__(13);\n\n        var _Text2 = _interopRequireDefault(_Text);\n\n        var _Refresh = __webpack_require__(23);\n\n        var _Refresh2 = _interopRequireDefault(_Refresh);\n\n        var _RadioBar = __webpack_require__(75);\n\n        var _RadioBar2 = _interopRequireDefault(_RadioBar);\n\n        var _Loader = __webpack_require__(24);\n\n        var _Loader2 = _interopRequireDefault(_Loader);\n\n        var _CommonService = __webpack_require__(14);\n\n        function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n        }\n\n        function _toConsumableArray(arr) {\n            if (Array.isArray(arr)) {\n                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n                    arr2[i] = arr[i];\n                }return arr2;\n            } else {\n                return Array.from(arr);\n            }\n        }\n\n        function _classCallCheck(instance, Constructor) {\n            if (!(instance instanceof Constructor)) {\n                throw new TypeError("Cannot call a class as a function");\n            }\n        }\n\n        function _possibleConstructorReturn(self, call) {\n            if (!self) {\n                throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n            }return call && ((typeof call === \'undefined\' ? \'undefined\' : _typeof(call)) === "object" || typeof call === "function") ? call : self;\n        }\n\n        function _inherits(subClass, superClass) {\n            if (typeof superClass !== "function" && superClass !== null) {\n                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === \'undefined\' ? \'undefined\' : _typeof(superClass)));\n            }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n        }\n\n        var filteredOtherProcesses = [];\n        var filteredSearchProcesses = [];\n\n        var processParams = ["pid", "ppid", "name", "process_type", "args"];\n        var otherNonSplunkProcesses = [];\n        var otherSplunkProcesses = [];\n        var typingTimer = 0;\n        var DONE_TYPING_INTERVAL = 700;\n        var ESCAPE_KEY = 27;\n\n        var ProcessSelector = exports.ProcessSelector = function (_Component) {\n            _inherits(ProcessSelector, _Component);\n\n            function ProcessSelector(props) {\n                var _this2 = this;\n\n                _classCallCheck(this, ProcessSelector);\n\n                var _this = _possibleConstructorReturn(this, (ProcessSelector.__proto__ || Object.getPrototypeOf(ProcessSelector)).call(this, props));\n\n                _this.getAllProcesses = function (data) {\n                    var _this$state = _this.state,\n                        mode = _this$state.mode,\n                        buttonText = _this$state.buttonText,\n                        otherProcesses = _this$state.otherProcesses,\n                        processFilter = _this$state.processFilter;\n\n                    _this.showLoader();\n                    otherNonSplunkProcesses = [];\n                    otherSplunkProcesses = [];\n                    var searchProcesses = [];\n                    var _iteratorNormalCompletion = true;\n                    var _didIteratorError = false;\n                    var _iteratorError = undefined;\n\n                    try {\n                        for (var _iterator = Object.entries(data)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                            var _ref = _step.value;\n\n                            var _ref2 = _slicedToArray(_ref, 2);\n\n                            var key = _ref2[0];\n                            var proc = _ref2[1];\n\n                            process = JSON.parse(proc);\n                            if (process.process !== undefined) {\n                                searchProcesses.push(process);\n                            } else if (JSON.stringify(process.process_type).toLowerCase().indexOf("splunk") !== -1) {\n                                otherSplunkProcesses.push(process);\n                            } else {\n                                otherNonSplunkProcesses.push(process);\n                            }\n                        }\n                    } catch (err) {\n                        _didIteratorError = true;\n                        _iteratorError = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion && _iterator.return) {\n                                _iterator.return();\n                            }\n                        } finally {\n                            if (_didIteratorError) {\n                                throw _iteratorError;\n                            }\n                        }\n                    }\n\n                    _this.handleFilterModeChange(mode);\n                    _this.setState({ buttonText: buttonText });\n                    _this.setState({ searchProcesses: searchProcesses });\n                    filteredOtherProcesses = otherProcesses;\n                    filteredSearchProcesses = searchProcesses;\n                    if (processFilter !== "" || processFilter === null) {\n                        _this.filterProcesses(processFilter);\n                    }\n                    _this.hideLoader();\n                };\n\n                _this.handleRequestClose = function () {\n                    _this.setState({ open: false });\n                };\n\n                _this.handleRequestOpen = function (e) {\n                    e.stopPropagation();\n                    _this.handleFilterModeChange(_this.state.mode);\n                    _this.setState({ open: true });\n                };\n\n                _this.handleProcessClick = function (e, data) {\n                    var _this$props = _this.props,\n                        collectorName = _this$props.collectorName,\n                        collectorObj = _this$props.collectorObj,\n                        handler = _this$props.handler;\n\n                    if (_this.disableProcessRow(data)) {\n                        return null;\n                    }\n                    if (data.search) {\n                        data.search = data.search;\n                        data.process.args = data.process.args;\n                        data.__class__ = "rapid_diag.process_abstraction.SearchProcess";\n                        data.process.__class__ = "rapid_diag.process_abstraction.Process";\n                    } else {\n                        data.__class__ = "rapid_diag.process_abstraction.Process";\n                        data.args = data.args;\n                    }\n                    _this.setState({ buttonText: _this.getButtonText(data) });\n\n                    var tempState = Object.assign({}, collectorObj);\n                    tempState.process = data;\n                    handler(collectorName, [tempState]);\n\n                    _this.handleRequestClose(e);\n                };\n\n                _this.getButtonText = function (data) {\n                    if (data.process !== undefined) {\n                        return data.process.process_type + " (" + data.process.pid + ")";\n                    }\n                    return data.name + " - " + data.process_type + " (" + data.pid + ")";\n                };\n\n                _this.getProcessColumns = function (columns) {\n                    return columns.map(function (column) {\n                        return _react2.default.createElement(_Table2.default.HeadCell, {\n                            __source: {\n                                fileName: _jsxFileName,\n                                lineNumber: 143\n                            },\n                            __self: _this2\n                        }, column);\n                    });\n                };\n\n                _this.setRowValues = function (row, processType) {\n                    var rowValues = [];\n                    var columnNames = processParams;\n                    if (processType === "search") {\n                        if (_this.state.mode === "SimpleMode") {\n                            columnNames = ["root_sid", "running_user", "search", "savedsearch_name"];\n                        } else {\n                            var _iteratorNormalCompletion2 = true;\n                            var _didIteratorError2 = false;\n                            var _iteratorError2 = undefined;\n\n                            try {\n                                for (var _iterator2 = columnNames[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                                    var row_id = _step2.value;\n\n                                    rowValues.push(_react2.default.createElement(_Table2.default.Cell, { key: row_id === null ? "" : row_id, __source: {\n                                            fileName: _jsxFileName,\n                                            lineNumber: 154\n                                        },\n                                        __self: _this2\n                                    }, " ", row.process[row_id], " "));\n                                }\n                            } catch (err) {\n                                _didIteratorError2 = true;\n                                _iteratorError2 = err;\n                            } finally {\n                                try {\n                                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                                        _iterator2.return();\n                                    }\n                                } finally {\n                                    if (_didIteratorError2) {\n                                        throw _iteratorError2;\n                                    }\n                                }\n                            }\n\n                            columnNames = ["root_sid", "running_user", "running_app", "search", "savedsearch_name", "owning_user", "owning_app"];\n                        }\n                    } else if (_this.state.mode === "SimpleMode") {\n                        columnNames = ["pid", "name", "process_type"];\n                    }\n\n                    var _iteratorNormalCompletion3 = true;\n                    var _didIteratorError3 = false;\n                    var _iteratorError3 = undefined;\n\n                    try {\n                        for (var _iterator3 = columnNames[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                            var _row_id = _step3.value;\n\n                            rowValues.push(_react2.default.createElement(_Table2.default.Cell, { key: _row_id === null ? "" : _row_id, __source: {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 176\n                                },\n                                __self: _this2\n                            }, " ", row[_row_id], " "));\n                        }\n                    } catch (err) {\n                        _didIteratorError3 = true;\n                        _iteratorError3 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                                _iterator3.return();\n                            }\n                        } finally {\n                            if (_didIteratorError3) {\n                                throw _iteratorError3;\n                            }\n                        }\n                    }\n\n                    return rowValues;\n                };\n\n                _this.handleSortOtherProcess = function (e, _ref3) {\n                    var sortKey = _ref3.sortKey;\n\n                    _this.setState(function (state) {\n                        var prevSortKey = state.otherProcessSortKey;\n                        var prevSortDir = prevSortKey === state.otherProcessSortKey ? state.otherProcessSortDir : "none";\n                        var nextSortDir = prevSortDir === "asc" ? "desc" : "asc";\n                        return {\n                            sortKey: sortKey,\n                            otherProcessSortDir: nextSortDir\n                        };\n                    });\n                };\n\n                _this.handleSortSearchProcess = function (e, _ref4) {\n                    var sortKey = _ref4.sortKey;\n\n                    _this.setState(function (state) {\n                        var prevSortKey = state.searchProcessSortKey;\n                        var prevSortDir = prevSortKey === state.searchProcessSortKey ? state.searchProcessSortDir : "none";\n                        var nextSortDir = prevSortDir === "asc" ? "desc" : "asc";\n                        return {\n                            sortKey: sortKey,\n                            searchProcessSortDir: nextSortDir\n                        };\n                    });\n                };\n\n                _this.handleEscapeClick = function (e) {\n                    if (e.keyCode === ESCAPE_KEY) {\n                        _this.handleRequestClose(e);\n                    }\n                };\n\n                _this.filterSearch = function (process, value) {\n                    return JSON.stringify(Object.values(process)).toLowerCase().indexOf(value.toLowerCase()) !== -1;\n                };\n\n                _this.handleFilterChange = function (e, _ref5) {\n                    var value = _ref5.value;\n\n                    _this.setState({ processFilter: value });\n                    clearTimeout(typingTimer);\n                    typingTimer = setTimeout(function () {\n                        _this.filterProcesses(_this.state.processFilter);\n                        _this.forceUpdate();\n                    }, DONE_TYPING_INTERVAL);\n                };\n\n                _this.filterProcesses = function (value) {\n                    var _this$state2 = _this.state,\n                        otherProcesses = _this$state2.otherProcesses,\n                        searchProcesses = _this$state2.searchProcesses;\n\n                    filteredOtherProcesses = otherProcesses.filter(function (process) {\n                        return _this.filterSearch(process, value);\n                    });\n                    filteredSearchProcesses = searchProcesses.filter(function (process) {\n                        return _this.filterSearch(process, value);\n                    });\n                };\n\n                _this.handleModeChange = function (e, _ref6) {\n                    var value = _ref6.value;\n\n                    _this.setState({ mode: value });\n                    _this.handleFilterModeChange(value);\n                };\n\n                _this.setTableHeaders = function (processType) {\n                    if (processType === "search") {\n                        return _this.state.mode === "SimpleMode" ? [{ searchProcessSortKey: "root_sid", label: "Root SID" }, { searchProcessSortKey: "running_user", label: "Running User" }, { searchProcessSortKey: "search", label: "Search" }, { searchProcessSortKey: "savedsearch_name", label: "SavedSearch Name" }] : [{ searchProcessSortKey: "pid", label: "PID" }, { searchProcessSortKey: "ppid", label: "PPID" }, { searchProcessSortKey: "name", label: "Name" }, { searchProcessSortKey: "process_type", label: "Process Type" }, { searchProcessSortKey: "args", label: "Arguments" }, { searchProcessSortKey: "root_sid", label: "Root SID" }, { searchProcessSortKey: "running_user", label: "Running User" }, { searchProcessSortKey: "running_app", label: "Running App" }, { searchProcessSortKey: "search", label: "Search" }, { searchProcessSortKey: "savedsearch_name", label: "SavedSearch Name" }, { searchProcessSortKey: "owning_user", label: "Owning User" }, { searchProcessSortKey: "owning_app", label: "Owning App" }];\n                    }\n                    return _this.state.mode === "SimpleMode" ? [{ otherProcessSortKey: "pid", label: "PID" }, { otherProcessSortKey: "name", label: "Name" }, { otherProcessSortKey: "process_type", label: "Process Type" }] : [{ otherProcessSortKey: "pid", label: "PID" }, { otherProcessSortKey: "ppid", label: "PPID" }, { otherProcessSortKey: "name", label: "Name" }, { otherProcessSortKey: "process_type", label: "Process Type" }, { otherProcessSortKey: "args", label: "Arguments" }];\n                };\n\n                _this.handleClick = function (e) {\n                    e.stopPropagation();\n                    try {\n                        e.stopImmediatePropagation();\n                    } catch (err) {}\n                };\n\n                _this.handleFilterModeChange = function (mode) {\n                    var otherProcesses = otherSplunkProcesses;\n\n                    if (mode === "SimpleMode") {\n                        _this.setState({ otherProcesses: otherProcesses });\n                    } else if (mode === "AdvancedMode") {\n                        otherProcesses = [].concat(_toConsumableArray(otherProcesses), _toConsumableArray(otherNonSplunkProcesses));\n\n                        _this.setState({ otherProcesses: otherProcesses });\n                    }\n\n                    filteredOtherProcesses = otherProcesses.filter(function (process) {\n                        return _this.filterSearch(process, _this.state.processFilter);\n                    }).map(function (process) {\n                        return process;\n                    });\n                };\n\n                _this.disableProcessRow = function (row) {\n                    var _this$props2 = _this.props,\n                        collectorName = _this$props2.collectorName,\n                        stack_trace = _this$props2.stack_trace,\n                        system_call_trace = _this$props2.system_call_trace;\n\n                    var disableSystemCallRow = collectorName === "system_call_trace" && stack_trace.filter(function (collector) {\n                        return collector.selected === true;\n                    }).length > 0 && stack_trace.filter(function (collector) {\n                        return (0, _lodash.isEqual)(row, collector.process);\n                    }).length > 0;\n                    var disableStackTraceRow = collectorName === "stack_trace" && system_call_trace.filter(function (collector) {\n                        return collector.selected === true;\n                    }).length > 0 && system_call_trace.filter(function (collector) {\n                        return (0, _lodash.isEqual)(row, collector.process);\n                    }).length > 0;\n\n                    return disableSystemCallRow || disableStackTraceRow;\n                };\n\n                _this.renderRadioBar = function () {\n                    return _react2.default.createElement("div", { style: { maxWidth: "50%", marginLeft: "50%" }, __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 309\n                        },\n                        __self: _this2\n                    }, _react2.default.createElement(_RadioBar2.default, { onChange: _this.handleModeChange, value: _this.state.mode, __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 310\n                        },\n                        __self: _this2\n                    }, _react2.default.createElement(_RadioBar2.default.Option, { value: "SimpleMode", label: "Simple Mode", __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 311\n                        },\n                        __self: _this2\n                    }), _react2.default.createElement(_RadioBar2.default.Option, { value: "AdvancedMode", label: "Advanced Mode", __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 312\n                        },\n                        __self: _this2\n                    })));\n                };\n\n                _this.handleRefresh = function () {\n                    var _this$state3 = _this.state,\n                        cluster = _this$state3.cluster,\n                        selectedIndexers = _this$state3.selectedIndexers;\n                    var _this$props3 = _this.props,\n                        handler = _this$props3.handler,\n                        processData = _this$props3.processData;\n\n                    var peers = cluster ? selectedIndexers : [];\n                    var getProcessUrl = (0, _url.createRESTURL)("rapid_diag/get_process_info?output_mode=json");\n                    var params = { peers: JSON.stringify(peers) };\n                    _this.showLoader();\n                    (0, _CommonService.axiosGetCall)(getProcessUrl, params).then(function (responseJson) {\n                        handler("processData", responseJson.data);\n                        _this.getAllProcesses(responseJson.data);\n                    }).catch(function (error) {\n                        // eslint-disable-next-line no-console\n                        console.error(error);\n                        _this.hideLoader();\n                    });\n                };\n\n                _this.state = {\n                    collectorObj: _this.props.collectorObj,\n                    buttonText: "Select a process...",\n                    open: _this.props.open,\n                    mode: "SimpleMode",\n                    otherProcesses: [],\n                    searchProcesses: [],\n                    selectedIndexers: _this.props.selectedIndexers,\n                    cluster: _this.props.cluster,\n                    searchProcessSortKey: "pid",\n                    searchProcessSortDir: "none",\n                    otherProcessSortKey: "pid",\n                    otherProcessSortDir: "none",\n                    processFilter: "",\n                    loader: _this.props.loader,\n                    processData: _this.props.processData\n                };\n                return _this;\n            }\n\n            _createClass(ProcessSelector, [{\n                key: "componentDidMount",\n                value: function componentDidMount() {\n                    this.getAllProcesses(this.props.processData);\n                    if (this.props.collectorObj.process && this.props.collectorObj.process !== null && this.props.search_debug.filter(function (collector) {\n                        return collector.selected === true;\n                    }).length === 0) {\n                        this.setState({ buttonText: this.getButtonText(this.props.collectorObj.process) });\n                    }\n                }\n            }, {\n                key: "componentWillReceiveProps",\n                value: function componentWillReceiveProps(nextProps) {\n                    // const tempState = {...this.props.collectorObj};\n                    // tempState.process = nextProps.collectorObj.process;\n                    // this.setState({ [this.props.collectorName]: tempState });\n\n                    this.setState({ loader: nextProps.loader });\n                    if (this.props.processData !== nextProps.processData) {\n                        this.setState({ processData: nextProps.processData });\n                        this.getAllProcesses(nextProps.processData);\n                    }\n                }\n            }, {\n                key: "componentDidUpdate",\n                value: function componentDidUpdate(prevProps, prevState) {\n                    if (this.state.processData !== prevState.processData) {\n                        this.getAllProcesses(this.state.processData);\n                    }\n                }\n\n                // stringify the values of process object and check if it\'s there in our keyword\n\n            }, {\n                key: "showLoader",\n                value: function showLoader() {\n                    this.setState({ loader: true });\n                }\n            }, {\n                key: "hideLoader",\n                value: function hideLoader() {\n                    this.setState({ loader: false });\n                }\n            }, {\n                key: "render",\n                value: function render() {\n                    var _this3 = this;\n\n                    var _state = this.state,\n                        sortKey = _state.sortKey,\n                        searchProcessSortDir = _state.searchProcessSortDir,\n                        otherProcessSortDir = _state.otherProcessSortDir,\n                        loader = _state.loader,\n                        buttonText = _state.buttonText,\n                        open = _state.open,\n                        processFilter = _state.processFilter;\n                    var _props = this.props,\n                        search_debug = _props.search_debug,\n                        collectorObj = _props.collectorObj;\n\n                    var disabled = !collectorObj.selected || search_debug.filter(function (collector) {\n                        return collector.selected === true;\n                    }).length > 0;\n                    return _react2.default.createElement(_react.Fragment, {\n                        __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 349\n                        },\n                        __self: this\n                    }, _react2.default.createElement(_Button2.default, {\n                        inline: true,\n                        onClick: this.handleRequestOpen,\n                        label: buttonText,\n                        disabled: disabled,\n                        style: { width: "47%", whiteSpace: "nowrap", wordWrap: "break-word" },\n                        __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 350\n                        },\n                        __self: this\n                    }), _react2.default.createElement(_Modal2.default, {\n                        enablePeek: true,\n                        onRequestClose: this.handleRequestClose,\n                        onClick: this.handleClick,\n                        open: open,\n                        onKeyDown: this.handleEscapeClick,\n                        style: { width: "600px", maxHeight: "800px", zIndex: 1500 },\n                        __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 357\n                        },\n                        __self: this\n                    }, _react2.default.createElement(_Modal2.default.Header, {\n                        title: _react2.default.createElement("div", {\n                            __source: {\n                                fileName: _jsxFileName,\n                                lineNumber: 367\n                            },\n                            __self: this\n                        }, "Select Process", _react2.default.createElement(_Button2.default, {\n                            icon: _react2.default.createElement(_Refresh2.default, { style: { width: 15 + "px", height: 15 + "px" }, __source: {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 370\n                                },\n                                __self: this\n                            }),\n                            appearance: "pill",\n                            onClick: this.handleRefresh,\n                            style: { marginLeft: "63%", marginTop: "-5px" },\n                            __source: {\n                                fileName: _jsxFileName,\n                                lineNumber: 369\n                            },\n                            __self: this\n                        })),\n                        onRequestClose: this.handleRequestClose,\n                        __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 365\n                        },\n                        __self: this\n                    }), _react2.default.createElement(_Modal2.default.Body, {\n                        __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 379\n                        },\n                        __self: this\n                    }, _react2.default.createElement(_Text2.default, {\n                        appearance: "search",\n                        canClear: true,\n                        placeholder: "filter",\n                        autoFocus: true,\n                        value: processFilter,\n                        onChange: this.handleFilterChange,\n                        style: { maxWidth: 100 + "%" },\n                        __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 380\n                        },\n                        __self: this\n                    }), _react2.default.createElement(_TabLayout2.default, { defaultActivePanelId: "normal", iconSize: "small", __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 389\n                        },\n                        __self: this\n                    }, _react2.default.createElement(_TabLayout2.default.Panel, { label: "Normal Process", panelId: "normal", __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 390\n                        },\n                        __self: this\n                    }, this.renderRadioBar(), _react2.default.createElement("div", {\n                        __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 392\n                        },\n                        __self: this\n                    }, _react2.default.createElement(_Table2.default, { stripeRows: true, headType: "fixed", innerStyle: { maxHeight: 250 }, __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 393\n                        },\n                        __self: this\n                    }, _react2.default.createElement(_Table2.default.Head, {\n                        __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 394\n                        },\n                        __self: this\n                    }, this.setTableHeaders("other").map(function (headData) {\n                        return _react2.default.createElement(_Table2.default.HeadCell, {\n                            key: headData.otherProcessSortKey,\n                            onSort: _this3.handleSortOtherProcess,\n                            sortKey: headData.otherProcessSortKey,\n                            sortDir: headData.otherProcessSortKey === sortKey ? otherProcessSortDir : "none",\n                            __source: {\n                                fileName: _jsxFileName,\n                                lineNumber: 396\n                            },\n                            __self: _this3\n                        }, headData.label);\n                    })), _react2.default.createElement(_Table2.default.Body, {\n                        __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 410\n                        },\n                        __self: this\n                    }, !loader && filteredOtherProcesses.length > 0 && filteredOtherProcesses.sort(function (rowA, rowB) {\n                        if (otherProcessSortDir === "asc") {\n                            return rowA[sortKey] > rowB[sortKey] ? 1 : -1;\n                        }\n                        if (otherProcessSortDir === "desc") {\n                            return rowB[sortKey] > rowA[sortKey] ? 1 : -1;\n                        }\n                        return 0;\n                    }).map(function (row) {\n                        return _react2.default.createElement(_Table2.default.Row, {\n                            key: row.pid,\n                            onClick: _this3.handleProcessClick,\n                            style: { opacity: _this3.disableProcessRow(row) ? 0.5 : 1 },\n                            data: row,\n                            disabled: _this3.disableProcessRow(row),\n                            __source: {\n                                fileName: _jsxFileName,\n                                lineNumber: 428\n                            },\n                            __self: _this3\n                        }, _this3.setRowValues(row, "other"));\n                    }))), _react2.default.createElement("div", { style: { marginLeft: "50%" }, __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 441\n                        },\n                        __self: this\n                    }, _react2.default.createElement(_Loader2.default, { load: loader, __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 442\n                        },\n                        __self: this\n                    })))), _react2.default.createElement(_TabLayout2.default.Panel, { label: "Search Process", panelId: "search", __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 446\n                        },\n                        __self: this\n                    }, this.renderRadioBar(), _react2.default.createElement("div", {\n                        __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 448\n                        },\n                        __self: this\n                    }, _react2.default.createElement(_Table2.default, { stripeRows: true, __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 449\n                        },\n                        __self: this\n                    }, _react2.default.createElement(_Table2.default.Head, {\n                        __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 450\n                        },\n                        __self: this\n                    }, this.setTableHeaders("search").map(function (headData) {\n                        return _react2.default.createElement(_Table2.default.HeadCell, {\n                            key: headData.searchProcessSortKey,\n                            onSort: _this3.handleSortSearchProcess,\n                            sortKey: headData.searchProcessSortKey,\n                            sortDir: headData.searchProcessSortKey === sortKey ? searchProcessSortDir : "none",\n                            __source: {\n                                fileName: _jsxFileName,\n                                lineNumber: 452\n                            },\n                            __self: _this3\n                        }, headData.label);\n                    })), _react2.default.createElement(_Table2.default.Body, {\n                        __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 466\n                        },\n                        __self: this\n                    }, !loader && filteredSearchProcesses.length > 0 && filteredSearchProcesses.sort(function (rowA, rowB) {\n                        if (searchProcessSortDir === "asc") {\n                            if (processParams.indexOf(sortKey) !== -1) {\n                                return rowA.process[sortKey] > rowB.process[sortKey] ? 1 : -1;\n                            }\n                            return rowA[sortKey] > rowB[sortKey] ? 1 : -1;\n                        }\n                        if (searchProcessSortDir === "desc") {\n                            if (processParams.indexOf(sortKey) !== -1) {\n                                return rowB.process[sortKey] > rowA.process[sortKey] ? 1 : -1;\n                            }\n                            return rowB[sortKey] > rowA[sortKey] ? 1 : -1;\n                        }\n                        return 0;\n                    }).map(function (row) {\n                        return _react2.default.createElement(_Table2.default.Row, {\n                            key: row.process.pid,\n                            onClick: _this3.handleProcessClick,\n                            style: { opacity: _this3.disableProcessRow(row) ? 0.5 : 1 },\n                            data: row,\n                            disabled: _this3.disableProcessRow(row),\n                            __source: {\n                                fileName: _jsxFileName,\n                                lineNumber: 502\n                            },\n                            __self: _this3\n                        }, _this3.setRowValues(row, "search"));\n                    }))), _react2.default.createElement("div", { style: { marginLeft: "50%" }, __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 514\n                        },\n                        __self: this\n                    }, _react2.default.createElement(_Loader2.default, { load: loader, __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 515\n                        },\n                        __self: this\n                    })), !loader && filteredSearchProcesses.length === 0 ? _react2.default.createElement("div", {\n                        __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 518\n                        },\n                        __self: this\n                    }, "No Processes Found.") : ""))))));\n                }\n            }]);\n\n            return ProcessSelector;\n        }(_react.Component);\n        /* WEBPACK VAR INJECTION */\n    }).call(this, __webpack_require__(72));\n\n    /***/\n},\n/* 23 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(156);\n\n    /***/\n},\n/* 24 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var _jsxFileName = \'/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/components/Loader/Loader.jsx\';\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _WaitSpinner = __webpack_require__(48);\n\n    var _WaitSpinner2 = _interopRequireDefault(_WaitSpinner);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    var Loader = function Loader(props) {\n        return props.load ? _react2.default.createElement(_WaitSpinner2.default, { size: \'medium\', __source: {\n                fileName: _jsxFileName,\n                lineNumber: 5\n            },\n            __self: undefined\n        }) : null;\n    };\n\n    exports.default = Loader;\n\n    /***/\n},\n/* 25 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(245);\n\n    /***/\n},\n/* 26 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/step-wizard/src/components/DefinitionList/DefinitionList.jsx";\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _DefinitionList = __webpack_require__(27);\n\n    var _DefinitionList2 = _interopRequireDefault(_DefinitionList);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function DefinitionList(props) {\n        if (props.description !== undefined && props.description !== "") {\n            return _react2.default.createElement(_react.Fragment, {\n                __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 7\n                },\n                __self: this\n            }, _react2.default.createElement(_DefinitionList2.default, { termWidth: 250, style: { paddingLeft: "30px", cursor: "inherit" }, __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 8\n                },\n                __self: this\n            }, _react2.default.createElement(_DefinitionList2.default.Term, {\n                __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 9\n                },\n                __self: this\n            }, props.term), _react2.default.createElement(_DefinitionList2.default.Description, {\n                __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 10\n                },\n                __self: this\n            }, props.description)));\n        }\n        return null;\n    }\n\n    exports.default = DefinitionList;\n\n    /***/\n},\n/* 27 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(226);\n\n    /***/\n},\n/* 28 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(224);\n\n    /***/\n},\n/* 29 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    exports.PencilStyle = exports.StyledHeaderTitle = exports.StyledHeader = exports.StyledReview = exports.cardStyle = undefined;\n\n    var _templateObject = _taggedTemplateLiteral(["\\n    float: right;\\n    margin-right: 3px;\\n    visibility: hidden;\\n"], ["\\n    float: right;\\n    margin-right: 3px;\\n    visibility: hidden;\\n"]),\n        _templateObject2 = _taggedTemplateLiteral(["\\n    padding-bottom: 5px;\\n    &:hover {\\n        background-color: #ebeef3;\\n        border-radius: 10px;\\n        cursor: pointer !important;\\n        ", " {\\n        visibility: visible;\\n        }\\n    }\\n"], ["\\n    padding-bottom: 5px;\\n    &:hover {\\n        background-color: #ebeef3;\\n        border-radius: 10px;\\n        cursor: pointer !important;\\n        ", " {\\n        visibility: visible;\\n        }\\n    }\\n"]),\n        _templateObject3 = _taggedTemplateLiteral(["\\n    padding: 10px 20px 20px 20px;\\n    line-height: 20px;\\n    display: inline-block;\\n"], ["\\n    padding: 10px 20px 20px 20px;\\n    line-height: 20px;\\n    display: inline-block;\\n"]),\n        _templateObject4 = _taggedTemplateLiteral(["\\n    font-weight: 500;\\n    font-size: 16px;\\n    margin: 0px;\\n"], ["\\n    font-weight: 500;\\n    font-size: 16px;\\n    margin: 0px;\\n"]);\n\n    var _styledComponents = __webpack_require__(6);\n\n    var _styledComponents2 = _interopRequireDefault(_styledComponents);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _taggedTemplateLiteral(strings, raw) {\n        return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));\n    }\n\n    var cardStyle = {\n        margin: 10 + "px",\n        border: 0,\n        boxShadow: "0 6px 20px 0 rgba(92,192,92, 0.38)",\n        borderRadius: 10 + "px",\n        flexWrap: "flex",\n        minWidth: "48%",\n        maxWidth: "48%"\n    };\n\n    var PencilStyle = _styledComponents2.default.div(_templateObject);\n\n    var StyledReview = _styledComponents2.default.div(_templateObject2, PencilStyle);\n\n    var StyledHeader = _styledComponents2.default.div(_templateObject3);\n\n    var StyledHeaderTitle = _styledComponents2.default.h1(_templateObject4);\n\n    exports.cardStyle = cardStyle;\n    exports.StyledReview = StyledReview;\n    exports.StyledHeader = StyledHeader;\n    exports.StyledHeaderTitle = StyledHeaderTitle;\n    exports.PencilStyle = PencilStyle;\n\n    /***/\n},\n/* 30 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/step-wizard/src/components/ErrorModal/ErrorModal.jsx";\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _propTypes = __webpack_require__(1);\n\n    var _propTypes2 = _interopRequireDefault(_propTypes);\n\n    var _Modal = __webpack_require__(8);\n\n    var _Modal2 = _interopRequireDefault(_Modal);\n\n    var _Button = __webpack_require__(5);\n\n    var _Button2 = _interopRequireDefault(_Button);\n\n    var _Message = __webpack_require__(12);\n\n    var _Message2 = _interopRequireDefault(_Message);\n\n    var _List = __webpack_require__(31);\n\n    var _List2 = _interopRequireDefault(_List);\n\n    var _Error = __webpack_require__(32);\n\n    var _Error2 = _interopRequireDefault(_Error);\n\n    var _JSON_KEY_BINDINGS = __webpack_require__(11);\n\n    var _ErrorModalStyles = __webpack_require__(62);\n\n    var ErrorModalStyles = _interopRequireWildcard(_ErrorModalStyles);\n\n    function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n            return obj;\n        } else {\n            var newObj = {};if (obj != null) {\n                for (var key in obj) {\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n                }\n            }newObj.default = obj;return newObj;\n        }\n    }\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError("Cannot call a class as a function");\n        }\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n        }return call && ((typeof call === \'undefined\' ? \'undefined\' : _typeof(call)) === "object" || typeof call === "function") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== "function" && superClass !== null) {\n            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === \'undefined\' ? \'undefined\' : _typeof(superClass)));\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var ErrorModal = function (_Component) {\n        _inherits(ErrorModal, _Component);\n\n        function ErrorModal(props) {\n            var _this2 = this;\n\n            _classCallCheck(this, ErrorModal);\n\n            var _this = _possibleConstructorReturn(this, (ErrorModal.__proto__ || Object.getPrototypeOf(ErrorModal)).call(this, props));\n\n            _this.getPeers = function (peers) {\n                return _react2.default.createElement(_List2.default, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 31\n                    },\n                    __self: _this2\n                }, peers.map(function (peer) {\n                    return _react2.default.createElement(_List2.default.Item, { key: peer, __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 31\n                        },\n                        __self: _this2\n                    }, peer);\n                }));\n            };\n\n            _this.getRunningCollectors = function (runningCollectors) {\n                return runningCollectors === undefined ? null : _react2.default.createElement("div", { style: ErrorModalStyles.runningCollectorStyle, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 35\n                    },\n                    __self: _this2\n                }, _react2.default.createElement(_Message2.default, { type: "error", __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 36\n                    },\n                    __self: _this2\n                }, "This collector is already running on following instance(s): "), _this.getPeers(runningCollectors));\n            };\n\n            _this.getUnavailabilityDescriptions = function (unavailableUtilities) {\n                var reasons = [];\n                for (var reason in unavailableUtilities) {\n                    var unavailable = Object.values(unavailableUtilities[reason]);\n                    reasons.push(_react2.default.createElement("div", { key: reason, style: ErrorModalStyles.unavailableUtilityStyle, __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 48\n                        },\n                        __self: _this2\n                    }, _react2.default.createElement(_Message2.default, { type: "error", __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 49\n                        },\n                        __self: _this2\n                    }, reason + " on following instance(s): "), _this.getPeers(unavailable)));\n                }\n                return reasons;\n            };\n\n            _this.handleRequestOpen = function () {\n                _this.setState({\n                    open: true\n                });\n            };\n\n            _this.handleRequestClose = function () {\n                _this.setState({\n                    open: false\n                });\n            };\n\n            _this.state = {\n                open: false\n            };\n            return _this;\n        }\n\n        _createClass(ErrorModal, [{\n            key: "render",\n            value: function render() {\n                var _props = this.props,\n                    availMatrix = _props.availMatrix,\n                    collector = _props.collector;\n\n                var note = "  Please deselect the above mentioned instance(s) to continue using this collector.";\n\n                return _react2.default.createElement(_react.Fragment, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 75\n                    },\n                    __self: this\n                }, _react2.default.createElement(_Button2.default, {\n                    id: "errorModalButton",\n                    icon: _react2.default.createElement(_Error2.default, { style: ErrorModalStyles.errorIconStyle, __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 78\n                        },\n                        __self: this\n                    }),\n                    appearance: "pill",\n                    size: "large",\n                    style: { marginTop: -6 + "px" },\n                    onClick: this.handleRequestOpen,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 76\n                    },\n                    __self: this\n                }), _react2.default.createElement(_Modal2.default, {\n                    id: "errorModal",\n                    onRequestClose: this.handleRequestClose,\n                    open: this.state.open,\n                    style: { width: "1200px" },\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 84\n                    },\n                    __self: this\n                }, _react2.default.createElement(_Modal2.default.Header, {\n                    title: "" + _JSON_KEY_BINDINGS.KEY_BINDING[collector],\n                    onRequestClose: this.handleRequestClose,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 90\n                    },\n                    __self: this\n                }), _react2.default.createElement(_Modal2.default.Body, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 94\n                    },\n                    __self: this\n                }, this.getUnavailabilityDescriptions(availMatrix.unavailableUtilities[collector]), this.getRunningCollectors(availMatrix.runningCollectors[collector])), _react2.default.createElement(_Modal2.default.Footer, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 100\n                    },\n                    __self: this\n                }, _react2.default.createElement("div", { style: ErrorModalStyles.footerNoteStyle, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 101\n                    },\n                    __self: this\n                }, _react2.default.createElement("pre", { style: ErrorModalStyles.fontStyle, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 102\n                    },\n                    __self: this\n                }, _react2.default.createElement("b", {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 103\n                    },\n                    __self: this\n                }, "Note:"), note)))));\n            }\n        }]);\n\n        return ErrorModal;\n    }(_react.Component);\n\n    ErrorModal.propTypes = {\n        /**\n         * availMatrix: object with information of `runningCollectors` and `unavailableUtilities`.\n         */\n        availMatrix: _propTypes2.default.object.isRequired,\n\n        /**\n         * collector: name of collector\n         */\n        collector: _propTypes2.default.string.isRequired\n    };\n    exports.default = ErrorModal;\n\n    /***/\n},\n/* 31 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(151);\n\n    /***/\n},\n/* 32 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(75);\n\n    /***/\n},\n/* 33 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(74);\n\n    /***/\n},\n/* 34 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(232);\n\n    /***/\n},\n/* 35 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(153);\n\n    /***/\n},\n/* 36 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(101);\n\n    /***/\n},\n/* 37 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(105);\n\n    /***/\n},\n/* 38 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(147);\n\n    /***/\n},\n/* 39 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(244);\n\n    /***/\n},\n/* 40 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(88);\n\n    /***/\n},\n/* 41 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(228);\n\n    /***/\n},\n/* 42 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(106);\n\n    /***/\n},\n/* 43 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var _jsxFileName = \'/build/nurse/splunk_rapid_diag/appserver/src/packages/task-manager/src/Container.jsx\';\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _TaskManager = __webpack_require__(44);\n\n    var _TaskManager2 = _interopRequireDefault(_TaskManager);\n\n    var _ErrorBoundary = __webpack_require__(115);\n\n    var _ErrorBoundary2 = _interopRequireDefault(_ErrorBoundary);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    var Container = function Container(props) {\n        return _react2.default.createElement(\'div\', {\n            __source: {\n                fileName: _jsxFileName,\n                lineNumber: 6\n            },\n            __self: undefined\n        }, _react2.default.createElement(_ErrorBoundary2.default, { id: \'errorBoundry\', __source: {\n                fileName: _jsxFileName,\n                lineNumber: 7\n            },\n            __self: undefined\n        }, _react2.default.createElement(_TaskManager2.default, {\n            __source: {\n                fileName: _jsxFileName,\n                lineNumber: 8\n            },\n            __self: undefined\n        })));\n    };\n\n    exports.default = Container;\n\n    /***/\n},\n/* 44 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n\n    var _extends = Object.assign || function (target) {\n        for (var i = 1; i < arguments.length; i++) {\n            var source = arguments[i];for (var key in source) {\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }return target;\n    };\n\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/task-manager/src/TaskManager.jsx";\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _Refresh = __webpack_require__(23);\n\n    var _Refresh2 = _interopRequireDefault(_Refresh);\n\n    var _url = __webpack_require__(4);\n\n    var _ToastMessages = __webpack_require__(45);\n\n    var _ToastMessages2 = _interopRequireDefault(_ToastMessages);\n\n    var _Paginator = __webpack_require__(46);\n\n    var _Paginator2 = _interopRequireDefault(_Paginator);\n\n    var _TaskManagerStyles = __webpack_require__(47);\n\n    var TaskManagerStyles = _interopRequireWildcard(_TaskManagerStyles);\n\n    var _Loader = __webpack_require__(24);\n\n    var _Loader2 = _interopRequireDefault(_Loader);\n\n    var _TaskRow = __webpack_require__(49);\n\n    var _TaskRow2 = _interopRequireDefault(_TaskRow);\n\n    var _taskExtraction = __webpack_require__(104);\n\n    var _taskExtraction2 = _interopRequireDefault(_taskExtraction);\n\n    var _CommonService = __webpack_require__(14);\n\n    var _Helper = __webpack_require__(106);\n\n    var _Helper2 = _interopRequireDefault(_Helper);\n\n    var _TaskManagerHeader = __webpack_require__(108);\n\n    var _TaskManagerHeader2 = _interopRequireDefault(_TaskManagerHeader);\n\n    var _TaskCatalougeHeaderStyles = __webpack_require__(9);\n\n    var _SearchBar = __webpack_require__(112);\n\n    var _SearchBar2 = _interopRequireDefault(_SearchBar);\n\n    var _searchTasks = __webpack_require__(114);\n\n    function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n            return obj;\n        } else {\n            var newObj = {};if (obj != null) {\n                for (var key in obj) {\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n                }\n            }newObj.default = obj;return newObj;\n        }\n    }\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError("Cannot call a class as a function");\n        }\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n        }return call && ((typeof call === \'undefined\' ? \'undefined\' : _typeof(call)) === "object" || typeof call === "function") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== "function" && superClass !== null) {\n            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === \'undefined\' ? \'undefined\' : _typeof(superClass)));\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var TASK_PER_PAGE = 10;\n\n    var TaskManager = function (_Component) {\n        _inherits(TaskManager, _Component);\n\n        function TaskManager(props) {\n            _classCallCheck(this, TaskManager);\n\n            var _this = _possibleConstructorReturn(this, (TaskManager.__proto__ || Object.getPrototypeOf(TaskManager)).call(this, props));\n\n            _this.showLoader = function () {\n                return _this.setState({ loader: true });\n            };\n\n            _this.hideLoader = function () {\n                return _this.setState({ loader: false });\n            };\n\n            _this.handleSearch = function (obj) {\n                return _this.setState(obj);\n            };\n\n            _this.handleSort = function (obj) {\n                _this.setState(obj);\n                var _this$state = _this.state,\n                    data = _this$state.data,\n                    sortKey = _this$state.sortKey,\n                    sortDir = _this$state.sortDir;\n\n                Object.keys(sortKey).map(function (key) {\n                    if (sortKey[[key]] === true) {\n                        data.sort(function (rowObj1, rowObj2) {\n                            var mult = sortDir[[key]] ? 1 : -1;\n                            /**\n                             * rowObj = {\n                             *      task: {\n                             *          name: <string>,\n                             *          task_id: <string>,\n                             *          collectors: []\n                             *      },\n                             *      name: <string>,\n                             *      status: <string>,\n                             *      created_at: <float>,\n                             *      output_directory: <string>,\n                             *      completed_at: <float>,\n                             *      duration: <int>\n                             * }\n                             */\n                            if (typeof rowObj1[[key]] === "string") {\n                                return mult * rowObj1[[key]].localeCompare(rowObj2[[key]]);\n                            }\n\n                            return mult * (rowObj1[[key]] - rowObj2[[key]]);\n                        });\n                    }\n                });\n                _this.setState({ sortedData: data });\n            };\n\n            _this.handleChange = function (e, _ref) {\n                var value = _ref.value;\n                return _this.setState({ sortKey: value });\n            };\n\n            _this.handleClick = function (e, _ref2) {\n                var value = _ref2.value;\n                return _this.setState({ sortDir: value });\n            };\n\n            _this.handlePageChange = function (e, _ref3) {\n                var page = _ref3.page;\n\n                _this.setState({ page: page });\n            };\n\n            _this.filterTasks = function (task, search) {\n                return (0, _searchTasks.synonymQueries)(["" + search.toLowerCase(), JSON.stringify(task)]) ? true : JSON.stringify(task).toLowerCase().indexOf(search.toLowerCase()) > -1;\n            };\n\n            _this.state = {\n                data: [],\n                sortDir: {\n                    name: false,\n                    duration: false,\n                    created_at: false,\n                    status: false\n                },\n                sortKey: {\n                    name: false,\n                    duration: false,\n                    created_at: true,\n                    status: false\n                },\n                sortedData: [],\n                loader: false,\n                page: 1,\n                totalPage: 0,\n                search: ""\n            };\n            return _this;\n        }\n\n        _createClass(TaskManager, [{\n            key: "componentDidMount",\n            value: function componentDidMount() {\n                this.getTasks();\n            }\n        }, {\n            key: "componentDidUpdate",\n            value: function componentDidUpdate(prevProps, prevState) {\n                if (prevState.sortDir !== this.state.sortDir || prevState.sortKey !== this.state.sortKey) {\n                    this.handleSort();\n                }\n            }\n        }, {\n            key: "checkRapidDiagInfo",\n            value: function checkRapidDiagInfo() {\n                var _this2 = this;\n\n                var indexerURL = (0, _url.createRESTURL)("rapid_diag/info");\n                var params = { local: 1 };\n                (0, _CommonService.axiosGetCall)(indexerURL, params).then(function (responseJson) {\n                    var stateData = _this2.state.data;\n                    var taskData = _this2.state.data;\n\n                    var hosts = new Set();\n                    var _iteratorNormalCompletion = true;\n                    var _didIteratorError = false;\n                    var _iteratorError = undefined;\n\n                    try {\n                        for (var _iterator = responseJson.data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                            var data = _step.value;\n\n                            var value = JSON.parse(data.value);\n                            hosts.add(value.splunk_server);\n                        }\n                    } catch (err) {\n                        _didIteratorError = true;\n                        _iteratorError = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion && _iterator.return) {\n                                _iterator.return();\n                            }\n                        } finally {\n                            if (_didIteratorError) {\n                                throw _iteratorError;\n                            }\n                        }\n                    }\n\n                    var _iteratorNormalCompletion2 = true;\n                    var _didIteratorError2 = false;\n                    var _iteratorError2 = undefined;\n\n                    try {\n                        for (var _iterator2 = responseJson.data[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                            var _data = _step2.value;\n\n                            var value = JSON.parse(_data.value);\n                            for (var i = 0; i < stateData.length; i++) {\n                                var newTask = stateData[i];\n                                if (newTask.task.host === value.splunk_server) {\n                                    newTask.collector_availability_status = value;\n                                }\n                                newTask.hostDown = !hosts.has(newTask.task.host);\n                                taskData[i] = newTask;\n                            }\n                        }\n                    } catch (err) {\n                        _didIteratorError2 = true;\n                        _iteratorError2 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                                _iterator2.return();\n                            }\n                        } finally {\n                            if (_didIteratorError2) {\n                                throw _iteratorError2;\n                            }\n                        }\n                    }\n\n                    _this2.setState({ data: taskData });\n                    var totalPage = Math.ceil(_this2.state.data.length / TASK_PER_PAGE);\n                    _this2.setState({ totalPage: totalPage });\n                    _this2.hideLoader();\n                }).catch(function () {\n                    _this2.hideLoader();\n                });\n            }\n        }, {\n            key: "getTasks",\n            value: function getTasks() {\n                var _this3 = this;\n\n                var url = (0, _url.createRESTURL)("rapid_diag/task_information?local=1");\n                this.showLoader();\n                (0, _CommonService.axiosGetCall)(url, {}).then(function (result) {\n                    var tableState = Object.assign({}, _this3.state);\n                    tableState.data = result.data;\n                    _this3.setState(tableState);\n                    _this3.handleSort();\n                    _this3.checkRapidDiagInfo();\n                }).catch(function () {\n                    _this3.hideLoader();\n                });\n            }\n        }, {\n            key: "render",\n            value: function render() {\n                var _this4 = this;\n\n                var _state = this.state,\n                    sortedData = _state.sortedData,\n                    sortKey = _state.sortKey,\n                    sortDir = _state.sortDir,\n                    search = _state.search;\n\n                var data = sortedData;\n                var excludedColumns = ["collectors", "completed_at"];\n                var sortColumnKeys = [];\n\n                if (data.length !== 0) {\n                    var columns = Object.keys(data[0].task);\n                    data.map(function (data, index) {\n                        data.taskIndex = index;\n                    });\n\n                    var _iteratorNormalCompletion3 = true;\n                    var _didIteratorError3 = false;\n                    var _iteratorError3 = undefined;\n\n                    try {\n                        for (var _iterator3 = columns[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                            var column = _step3.value;\n\n                            if (excludedColumns.indexOf(column) < 0) {\n                                sortColumnKeys.push(column);\n                            }\n                        }\n                    } catch (err) {\n                        _didIteratorError3 = true;\n                        _iteratorError3 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                                _iterator3.return();\n                            }\n                        } finally {\n                            if (_didIteratorError3) {\n                                throw _iteratorError3;\n                            }\n                        }\n                    }\n                }\n                return _react2.default.createElement("div", {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 186\n                    },\n                    __self: this\n                }, _react2.default.createElement(_ToastMessages2.default, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 187\n                    },\n                    __self: this\n                }), _react2.default.createElement("div", { style: { display: "inline" }, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 188\n                    },\n                    __self: this\n                }, _react2.default.createElement(TaskManagerStyles.StyledGreeting, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 189\n                    },\n                    __self: this\n                }, "Task Manager", _react2.default.createElement(_Helper2.default, {\n                    id: "helper",\n                    buttonStyle: { float: "right", marginLeft: "20px" },\n                    appearance: "default",\n                    openByDefault: false,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 191\n                    },\n                    __self: this\n                }), _react2.default.createElement("div", { style: { float: "right" }, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 197\n                    },\n                    __self: this\n                }, _react2.default.createElement(_TaskCatalougeHeaderStyles.StyleButton, {\n                    id: "refreshButton",\n                    appearance: "pill",\n                    icon: _react2.default.createElement(_Refresh2.default, { id: "refresh", style: { width: "16px", height: "16px" }, __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 201\n                        },\n                        __self: this\n                    }),\n                    onClick: function onClick() {\n                        return _this4.getTasks();\n                    },\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 198\n                    },\n                    __self: this\n                })))), _react2.default.createElement("div", { style: TaskManagerStyles.paginatorDivStyle, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 207\n                    },\n                    __self: this\n                }, _react2.default.createElement(_SearchBar2.default, {\n                    id: "searchBar",\n                    handler: this.handleSearch,\n                    style: {\n                        float: "left",\n                        paddingRight: "5px",\n                        marginLeft: "-13px"\n                    },\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 208\n                    },\n                    __self: this\n                }), _react2.default.createElement("div", { style: { display: "-webkit-box" }, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 217\n                    },\n                    __self: this\n                }, !this.state.loader && this.state.page && data.length > 0 && _react2.default.createElement(_Paginator2.default, {\n                    id: "paginator",\n                    onChange: this.handlePageChange,\n                    current: this.state.page,\n                    alwaysShowLastPageLink: true,\n                    numPageLinks: 3,\n                    totalPages: this.state.totalPage,\n                    style: { float: "right", marginLeft: "10px" },\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 221\n                    },\n                    __self: this\n                }))), _react2.default.createElement("div", {\n                    style: {\n                        zIndex: "30",\n                        position: "sticky",\n                        top: "0",\n                        background: "#ffffff"\n                    },\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 233\n                    },\n                    __self: this\n                }, _react2.default.createElement(_TaskManagerHeader2.default, {\n                    id: "taskManagerHeader",\n                    sortDir: sortDir,\n                    sortKey: sortKey,\n                    handler: this.handleSort,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 241\n                    },\n                    __self: this\n                })), this.state.loader ? _react2.default.createElement("div", { style: TaskManagerStyles.waitStyle, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 249\n                    },\n                    __self: this\n                }, _react2.default.createElement(_Loader2.default, { id: "loader", load: this.state.loader, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 250\n                    },\n                    __self: this\n                })) : this.state.page && _react2.default.createElement("div", { style: { paddingTop: "20px" }, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 254\n                    },\n                    __self: this\n                }, data.length > 0 ? data.filter(function (task) {\n                    return _this4.filterTasks(task, search);\n                }).slice(this.state.page * TASK_PER_PAGE - TASK_PER_PAGE, this.state.page * TASK_PER_PAGE).map(function (row) {\n                    return _react2.default.createElement(_TaskRow2.default, _extends({ data: row, key: row.created_at }, (0, _taskExtraction2.default)(row.task), {\n                        __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 262\n                        },\n                        __self: _this4\n                    }));\n                }) : _react2.default.createElement("div", {\n                    style: Object.assign({}, TaskManagerStyles.fontStyle, TaskManagerStyles.noTasksMessageStyle),\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 264\n                    },\n                    __self: this\n                }, "No task has been configured yet")));\n            }\n        }]);\n\n        return TaskManager;\n    }(_react.Component);\n\n    exports.default = TaskManager;\n\n    /***/\n},\n/* 45 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(155);\n\n    /***/\n},\n/* 46 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(803);\n\n    /***/\n},\n/* 47 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    exports.paginatorDivStyle = exports.noTasksMessageStyle = exports.fontStyle = exports.headerStyle = exports.actionRowStyle = exports.triggerStyle = exports.collectorStyle = exports.statusRowStyle = exports.createdRowStyle = exports.durationRowStyle = exports.hostRowStyle = exports.nameRowStyle = exports.StyledContainer = exports.StyledGreeting = exports.waitStyle = undefined;\n\n    var _templateObject = _taggedTemplateLiteral(["\\n  font-weight: bold;\\n  color: ", ";\\n  font-size: ", ";\\n"], ["\\n  font-weight: bold;\\n  color: ", ";\\n  font-size: ", ";\\n"]),\n        _templateObject2 = _taggedTemplateLiteral(["\\n  ", ";\\n  font-size: ", ";\\n  line-height: 200%;\\n  margin: ", " ", ";\\n  padding: ", " calc(", " * 2);\\n  border-radius: ", ";\\n  box-shadow: ", ";\\n  background-color: ", ";\\n  color: ", ";\\n"], ["\\n  ", ";\\n  font-size: ", ";\\n  line-height: 200%;\\n  margin: ", " ", ";\\n  padding: ", " calc(", " * 2);\\n  border-radius: ", ";\\n  box-shadow: ", ";\\n  background-color: ", ";\\n  color: ", ";\\n"]);\n\n    var _styledComponents = __webpack_require__(6);\n\n    var _styledComponents2 = _interopRequireDefault(_styledComponents);\n\n    var _themes = __webpack_require__(17);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _taggedTemplateLiteral(strings, raw) {\n        return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));\n    }\n\n    var StyledGreeting = _styledComponents2.default.div(_templateObject, (0, _themes.variable)("brandColor"), (0, _themes.variable)("fontSizeXXLarge"));\n\n    var StyledContainer = _styledComponents2.default.div(_templateObject2, (0, _themes.mixin)("reset")("inline-block"), (0, _themes.variable)("fontSizeLarge"), (0, _themes.variable)("spacing"), (0, _themes.variable)("spacingHalf"), (0, _themes.variable)("spacing"), (0, _themes.variable)("spacing"), (0, _themes.variable)("borderRadius"), (0, _themes.variable)("overlayShadow"), (0, _themes.variable)("backgroundColor"), (0, _themes.variable)("gray45"));\n\n    var fontStyle = {\n        fontWeight: 550,\n        fontFamily: \'"Splunk Platform Sans", "Proxima Nova", Roboto, Droid, "Helvetica Neue", Helvetica, Arial, sans-serif\'\n    };\n\n    var nameRowStyle = {\n        width: 43 + "%",\n        display: "inline-block",\n        wordBreak: "break-all"\n    };\n\n    var hostRowStyle = {\n        width: 10 + "%",\n        display: "inline-flex",\n        justifyContent: "center",\n        alignItems: "center"\n    };\n\n    var durationRowStyle = {\n        width: 12 + "%",\n        display: "inline-flex",\n        justifyContent: "center",\n        alignItems: "center"\n    };\n\n    var createdRowStyle = {\n        width: 15 + "%",\n        display: "inline-flex",\n        justifyContent: "center",\n        alignItems: "center"\n    };\n\n    var statusRowStyle = {\n        width: 10 + "%",\n        display: "inline-flex",\n        justifyContent: "center",\n        alignItems: "center"\n    };\n\n    var collectorStyle = {\n        width: "400px",\n        padding: "10px",\n        float: "left",\n        display: "table",\n        margin: 2 + "px auto"\n    };\n\n    var triggerStyle = {\n        width: "300px",\n        padding: "10px",\n        float: "left",\n        display: "table",\n        margin: 2 + "px auto"\n    };\n\n    var actionRowStyle = {\n        width: 10 + "%",\n        display: "inline-flex",\n        justifyContent: "center",\n        alignItems: "center"\n    };\n\n    var headerStyle = {\n        backgroundColor: "#e6e6e6",\n        marginTop: 10,\n        padding: "6px calc(30px)"\n    };\n\n    var noTasksMessageStyle = {\n        textAlign: "center",\n        fontSize: 15,\n        fontWeight: 300,\n        marginTop: "3%"\n    };\n\n    var paginatorDivStyle = {\n        height: "50px",\n        display: "-webkit-box",\n        justifyContent: "flex-end",\n        marginTop: "10px",\n        marginBottom: "10px",\n        marginRight: "-20px",\n        paddingTop: "10px",\n        paddingBottom: "10px"\n    };\n\n    var waitStyle = exports.waitStyle = {\n        position: "absolute",\n        top: "50%",\n        left: "50%"\n    };\n\n    exports.StyledGreeting = StyledGreeting;\n    exports.StyledContainer = StyledContainer;\n    exports.nameRowStyle = nameRowStyle;\n    exports.hostRowStyle = hostRowStyle;\n    exports.durationRowStyle = durationRowStyle;\n    exports.createdRowStyle = createdRowStyle;\n    exports.statusRowStyle = statusRowStyle;\n    exports.collectorStyle = collectorStyle;\n    exports.triggerStyle = triggerStyle;\n    exports.actionRowStyle = actionRowStyle;\n    exports.headerStyle = headerStyle;\n    exports.fontStyle = fontStyle;\n    exports.noTasksMessageStyle = noTasksMessageStyle;\n    exports.paginatorDivStyle = paginatorDivStyle;\n\n    /***/\n},\n/* 48 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(150);\n\n    /***/\n},\n/* 49 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n\n    var _extends = Object.assign || function (target) {\n        for (var i = 1; i < arguments.length; i++) {\n            var source = arguments[i];for (var key in source) {\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }return target;\n    };\n\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/task-manager/src/TaskRow.jsx";\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _propTypes = __webpack_require__(1);\n\n    var _propTypes2 = _interopRequireDefault(_propTypes);\n\n    var _moment = __webpack_require__(50);\n\n    var _moment2 = _interopRequireDefault(_moment);\n\n    var _Play = __webpack_require__(51);\n\n    var _Play2 = _interopRequireDefault(_Play);\n\n    var _Stop = __webpack_require__(52);\n\n    var _Stop2 = _interopRequireDefault(_Stop);\n\n    var _Download = __webpack_require__(53);\n\n    var _Download2 = _interopRequireDefault(_Download);\n\n    var _Trash = __webpack_require__(54);\n\n    var _Trash2 = _interopRequireDefault(_Trash);\n\n    var _ColumnLayout = __webpack_require__(25);\n\n    var _ColumnLayout2 = _interopRequireDefault(_ColumnLayout);\n\n    var _MoreVertical = __webpack_require__(55);\n\n    var _MoreVertical2 = _interopRequireDefault(_MoreVertical);\n\n    var _url = __webpack_require__(4);\n\n    var _TaskInformation = __webpack_require__(56);\n\n    var _TaskInformation2 = _interopRequireDefault(_TaskInformation);\n\n    var _ErrorModal = __webpack_require__(99);\n\n    var _ErrorModal2 = _interopRequireDefault(_ErrorModal);\n\n    var _Button = __webpack_require__(5);\n\n    var _Button2 = _interopRequireDefault(_Button);\n\n    var _ConfirmationModal = __webpack_require__(100);\n\n    var _ConfirmationModal2 = _interopRequireDefault(_ConfirmationModal);\n\n    var _TaskListStyles = __webpack_require__(102);\n\n    var _TaskCatalougeHeaderStyles = __webpack_require__(9);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _toConsumableArray(arr) {\n        if (Array.isArray(arr)) {\n            for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n                arr2[i] = arr[i];\n            }return arr2;\n        } else {\n            return Array.from(arr);\n        }\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError("Cannot call a class as a function");\n        }\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n        }return call && ((typeof call === \'undefined\' ? \'undefined\' : _typeof(call)) === "object" || typeof call === "function") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== "function" && superClass !== null) {\n            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === \'undefined\' ? \'undefined\' : _typeof(superClass)));\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var states = ["system_call_trace", "stack_trace", "network_packet", "search_result", "iops", "netstat", "splunk_diag", "periodic", "log_monitor", "resource_monitor", "search_debug", "ps", "lsof"];\n\n    var TaskRow = function (_React$Component) {\n        _inherits(TaskRow, _React$Component);\n\n        function TaskRow() {\n            var _ref,\n                _this2 = this;\n\n            var _temp, _this, _ret;\n\n            _classCallCheck(this, TaskRow);\n\n            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n            }\n\n            return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TaskRow.__proto__ || Object.getPrototypeOf(TaskRow)).call.apply(_ref, [this].concat(args))), _this), _this.getHeadData = function () {\n                var _this$props$data = _this.props.data,\n                    created_at = _this$props$data.created_at,\n                    status = _this$props$data.status,\n                    task = _this$props$data.task,\n                    duration = _this$props$data.duration;\n\n                var buttonToggle = _react2.default.createElement(_Button2.default, { onClick: _this.handleActionClick, appearance: "pill", icon: _react2.default.createElement(_MoreVertical2.default, { size: 1, __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 25\n                        },\n                        __self: _this2\n                    }), style: { height: "20px", "box-shadow": "none" }, isMenu: true, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 25\n                    },\n                    __self: _this2\n                });\n                return _react2.default.createElement("div", { style: { width: "89vw" }, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 28\n                    },\n                    __self: _this2\n                }, _react2.default.createElement(_ColumnLayout2.default, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 29\n                    },\n                    __self: _this2\n                }, _react2.default.createElement(_ColumnLayout2.default.Row, { id: "taskRowData", __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 30\n                    },\n                    __self: _this2\n                }, _react2.default.createElement(_ColumnLayout2.default.Column, { id: "nameData", span: 3.25, style: { paddingTop: "5px", overflowWrap: "break-word" }, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 31\n                    },\n                    __self: _this2\n                }, task.name), _react2.default.createElement(_ColumnLayout2.default.Column, { id: "hostData", span: 3.29, style: { paddingTop: "5px" }, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 34\n                    },\n                    __self: _this2\n                }, task.host), _react2.default.createElement(_ColumnLayout2.default.Column, { id: "durationData", span: 1.33, style: { paddingTop: "5px" }, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 37\n                    },\n                    __self: _this2\n                }, _this.getDuration(duration)), _react2.default.createElement(_ColumnLayout2.default.Column, { id: "createdAtData", span: 2.11, style: { paddingTop: "5px" }, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 40\n                    },\n                    __self: _this2\n                }, _this.getReadableTime(created_at)), _react2.default.createElement(_ColumnLayout2.default.Column, { id: "statusData", span: 1.2, style: { paddingTop: "5px" }, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 43\n                    },\n                    __self: _this2\n                }, status), _react2.default.createElement(_ColumnLayout2.default.Column, { id: "actionIcon", span: 0.82, style: { paddingBottom: "6px", display: "inherit" }, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 46\n                    },\n                    __self: _this2\n                }, _this.showIcon(_this.props.data), _react2.default.createElement(_TaskCatalougeHeaderStyles.StyleButton, {\n                    size: "small",\n                    appearance: "pill",\n                    style: { maxWidth: 20, paddingBottom: "4px" },\n                    icon: _react2.default.createElement(_Download2.default, {\n                        __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 52\n                        },\n                        __self: _this2\n                    }),\n                    onClick: _this.handleActionClick,\n                    to: (0, _url.createRESTURL)("rapid_diag/task_export?task_id=" + encodeURIComponent(_this.props.data.task.task_id) + "&host=" + encodeURIComponent(_this.props.data.task.host)),\n                    download: _this.props.data.task.name + \'_\' + _this.props.data.task.host + \'_\' + _this.props.data.created_at + \'.json\',\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 48\n                    },\n                    __self: _this2\n                }), _this.deleteIcon(_this.props.data)))));\n            }, _this.getReadableTime = function (epochTime) {\n                return (0, _moment2.default)("" + epochTime, "X").format("MM/DD/YYYY H:mm:ss");\n            }, _this.getDuration = function (duration) {\n                return (0, _moment2.default)("" + duration, "X").utc().format("H:mm:ss");\n            }, _this.handleActionClick = function (e) {\n                e.stopPropagation();\n            }, _this.deleteIcon = function (row) {\n                if (row.status === "Success" || row.status === "Partial Success" || row.status === "Failure" || row.status === "Aborted") {\n                    return _react2.default.createElement(_ConfirmationModal2.default, {\n                        data: row,\n                        url: "rapid_diag/task_delete",\n                        type: "delete",\n                        icon: _react2.default.createElement(_Trash2.default, { id: "delete", screenReaderText: "Delete Task", style: { marginLeft: "2px" }, __source: {\n                                fileName: _jsxFileName,\n                                lineNumber: 103\n                            },\n                            __self: _this2\n                        }),\n                        __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 99\n                        },\n                        __self: _this2\n                    });\n                } else {\n                    return _react2.default.createElement(_ConfirmationModal2.default, {\n                        data: row,\n                        url: "rapid_diag/task_delete",\n                        type: "delete",\n                        icon: _react2.default.createElement(_Trash2.default, { id: "delete", screenReaderText: "Delete Task", style: { marginLeft: "2px" }, __source: {\n                                fileName: _jsxFileName,\n                                lineNumber: 112\n                            },\n                            __self: _this2\n                        }),\n                        disableButton: true,\n                        __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 108\n                        },\n                        __self: _this2\n                    });\n                }\n            }, _this.showIcon = function (row) {\n                if (row.status === "Archiving Results" || row.status === "Aborting") {\n                    return _react2.default.createElement(_ConfirmationModal2.default, {\n                        data: row,\n                        url: "rapid_diag/task_rerun",\n                        type: "re-run",\n                        icon: _react2.default.createElement(_Play2.default, { id: "rerunTask", screenReaderText: "Re-run Task", style: { marginLeft: "2px" }, __source: {\n                                fileName: _jsxFileName,\n                                lineNumber: 125\n                            },\n                            __self: _this2\n                        }),\n                        disableButton: true,\n                        __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 121\n                        },\n                        __self: _this2\n                    });\n                } else if (row.status === "Success" || row.status === "Partial Success" || row.status === "Failure" || row.status === "Aborted") {\n                    if (row.hostDown) {\n                        return _react2.default.createElement(_ErrorModal2.default, { id: "errorModal", hostDown: true, __source: {\n                                fileName: _jsxFileName,\n                                lineNumber: 136\n                            },\n                            __self: _this2\n                        });\n                    }\n                    var showErrorModal = _this.showErrorModal(row);\n                    if (showErrorModal) {\n                        var intersection = _this.getIntersection(row);\n                        return _react2.default.createElement(_ErrorModal2.default, {\n                            id: "errorModal",\n                            availMatrix: row.collector_availability_status,\n                            keys: intersection,\n                            __source: {\n                                fileName: _jsxFileName,\n                                lineNumber: 142\n                            },\n                            __self: _this2\n                        });\n                    }\n                    return _react2.default.createElement(_ConfirmationModal2.default, {\n                        data: row,\n                        url: "rapid_diag/task_rerun",\n                        type: "re-run",\n                        icon: _react2.default.createElement(_Play2.default, { id: "rerunTask", screenReaderText: "Re-run Task", style: { marginLeft: "2px" }, __source: {\n                                fileName: _jsxFileName,\n                                lineNumber: 154\n                            },\n                            __self: _this2\n                        }),\n                        __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 150\n                        },\n                        __self: _this2\n                    });\n                } else if (row.status === "Monitoring" || row.status === "Collecting") {\n                    return _react2.default.createElement(_ConfirmationModal2.default, {\n                        data: row,\n                        url: "rapid_diag/task_abort",\n                        type: "abort",\n                        icon: _react2.default.createElement(_Stop2.default, { id: "abortTask", screenReaderText: "Abort Task", style: { marginLeft: "2px" }, __source: {\n                                fileName: _jsxFileName,\n                                lineNumber: 163\n                            },\n                            __self: _this2\n                        }),\n                        __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 159\n                        },\n                        __self: _this2\n                    });\n                }\n            }, _this.showErrorModal = function (row) {\n                if (row.collector_availability_status) {\n                    var isEnable = Object.keys(_this.props).filter(function (state) {\n                        return states.indexOf(state) !== -1 && (state in row.collector_availability_status.unavailable_utilities || state in row.collector_availability_status.running_collectors) === true;\n                    });\n\n                    if (isEnable.length > 0) {\n                        return true;\n                    }\n                    return false;\n                }\n            }, _temp), _possibleConstructorReturn(_this, _ret);\n        }\n\n        _createClass(TaskRow, [{\n            key: "getIntersection",\n            value: function getIntersection(row) {\n                var keys = new Set();\n                var collectorKeys = new Set();\n\n                Object.keys(row.collector_availability_status.running_collectors).map(function (key) {\n                    return keys.add(key);\n                });\n                Object.keys(row.collector_availability_status.unavailable_utilities).map(function (key) {\n                    return keys.add(key);\n                });\n                Object.keys(this.props).filter(function (state) {\n                    return states.indexOf(state) !== -1;\n                }).map(function (collector) {\n                    return collectorKeys.add(collector);\n                });\n\n                var intersection = new Set([].concat(_toConsumableArray(collectorKeys)).filter(function (x) {\n                    return keys.has(x);\n                }));\n                return intersection;\n            }\n        }, {\n            key: "render",\n            value: function render() {\n                var data = this.props.data;\n\n                var path = this.props.data.output_directory;\n\n                return _react2.default.createElement(_TaskListStyles.StylePanel, { id: "taskRow_" + data.taskIndex, panelId: data.taskIndex, title: this.getHeadData(), __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 188\n                    },\n                    __self: this\n                }, _react2.default.createElement(_TaskInformation2.default, _extends({ id: "taskInformation", path: path }, this.props, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 189\n                    },\n                    __self: this\n                })));\n            }\n        }]);\n\n        return TaskRow;\n    }(_react2.default.Component);\n\n    TaskRow.propTypes = {\n        data: _propTypes2.default.object\n    };\n\n    exports.default = TaskRow;\n\n    /***/\n},\n/* 50 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(3);\n\n    /***/\n},\n/* 51 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(805);\n\n    /***/\n},\n/* 52 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(807);\n\n    /***/\n},\n/* 53 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(809);\n\n    /***/\n},\n/* 54 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(810);\n\n    /***/\n},\n/* 55 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(811);\n\n    /***/\n},\n/* 56 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/task-manager/src/TaskInformation.jsx";\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _propTypes = __webpack_require__(1);\n\n    var _propTypes2 = _interopRequireDefault(_propTypes);\n\n    var _Card = __webpack_require__(7);\n\n    var _Card2 = _interopRequireDefault(_Card);\n\n    var _DefinitionList = __webpack_require__(26);\n\n    var _DefinitionList2 = _interopRequireDefault(_DefinitionList);\n\n    var _InfoCard = __webpack_require__(57);\n\n    var _InfoCard2 = _interopRequireDefault(_InfoCard);\n\n    var _TaskContent = __webpack_require__(59);\n\n    var _TaskContent2 = _interopRequireDefault(_TaskContent);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function TaskInformation(props) {\n        var description = props.description,\n            splunk_diag = props.splunk_diag;\n\n        return _react2.default.createElement("div", { style: { overflow: "hidden" }, __source: {\n                fileName: _jsxFileName,\n                lineNumber: 11\n            },\n            __self: this\n        }, _react2.default.createElement(_InfoCard2.default, { header: "Output Directory", body: props.path, __source: {\n                fileName: _jsxFileName,\n                lineNumber: 12\n            },\n            __self: this\n        }), description && _react2.default.createElement(_InfoCard2.default, {\n            header: "Description",\n            body: description, __source: {\n                fileName: _jsxFileName,\n                lineNumber: 13\n            },\n            __self: this\n        }), _react2.default.createElement(_Card2.default, {\n            id: "cardDiag",\n            style: {\n                margin: "10px",\n                border: "0px",\n                boxShadow: "rgba(92, 192, 92, 0.38) 0px 6px 20px 0px",\n                borderRadius: "10px",\n                width: "97%"\n            },\n            __source: {\n                fileName: _jsxFileName,\n                lineNumber: 16\n            },\n            __self: this\n        }, _react2.default.createElement(_Card2.default.Header, { title: "Splunk Diag Collection", __source: {\n                fileName: _jsxFileName,\n                lineNumber: 26\n            },\n            __self: this\n        }), _react2.default.createElement(_Card2.default.Body, {\n            __source: {\n                fileName: _jsxFileName,\n                lineNumber: 27\n            },\n            __self: this\n        }, _react2.default.createElement(_DefinitionList2.default, {\n            id: "diag",\n            description: splunk_diag && splunk_diag.filter(function (collector) {\n                return collector.selected === true;\n            }).length > 0 ? "Yes" : "No",\n            term: "Splunk Diag",\n            __source: {\n                fileName: _jsxFileName,\n                lineNumber: 28\n            },\n            __self: this\n        }))), _react2.default.createElement(_TaskContent2.default, { task: props, __source: {\n                fileName: _jsxFileName,\n                lineNumber: 35\n            },\n            __self: this\n        }));\n    }\n\n    TaskInformation.propTypes = {\n        /**\n         * path: output directory path\n         */\n        path: _propTypes2.default.string,\n\n        /**\n         * task: JSON task object from parent(Task Row) class\n         */\n        task: _propTypes2.default.object\n    };\n\n    exports.default = TaskInformation;\n\n    /***/\n},\n/* 57 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/step-wizard/src/components/InfoCard/InfoCard.jsx";\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _Card = __webpack_require__(7);\n\n    var _Card2 = _interopRequireDefault(_Card);\n\n    var _Paragraph = __webpack_require__(58);\n\n    var _Paragraph2 = _interopRequireDefault(_Paragraph);\n\n    var _propTypes = __webpack_require__(1);\n\n    var _propTypes2 = _interopRequireDefault(_propTypes);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function InfoCard(props) {\n        return _react2.default.createElement(_Card2.default, {\n            style: {\n                margin: "10px",\n                border: "0px",\n                boxShadow: "rgba(92, 192, 92, 0.38) 0px 6px 20px 0px",\n                borderRadius: "10px",\n                width: "97%"\n            },\n            __source: {\n                fileName: _jsxFileName,\n                lineNumber: 8\n            },\n            __self: this\n        }, _react2.default.createElement(_Card2.default.Header, { "data-testid": "cardHeaderTag", title: props.header, __source: {\n                fileName: _jsxFileName,\n                lineNumber: 17\n            },\n            __self: this\n        }), _react2.default.createElement(_Card2.default.Body, {\n            __source: {\n                fileName: _jsxFileName,\n                lineNumber: 18\n            },\n            __self: this\n        }, _react2.default.createElement(_Paragraph2.default, { "data-testid": "cardBodyPTag", style: { marginLeft: "2%", marginRight: "2%", textAlign: "justify" }, __source: {\n                fileName: _jsxFileName,\n                lineNumber: 19\n            },\n            __self: this\n        }, props.body)));\n    }\n\n    InfoCard.propTypes = {\n        /**\n         * Card Header\n         */\n        header: _propTypes2.default.string,\n\n        /**\n         * style for Component\n         */\n        body: _propTypes2.default.string\n    };\n\n    exports.default = InfoCard;\n\n    /***/\n},\n/* 58 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(238);\n\n    /***/\n},\n/* 59 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n\n    var _extends = Object.assign || function (target) {\n        for (var i = 1; i < arguments.length; i++) {\n            var source = arguments[i];for (var key in source) {\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }return target;\n    };\n\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/task-template-wizard/src/components/TaskContent/TaskContent.jsx";\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _lodash = __webpack_require__(20);\n\n    var _DefinitionList = __webpack_require__(27);\n\n    var _DefinitionList2 = _interopRequireDefault(_DefinitionList);\n\n    var _propTypes = __webpack_require__(1);\n\n    var _propTypes2 = _interopRequireDefault(_propTypes);\n\n    var _Pencil = __webpack_require__(60);\n\n    var _Pencil2 = _interopRequireDefault(_Pencil);\n\n    var _CardLayout = __webpack_require__(28);\n\n    var _CardLayout2 = _interopRequireDefault(_CardLayout);\n\n    var _JSON_KEY_BINDINGS = __webpack_require__(11);\n\n    var _ReviewCard = __webpack_require__(61);\n\n    var _ReviewCard2 = _interopRequireDefault(_ReviewCard);\n\n    var _ErrorModal = __webpack_require__(30);\n\n    var _ErrorModal2 = _interopRequireDefault(_ErrorModal);\n\n    var _PopOverText = __webpack_require__(21);\n\n    var _PopOverText2 = _interopRequireDefault(_PopOverText);\n\n    var _DefinitionList3 = __webpack_require__(26);\n\n    var _DefinitionList4 = _interopRequireDefault(_DefinitionList3);\n\n    var _InfoMessage = __webpack_require__(66);\n\n    var _InfoMessage2 = _interopRequireDefault(_InfoMessage);\n\n    var _buildReviewObject = __webpack_require__(67);\n\n    var _ReviewPopUp = __webpack_require__(69);\n\n    var _ReviewPopUp2 = _interopRequireDefault(_ReviewPopUp);\n\n    var _CheckUtility = __webpack_require__(98);\n\n    var _ReviewCardStyles = __webpack_require__(29);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _defineProperty(obj, key, value) {\n        if (key in obj) {\n            Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n        } else {\n            obj[key] = value;\n        }return obj;\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError("Cannot call a class as a function");\n        }\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n        }return call && ((typeof call === \'undefined\' ? \'undefined\' : _typeof(call)) === "object" || typeof call === "function") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== "function" && superClass !== null) {\n            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === \'undefined\' ? \'undefined\' : _typeof(superClass)));\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var states = ["system_call_trace", "stack_trace", "network_packet", "search_result", "iops", "netstat", "ps", "lsof", "periodic", "log_monitor", "resource_monitor", "search_debug"];\n\n    var ignoreKeys = ["__class__", "parentId", "level", "selected", "name", "id", "action_needed"];\n    var ignoreDefaults = ["regex", "search_regex"];\n\n    var TaskContent = function (_Component) {\n        _inherits(TaskContent, _Component);\n\n        function TaskContent(props, context) {\n            var _this2 = this;\n\n            _classCallCheck(this, TaskContent);\n\n            var _this = _possibleConstructorReturn(this, (TaskContent.__proto__ || Object.getPrototypeOf(TaskContent)).call(this, props, context));\n\n            _this.getResourceMonitorDescription = function (data) {\n                return data.map(function (resource) {\n                    return _react2.default.createElement(_DefinitionList2.default, { termWidth: 300, __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 50\n                        },\n                        __self: _this2\n                    }, _react2.default.createElement(_DefinitionList2.default.Term, {\n                        __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 51\n                        },\n                        __self: _this2\n                    }, _JSON_KEY_BINDINGS.KEY_BINDING[resource.metric]), _react2.default.createElement(_DefinitionList2.default.Description, {\n                        __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 52\n                        },\n                        __self: _this2\n                    }, resource.threshold + " (" + resource.invert + ")"));\n                });\n            };\n\n            _this.getProcessLabel = function (data, action_needed, key) {\n                if (data !== undefined) {\n                    if (data.process) {\n                        if (data.process.name === "dummy") {\n                            return _react2.default.createElement("div", { style: { display: "contents" }, __source: {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 61\n                                },\n                                __self: _this2\n                            }, _react2.default.createElement(_DefinitionList2.default.Description, {\n                                __source: {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 62\n                                },\n                                __self: _this2\n                            }, "splunk search matched", _react2.default.createElement(_PopOverText2.default, {\n                                buttonStyle: { paddingBottom: "6px" },\n                                help: "This text is just for displaying purposes.  Actual trace will run on search process that matches the regular expression entered on the first page of wizard.",\n                                __source: {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 64\n                                },\n                                __self: _this2\n                            })));\n                        }\n                        return _react2.default.createElement(_DefinitionList2.default.Description, {\n                            __source: {\n                                fileName: _jsxFileName,\n                                lineNumber: 74\n                            },\n                            __self: _this2\n                        }, data.process.process_type + " (" + data.process.pid + ")");\n                    }\n                    return _react2.default.createElement(_DefinitionList2.default.Description, {\n                        __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 81\n                        },\n                        __self: _this2\n                    }, data.name + " - " + data.process_type + " (" + data.pid + ")");\n                }\n                return _react2.default.createElement(_DefinitionList2.default.Description, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 87\n                    },\n                    __self: _this2\n                }, "splunk search matched");\n            };\n\n            _this.getChildren = function (collector) {\n                var action_needed = collector.action_needed !== undefined ? collector.action_needed : {};\n                return Object.keys(collector).map(function (key) {\n                    return ignoreKeys.indexOf(key) === -1 && _react2.default.createElement(_DefinitionList2.default, { termWidth: 300, style: { paddingLeft: "30px", cursor: "inherit" }, __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 95\n                        },\n                        __self: _this2\n                    }, key !== "resource_monitor_trackers" && _react2.default.createElement(_DefinitionList2.default.Term, { style: { cursor: "inherit" }, __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 97\n                        },\n                        __self: _this2\n                    }, _JSON_KEY_BINDINGS.KEY_BINDING[key]), key === "process" || key === "resource_monitor_trackers" ? key === "process" ? _this.getProcessLabel(collector[key], action_needed, key) : _this.getResourceMonitorDescription(collector[key]) : _react2.default.createElement(_DefinitionList2.default.Description, { style: { cursor: "inherit", marginTop: "5px" }, __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 106\n                        },\n                        __self: _this2\n                    }, collector[key] === null && ignoreDefaults.indexOf(key) === -1 ? "All" : collector[key], collector[key] === "splunk search matched" ? _react2.default.createElement("div", { style: { display: "contents" }, __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 109\n                        },\n                        __self: _this2\n                    }, _react2.default.createElement(_PopOverText2.default, {\n                        buttonStyle: {},\n                        help: "This text is just for displaying purposes.   Actual trace will run on search process that matches the regular expression entered on the first page of wizard.",\n                        __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 110\n                        },\n                        __self: _this2\n                    })) : null));\n                });\n            };\n\n            _this.editCollector = (0, _lodash.throttle)(function (e, obj, cardName) {\n                e.stopPropagation();\n                e.preventDefault();\n                try {\n                    e.stopImmediatePropagation();\n                } catch (err) {}\n                _this.setState({\n                    openCollector: true,\n                    editCollector: obj,\n                    editCardName: cardName\n                });\n            }, 300, { leading: false, trailing: true });\n\n            _this.getDetails = function (obj) {\n                var availMatrix = _this.props.task.availMatrix;\n\n                if (availMatrix === undefined) {\n                    availMatrix = {\n                        runningCollectors: {},\n                        unavailableUtilities: {}\n                    };\n                }\n                var disabled = false;\n                if (Object.keys(availMatrix).length !== 0) {\n                    disabled = !!(availMatrix.runningCollectors[obj.name] || availMatrix.unavailableUtilities[obj.name]);\n                }\n\n                var StyledReviewC = !disabled && _this.props.isReview ? _ReviewCardStyles.StyledReview : _react.Fragment;\n                return _react2.default.createElement(StyledReviewC, { onClick: function onClick(e) {\n                        return _this.props.isReview && !disabled && _this.editCollector(e, obj, obj.name);\n                    }, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 155\n                    },\n                    __self: _this2\n                }, _react2.default.createElement("div", {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 156\n                    },\n                    __self: _this2\n                }, _react2.default.createElement(StyledReviewC, { className: "header-" + obj.name, style: { display: "-webkit-box" }, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 157\n                    },\n                    __self: _this2\n                }, _react2.default.createElement(_ReviewCardStyles.StyledHeader, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 158\n                    },\n                    __self: _this2\n                }, _react2.default.createElement(_ReviewCardStyles.StyledHeaderTitle, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 158\n                    },\n                    __self: _this2\n                }, _JSON_KEY_BINDINGS.KEY_BINDING[obj.name])), disabled ? _react2.default.createElement(_ErrorModal2.default, {\n                    availMatrix: availMatrix,\n                    collector: obj.name,\n                    style: { display: "inline-block" },\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 160\n                    },\n                    __self: _this2\n                }) : null, _this.props.isReview && obj.action_needed && obj.action_needed.length > 0 ? _react2.default.createElement(_PopOverText2.default, {\n                    dialogueBoxStyle: { padding: "10px" },\n                    help: obj.action_needed,\n                    type: "warning",\n                    buttonStyle: { marginTop: "-6px", marginLeft: "25px" },\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 167\n                    },\n                    __self: _this2\n                }) : null), _react2.default.createElement(StyledReviewC, { className: "detail-" + obj.name, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 174\n                    },\n                    __self: _this2\n                }, _react2.default.createElement(_ReviewCardStyles.PencilStyle, { style: { marginTop: "-53px" }, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 175\n                    },\n                    __self: _this2\n                }, _react2.default.createElement(_Pencil2.default, { style: { width: "13px", height: "13px" }, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 176\n                    },\n                    __self: _this2\n                })), _this.getChildren(obj))));\n            };\n\n            _this.getChildrenObj = function (arr, level, collection) {\n                Object.keys(collection).map(function (prop) {\n                    return states.indexOf(prop) !== -1 && collection[prop] !== null && collection[prop].map(function (collector) {\n                        if (collector.parentId === level) {\n                            collector.name = prop;\n                            arr.push(collector);\n                            _this.getChildrenObj(arr, collector.level, collection);\n                        }\n                    });\n                });\n                return arr;\n            };\n\n            _this.getTaskObjs = function (collection) {\n                var tasks = [];\n                Object.keys(collection).map(function (prop) {\n                    return states.indexOf(prop) !== -1 && collection[prop] !== null && collection[prop].filter(function (collector) {\n                        return collector.selected === true && collector.parentId === 0;\n                    }).map(function (collector) {\n                        var arr = [];\n                        collector.name = prop;\n                        arr.push(collector);\n                        _this.getChildrenObj(arr, collector.level, collection);\n                        tasks.push(arr);\n                    });\n                });\n                return tasks;\n            };\n\n            _this.handleChildren = function (attribute, value) {\n                _this.setState(_defineProperty({}, attribute, value));\n                _this.props.handler(attribute, value);\n            };\n\n            _this.validateNextButton = function (tasks) {\n                return tasks.filter(function (prop) {\n                    return prop.filter(function (task) {\n                        return task.action_needed && task.action_needed.length > 0;\n                    }).length > 0;\n                }).length > 0;\n            };\n\n            _this.state = {\n                openCollector: false,\n                editCollector: {},\n                disableNext: props.disableNext,\n                actionOpen: false\n            };\n            return _this;\n        }\n\n        _createClass(TaskContent, [{\n            key: "componentDidUpdate",\n            value: function componentDidUpdate(prevProps, prevState) {\n                if (this.props.task !== undefined && this.props.isReview) {\n                    var tasks = this.getTaskObjs(this.props.task);\n                    var disableNext = this.validateNextButton(tasks);\n                    if (prevProps.disableNext !== disableNext) {\n                        var message = disableNext ? "Please review value(s) for marked collector(s) and update and/or press Save to accept." : "";\n                        this.handleChildren("disableNext", disableNext);\n                        this.handleChildren("disableNextMessage", message);\n                    }\n                }\n                if (this.props.task.selectedIndexers !== prevProps.task.selectedIndexers) {\n                    var selectedCollectors = (0, _buildReviewObject.getSelectedCollectors)(this.props.task);\n                    var availMatrix = (0, _CheckUtility.checkCollectorInfo)(this.props.task, selectedCollectors);\n                    var stateAvailMatrix = this.props.task.availMatrix;\n                    stateAvailMatrix.runningCollectors = availMatrix.runningCollectors;\n                    stateAvailMatrix.unavailableUtilities = availMatrix.unavailableUtilities;\n                    this.handleChildren("availMatrix", stateAvailMatrix);\n                }\n            }\n        }, {\n            key: "render",\n            value: function render() {\n                var _this3 = this;\n\n                var tasks = this.getTaskObjs(this.props.task);\n                var task = this.props.task;\n\n                var isSearchDebug = task.search_debug && task.search_debug.filter(function (collector) {\n                    return collector.selected === true;\n                }).length > 0;\n                var helptext = "Process selector for collectors is disabled if Search Debug collection is enabled.";\n                var name = task.name,\n                    description = task.description,\n                    rapidDiagData = task.rapidDiagData,\n                    indexerList = task.indexerList,\n                    search_debug = task.search_debug,\n                    clusterLoader = task.clusterLoader,\n                    cluster = task.cluster,\n                    selectedIndexers = task.selectedIndexers,\n                    system_call_trace = task.system_call_trace,\n                    stack_trace = task.stack_trace,\n                    lsof = task.lsof,\n                    processData = task.processData,\n                    availMatrix = task.availMatrix,\n                    fileList = task.fileList;\n\n                var requiredParameters = {\n                    search_debug: search_debug,\n                    cluster: cluster,\n                    selectedIndexers: selectedIndexers\n                };\n\n                var processParameters = {\n                    system_call_trace: system_call_trace,\n                    stack_trace: stack_trace,\n                    lsof: lsof,\n                    processData: processData\n                };\n\n                var colInfo = {};\n                var taskInfo = {};\n                var servers = "";\n\n                if (this.props.isReview) {\n                    servers = task.selectedIndexers.join(", ");\n                    colInfo = {\n                        name: name,\n                        description: description\n                    };\n                    taskInfo = {\n                        indexerList: indexerList,\n                        selectedIndexers: selectedIndexers,\n                        cluster: cluster,\n                        rapidDiagData: rapidDiagData,\n                        clusterLoader: clusterLoader\n                    };\n                    var disableNext = this.validateNextButton(tasks);\n                    if (this.props.disableNext !== disableNext) {\n                        this.setState({ disableNext: disableNext });\n                        this.props.handler("disableNext", disableNext);\n                    }\n                }\n                return _react2.default.createElement("div", {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 310\n                    },\n                    __self: this\n                }, this.props.isReview ? _react2.default.createElement(_react.Fragment, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 312\n                    },\n                    __self: this\n                }, isSearchDebug ? _react2.default.createElement(_InfoMessage2.default, { id: "infoMessage", helptext: helptext, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 313\n                    },\n                    __self: this\n                }) : null, _react2.default.createElement(_CardLayout2.default, { style: { maxWidth: 2000 }, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 314\n                    },\n                    __self: this\n                }, _react2.default.createElement(_ReviewCard2.default, {\n                    customStyle: { maxWidth: "100%" },\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 315\n                    },\n                    __self: this\n                }, _react2.default.createElement(_ReviewCardStyles.StyledReview, { onClick: function onClick(e) {\n                        return _this3.editCollector(e, colInfo, "collection_info");\n                    }, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 318\n                    },\n                    __self: this\n                }, _react2.default.createElement(_ReviewCardStyles.PencilStyle, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 319\n                    },\n                    __self: this\n                }, _react2.default.createElement(_Pencil2.default, { style: { width: "13px", height: "13px" }, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 320\n                    },\n                    __self: this\n                })), _react2.default.createElement(_ReviewCardStyles.StyledHeader, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 322\n                    },\n                    __self: this\n                }, _react2.default.createElement(_ReviewCardStyles.StyledHeaderTitle, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 322\n                    },\n                    __self: this\n                }, "Collection Information")), _react2.default.createElement(_ReviewCardStyles.StyledReview, {\n                    onClick: function onClick(e) {\n                        return _this3.editCollector(e, colInfo, "collection_info");\n                    },\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 323\n                    },\n                    __self: this\n                }, _react2.default.createElement(_DefinitionList4.default, { description: task.name, term: "Name", __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 328\n                    },\n                    __self: this\n                }), _react2.default.createElement(_DefinitionList4.default, {\n                    description: task.description,\n                    term: "Description",\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 329\n                    },\n                    __self: this\n                }))))), _react2.default.createElement(_CardLayout2.default, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 337\n                    },\n                    __self: this\n                }, _react2.default.createElement(_ReviewCard2.default, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 338\n                    },\n                    __self: this\n                }, _react2.default.createElement(_ReviewCardStyles.StyledReview, { onClick: function onClick(e) {\n                        return _this3.editCollector(e, taskInfo, "distributed_collection");\n                    }, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 339\n                    },\n                    __self: this\n                }, _react2.default.createElement(_ReviewCardStyles.PencilStyle, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 340\n                    },\n                    __self: this\n                }, _react2.default.createElement(_Pencil2.default, { style: { width: "13px", height: "13px" }, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 341\n                    },\n                    __self: this\n                })), _react2.default.createElement(_ReviewCardStyles.StyledHeader, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 343\n                    },\n                    __self: this\n                }, _react2.default.createElement(_ReviewCardStyles.StyledHeaderTitle, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 343\n                    },\n                    __self: this\n                }, "Distributed Collection")), _react2.default.createElement(_ReviewCardStyles.StyledReview, {\n                    onClick: function onClick(e) {\n                        return _this3.editCollector(e, taskInfo, "distributed_collection");\n                    },\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 344\n                    },\n                    __self: this\n                }, _react2.default.createElement(_DefinitionList4.default, {\n                    description: task.cluster ? "Yes" : "No",\n                    term: "Distributed Environment",\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 349\n                    },\n                    __self: this\n                }), cluster === true ? _react2.default.createElement(_DefinitionList4.default, {\n                    description: servers,\n                    term: "Selected Peer Nodes",\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 354\n                    },\n                    __self: this\n                }) : null))), _react2.default.createElement(_ReviewCard2.default, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 362\n                    },\n                    __self: this\n                }, _react2.default.createElement(_ReviewCardStyles.StyledReview, { onClick: function onClick(e) {\n                        return _this3.editCollector(e, task.splunk_diag[0], "splunk_diag");\n                    }, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 363\n                    },\n                    __self: this\n                }, _react2.default.createElement(_ReviewCardStyles.PencilStyle, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 364\n                    },\n                    __self: this\n                }, _react2.default.createElement(_Pencil2.default, { style: { width: "13px", height: "13px" }, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 365\n                    },\n                    __self: this\n                })), _react2.default.createElement(_ReviewCardStyles.StyledHeader, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 367\n                    },\n                    __self: this\n                }, _react2.default.createElement(_ReviewCardStyles.StyledHeaderTitle, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 367\n                    },\n                    __self: this\n                }, "Splunk Diag Collection")), _react2.default.createElement(_ReviewCardStyles.StyledReview, {\n                    onClick: function onClick(e) {\n                        return _this3.editCollector(e, task.splunk_diag[0], "splunk_diag");\n                    },\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 368\n                    },\n                    __self: this\n                }, _react2.default.createElement(_DefinitionList4.default, {\n                    description: task.splunk_diag[0].selected ? "Yes" : "No",\n                    term: "Splunk Diag",\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 373\n                    },\n                    __self: this\n                })))))) : null, _react2.default.createElement(_CardLayout2.default, { cardMinWidth: "48%", cardMaxWidth: "48%", wrapCards: true, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 383\n                    },\n                    __self: this\n                }, tasks.map(function (task) {\n                    return _react2.default.createElement(_ReviewCard2.default, {\n                        __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 385\n                        },\n                        __self: _this3\n                    }, task.map(function (obj) {\n                        return _this3.getDetails(obj);\n                    }));\n                })), this.state.editCollector !== null && this.props.isReview && _react2.default.createElement(_ReviewPopUp2.default, _extends({\n                    open: this.state.openCollector,\n                    collectorObj: this.state.editCollector,\n                    cardName: this.state.editCardName,\n                    setCollectorStateById: this.props.setCollectorStateById,\n                    availMatrix: availMatrix,\n                    handleChildren: this.handleChildren\n                }, requiredParameters, processParameters, {\n                    fileList: fileList,\n                    validationParameters: this.props.validationParameters,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 390\n                    },\n                    __self: this\n                })));\n            }\n        }]);\n\n        return TaskContent;\n    }(_react.Component);\n\n    TaskContent.defaultProps = {\n        isReview: false\n    };\n\n    TaskContent.propTypes = {\n        data: _propTypes2.default.object\n    };\n\n    exports.default = TaskContent;\n\n    /***/\n},\n/* 60 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(157);\n\n    /***/\n},\n/* 61 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n\n    var _extends = Object.assign || function (target) {\n        for (var i = 1; i < arguments.length; i++) {\n            var source = arguments[i];for (var key in source) {\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }return target;\n    };\n\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/step-wizard/src/components/ReviewCard/ReviewCard.jsx";\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _propTypes = __webpack_require__(1);\n\n    var _propTypes2 = _interopRequireDefault(_propTypes);\n\n    var _Card = __webpack_require__(7);\n\n    var _Card2 = _interopRequireDefault(_Card);\n\n    var _ReviewCardStyles = __webpack_require__(29);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    var ReviewCard = function ReviewCard(props) {\n        return _react2.default.createElement(_Card2.default, { style: _extends({}, _ReviewCardStyles.cardStyle, props.customStyle), __source: {\n                fileName: _jsxFileName,\n                lineNumber: 7\n            },\n            __self: undefined\n        }, props.name.length > 0 ? _react2.default.createElement(_Card2.default.Header, { title: props.name, __source: {\n                fileName: _jsxFileName,\n                lineNumber: 8\n            },\n            __self: undefined\n        }) : null, _react2.default.createElement(_Card2.default.Body, {\n            __source: {\n                fileName: _jsxFileName,\n                lineNumber: 9\n            },\n            __self: undefined\n        }, props.children));\n    };\n\n    ReviewCard.defaultProps = {\n        customStyle: _ReviewCardStyles.cardStyle,\n        name: ""\n    };\n\n    ReviewCard.propTypes = {\n        /**\n         * name: Name of header\n         */\n        name: _propTypes2.default.string.isRequired,\n\n        /**\n         * Child components of `ReviewCard`\n         */\n        children: _propTypes2.default.array\n    };\n\n    exports.default = ReviewCard;\n\n    /***/\n},\n/* 62 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var errorIconStyle = {\n        color: \'#DC4E41\',\n        width: 24 + \'px\',\n        height: 24 + \'px\'\n    };\n\n    var runningCollectorStyle = {\n        float: \'left\',\n        marginRight: 60 + \'px\'\n    };\n\n    var unavailableUtilityStyle = {\n        float: \'left\',\n        marginRight: 30 + \'px\'\n    };\n\n    var footerNoteStyle = {\n        float: \'left\',\n        marginRight: 30 + \'px\',\n        marginLeft: 8 + \'px\'\n    };\n\n    var fontStyle = {\n        fontFamily: \'"Splunk Platform Sans", "Proxima Nova", Roboto, Droid, "Helvetica Neue", Helvetica, Arial, sans-serif\'\n    };\n    exports.errorIconStyle = errorIconStyle;\n    exports.runningCollectorStyle = runningCollectorStyle;\n    exports.unavailableUtilityStyle = unavailableUtilityStyle;\n    exports.footerNoteStyle = footerNoteStyle;\n    exports.fontStyle = fontStyle;\n\n    /***/\n},\n/* 63 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(57);\n\n    /***/\n},\n/* 64 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(76);\n\n    /***/\n},\n/* 65 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var iconStyle = {\n        width: 15 + "px",\n        height: 15 + "px"\n    };\n\n    var dialogueBoxStyle = {\n        padding: 20 + "px",\n        width: 300 + "px"\n    };\n\n    var warningIconStyle = {\n        width: 15 + "px",\n        height: 15 + "px",\n        color: "#F2A900"\n    };\n\n    exports.iconStyle = iconStyle;\n    exports.dialogueBoxStyle = dialogueBoxStyle;\n    exports.warningIconStyle = warningIconStyle;\n\n    /***/\n},\n/* 66 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var _jsxFileName = \'/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/components/InfoMessage/InfoMessage.jsx\';\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _Message = __webpack_require__(12);\n\n    var _Message2 = _interopRequireDefault(_Message);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function InfoMessage(props) {\n        return _react2.default.createElement(\'div\', {\n            __source: {\n                fileName: _jsxFileName,\n                lineNumber: 7\n            },\n            __self: this\n        }, _react2.default.createElement(_Message2.default, { fill: true, type: \'info\', __source: {\n                fileName: _jsxFileName,\n                lineNumber: 8\n            },\n            __self: this\n        }, props.helptext));\n    }\n\n    exports.default = InfoMessage;\n\n    /***/\n},\n/* 67 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    exports.disableNextButton = exports.getSelectedCollectors = exports.getReviewObject = exports.getPeriodicCollector = exports.getCollectorsIn = exports.getDiagCollector = exports.getLsofCollector = exports.getSearchResultCollector = exports.getIopsCollector = exports.getNetworkPacketCollector = exports.getStackTraceCollector = exports.getSystemCallCollector = undefined;\n\n    var _constants = __webpack_require__(68);\n\n    var getSystemCallCollector = exports.getSystemCallCollector = function getSystemCallCollector(obj, collector) {\n        var reviewObj = obj;\n        reviewObj.system_call_trace = true;\n        reviewObj.processValue.system_call_trace = collector.process;\n        reviewObj.collection_time = collector.collection_time;\n    };\n\n    var getStackTraceCollector = exports.getStackTraceCollector = function getStackTraceCollector(obj, collector) {\n        var reviewObj = obj;\n        reviewObj.stack_trace = true;\n        reviewObj.processValue.stack_trace = collector.process;\n    };\n\n    var getNetworkPacketCollector = exports.getNetworkPacketCollector = function getNetworkPacketCollector(obj, collector) {\n        var reviewObj = obj;\n        reviewObj.network_packet = true;\n        reviewObj.netpacket_port = collector.port;\n        reviewObj.netpacket_ip_address = collector.ip_address;\n        reviewObj.netpacket_collection_time = collector.collection_time;\n    };\n\n    var getIopsCollector = exports.getIopsCollector = function getIopsCollector(obj, collector) {\n        var reviewObj = obj;\n        reviewObj.iops = true;\n        reviewObj.iops_collection_time = collector.collection_time;\n    };\n\n    var getSearchResultCollector = exports.getSearchResultCollector = function getSearchResultCollector(obj, collector) {\n        var reviewObj = obj;\n        reviewObj.search_result = true;\n        reviewObj.search_query = collector.search_query;\n    };\n\n    var getLsofCollector = exports.getLsofCollector = function getLsofCollector(obj, collector) {\n        var reviewObj = obj;\n        reviewObj.lsof = true;\n        reviewObj.processValue.lsof = collector.process;\n    };\n\n    var getDiagCollector = exports.getDiagCollector = function getDiagCollector(obj, collectors) {\n        var reviewObj = obj;\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = collectors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var collector = _step.value;\n\n                if (collector.__class__.endsWith("Diag")) {\n                    reviewObj.splunk_diag = true;\n                }\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n    };\n\n    var getCollectorsIn = exports.getCollectorsIn = function getCollectorsIn(reviewObj, collectors) {\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n            for (var _iterator2 = collectors[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var collector = _step2.value;\n\n                if (collector.__class__.endsWith("SystemCallTrace")) {\n                    getSystemCallCollector(reviewObj, collector);\n                } else if (collector.__class__.endsWith("StackTrace")) {\n                    getStackTraceCollector(reviewObj, collector);\n                } else if (collector.__class__.endsWith("NetworkPacket")) {\n                    getNetworkPacketCollector(reviewObj, collector);\n                } else if (collector.__class__.endsWith("SearchResult")) {\n                    getSearchResultCollector(reviewObj, collector);\n                } else if (collector.__class__.endsWith("IOPS")) {\n                    getIopsCollector(reviewObj, collector);\n                } else if (collector.__class__.endsWith("NetStat")) {\n                    reviewObj.netstat = true;\n                } else if (collector.__class__.endsWith("PS")) {\n                    reviewObj.ps = true;\n                } else if (collector.__class__.endsWith("LSOF")) {\n                    getLsofCollector(reviewObj, collector);\n                } else if (collector.__class__.endsWith("Diag")) {\n                    reviewObj.splunk_diag = true;\n                } else if (collector.__class__.endsWith("Periodic")) {\n                    getPeriodicCollector(reviewObj, collector);\n                }\n            }\n        } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                    _iterator2.return();\n                }\n            } finally {\n                if (_didIteratorError2) {\n                    throw _iteratorError2;\n                }\n            }\n        }\n    };\n\n    var getPeriodicCollector = exports.getPeriodicCollector = function getPeriodicCollector(obj, collector) {\n        var reviewObj = obj;\n        reviewObj.task_type = "Periodic";\n        reviewObj.period = collector.interval;\n        reviewObj.no_of_samples = collector.sampleCount;\n\n        if (collector.collectors && collector.collectors.length !== 0) {\n            getCollectorsIn(reviewObj, collector.collectors);\n        }\n    };\n\n    var getReviewObject = exports.getReviewObject = function getReviewObject(file, self) {\n        var data = file;\n        if ("task" in data) {\n            data = data.task;\n        }\n        var collectorData = data.collectors;\n        var reviewObj = {};\n        reviewObj.processValue = {};\n        reviewObj.name = data.name;\n        reviewObj.description = self.state.description;\n        reviewObj.cluster = self.state.cluster;\n        reviewObj.selectedIndexers = self.state.selectedIndexers;\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n            for (var _iterator3 = collectorData[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                var collector = _step3.value;\n\n                if (collector.__class__.endsWith("Periodic")) {\n                    reviewObj.task_type = "Periodic";\n                    reviewObj.period = collector.interval;\n                    reviewObj.no_of_samples = collector.sampleCount;\n                    getCollectorsIn(reviewObj, collector.collectors);\n                    getDiagCollector(reviewObj, collectorData);\n                } else if (collector.__class__.endsWith("LogMonitor")) {\n                    reviewObj.trigger_type = "Log Monitor";\n                    reviewObj.selectedFile = collector.selectedFile;\n                    reviewObj.regex = collector.regex;\n                    getCollectorsIn(reviewObj, collector.collectors);\n                    getDiagCollector(reviewObj, collectorData);\n                } else if (collector.__class__.endsWith("ResourceMonitor")) {\n                    reviewObj.trigger_type = "Resource Monitor";\n                    collector.resource_monitor_trackers.forEach(function (tracker) {\n                        var resource = tracker.metric;\n                        reviewObj[resource] = tracker.threshold;\n                        reviewObj.invert = tracker.invert;\n                    });\n                    getCollectorsIn(reviewObj, collector.collectors);\n                    getDiagCollector(reviewObj, collectorData);\n                } else if (collector.__class__.endsWith("SearchDebug")) {\n                    reviewObj.searchDebug = true;\n                    reviewObj.searchRegex = collector.search_regex;\n                    getCollectorsIn(reviewObj, collector.collectors);\n                    getDiagCollector(reviewObj, collectorData);\n                    if (reviewObj.task_type !== "Periodic") {\n                        reviewObj.task_type = "Single Run";\n                    }\n                } else {\n                    reviewObj.task_type = "Single Run";\n                    getCollectorsIn(reviewObj, collectorData);\n                    getDiagCollector(reviewObj, collectorData);\n                }\n            }\n        } catch (err) {\n            _didIteratorError3 = true;\n            _iteratorError3 = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                    _iterator3.return();\n                }\n            } finally {\n                if (_didIteratorError3) {\n                    throw _iteratorError3;\n                }\n            }\n        }\n\n        self.setState({ reviewObj: reviewObj });\n    };\n\n    var getSelectedCollectors = exports.getSelectedCollectors = function getSelectedCollectors(reviewObj) {\n        var selectedCollectors = {};\n        var toolsCollectors = _constants.TOOLS_COLLECTORS;\n        toolsCollectors.map(function (collector) {\n            if (reviewObj[collector]) {\n                selectedCollectors[collector] = true;\n            }\n        });\n        return selectedCollectors;\n    };\n\n    var disableNextButton = exports.disableNextButton = function disableNextButton(self, availMatrix, selectedCollectors) {\n        var status = self.state.disableNext;\n        Object.keys(selectedCollectors).map(function (collector) {\n            status = !!(status || availMatrix.runningCollectors[collector] || availMatrix.unavailableUtilities[collector]);\n        });\n        self.setState({ "disableNext": status });\n    };\n\n    /***/\n},\n/* 68 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    // TODO: Send this constants from backend\n\n    var ALL_COLLECTORS = exports.ALL_COLLECTORS = ["system_call_trace", "stack_trace", "network_packet", "search_result", "iops", "netstat", "ps", "lsof", "splunk_diag"];\n\n    var INIT_COLLECTORS = exports.INIT_COLLECTORS = ["system_call_trace", "stack_trace", "network_packet", "search_result", "iops", "netstat", "ps", "lsof"];\n\n    var TOOLS_COLLECTORS = exports.TOOLS_COLLECTORS = ["system_call_trace", "stack_trace", "network_packet", "iops", "netstat", "ps", "lsof"];\n\n    var DUMMY_PROCESS = exports.DUMMY_PROCESS = {\n        __class__: "rapid_diag.process_abstraction.SearchProcess",\n        owning_app: null,\n        owning_user: null,\n        running_app: "dummy",\n        running_user: "dummy",\n        savedsearch_name: "",\n        root_sid: "",\n        search: "search string",\n        process: {\n            args: "this is just a dummy process, will get replaced once user starts the search",\n            pid: 0,\n            ppid: 8888,\n            process_type: "splunk search",\n            name: "dummy",\n            __class__: "rapid_diag.process_abstraction.Process"\n        }\n    };\n\n    /***/\n},\n/* 69 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/task-template-wizard/src/components/Review/ReviewPopUp.jsx";\n\n    var _extends = Object.assign || function (target) {\n        for (var i = 1; i < arguments.length; i++) {\n            var source = arguments[i];for (var key in source) {\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }return target;\n    };\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _Modal = __webpack_require__(8);\n\n    var _Modal2 = _interopRequireDefault(_Modal);\n\n    var _Button = __webpack_require__(5);\n\n    var _Button2 = _interopRequireDefault(_Button);\n\n    var _CollectorWrapper = __webpack_require__(70);\n\n    var _CollectorWrapper2 = _interopRequireDefault(_CollectorWrapper);\n\n    var _ValidationConf = __webpack_require__(97);\n\n    var ValidationConf = _interopRequireWildcard(_ValidationConf);\n\n    var _CommonService = __webpack_require__(14);\n\n    function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n            return obj;\n        } else {\n            var newObj = {};if (obj != null) {\n                for (var key in obj) {\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n                }\n            }newObj.default = obj;return newObj;\n        }\n    }\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _defineProperty(obj, key, value) {\n        if (key in obj) {\n            Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n        } else {\n            obj[key] = value;\n        }return obj;\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError("Cannot call a class as a function");\n        }\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n        }return call && ((typeof call === \'undefined\' ? \'undefined\' : _typeof(call)) === "object" || typeof call === "function") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== "function" && superClass !== null) {\n            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === \'undefined\' ? \'undefined\' : _typeof(superClass)));\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var ReviewPopUp = function (_Component) {\n        _inherits(ReviewPopUp, _Component);\n\n        function ReviewPopUp(props, context) {\n            _classCallCheck(this, ReviewPopUp);\n\n            var _this = _possibleConstructorReturn(this, (ReviewPopUp.__proto__ || Object.getPrototypeOf(ReviewPopUp)).call(this, props, context));\n\n            _this.handleRequestClose = function () {\n                _this.setState({ openCollector: false });\n                _this.props.handleChildren("openCollector", false);\n            };\n\n            _this.handleChildren = function (attribute, value) {\n                if (["collection_info", "distributed_collection"].indexOf(_this.props.cardName) !== -1) {\n                    var tempState = Object.assign({}, _this.state.in_review);\n                    tempState[attribute] = value;\n                    _this.setState({ in_review: tempState });\n                    if (_this.state.changedTaskAttributes.indexOf(attribute) === -1) {\n                        _this.setState(function (state) {\n                            var list = state.changedTaskAttributes.concat(attribute);\n                            return { changedTaskAttributes: list };\n                        });\n                    }\n                } else if (attribute === _this.props.cardName) {\n                    Object.keys(value[0]).forEach(function (key) {\n                        if (value[0][key] === "" || typeof value[0][key] === "undefined") {\n                            value[0][key] = null;\n                        }\n                    });\n                    _this.setState({ in_review: value[0] });\n                }\n            };\n\n            _this.handleSave = function () {\n                var attrList = _this.state.changedTaskAttributes;\n                var validationParameters = {};\n                if (["collection_info", "distributed_collection"].indexOf(_this.props.cardName) !== -1) {\n                    validationParameters = _extends({}, _this.props.validationParameters, _this.state.in_review);\n                } else {\n                    validationParameters = _extends({}, _this.props.validationParameters, _defineProperty({}, _this.props.cardName, _this.state.in_review));\n                }\n\n                var validationObj = ValidationConf.validate(_this.props.cardName, validationParameters);\n                if (!validationObj.valid) {\n                    Object.keys(validationObj.action_needed).map(function (key, index) {\n                        return (0, _CommonService.generateToast)(validationObj.action_needed[key]);\n                    });\n                    return;\n                }\n\n                if (["collection_info", "distributed_collection"].indexOf(_this.props.cardName) !== -1) {\n                    attrList.forEach(function (item, index, attrList) {\n                        if (_this.state.in_review[item] !== undefined) {\n                            _this.props.handleChildren(item, _this.state.in_review[item]);\n                        }\n                    });\n                } else {\n                    _this.state.in_review.action_needed = \'\';\n                    _this.props.setCollectorStateById(_this.state.in_review, _this.props.cardName);\n                }\n                _this.handleRequestClose();\n            };\n\n            _this.state = {\n                in_review: JSON.parse(JSON.stringify(_this.props.collectorObj)),\n                openCollector: _this.props.open,\n                changedTaskAttributes: []\n            };\n\n            if (["collection_info", "distributed_collection"].indexOf(_this.props.cardName) !== -1) {\n                _this.state.card_id = _this.props.cardName;\n            } else {\n                _this.state.card_id = _this.props.collectorObj.id;\n            }\n            return _this;\n        }\n\n        _createClass(ReviewPopUp, [{\n            key: "componentDidUpdate",\n            value: function componentDidUpdate(prevProps, prevState) {\n                if (this.props.open && !prevState.openCollector) {\n                    this.setState({ openCollector: true });\n                    this.setState({ in_review: JSON.parse(JSON.stringify(this.props.collectorObj)) });\n                }\n            }\n        }, {\n            key: "render",\n            value: function render() {\n                var _props = this.props,\n                    availMatrix = _props.availMatrix,\n                    fileList = _props.fileList,\n                    cluster = _props.cluster,\n                    selectedIndexers = _props.selectedIndexers,\n                    system_call_trace = _props.system_call_trace,\n                    stack_trace = _props.stack_trace,\n                    processData = _props.processData;\n\n                return _react2.default.createElement(_Modal2.default, { onRequestClose: this.handleRequestClose, open: this.state.openCollector, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 103\n                    },\n                    __self: this\n                }, _react2.default.createElement(_Modal2.default.Body, { style: { minHeight: "400px" }, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 104\n                    },\n                    __self: this\n                }, _react2.default.createElement(_CollectorWrapper2.default, {\n                    key: this.state.card_id,\n                    name: this.props.cardName,\n                    handler: this.handleChildren,\n                    availMatrix: availMatrix,\n                    collectorObj: this.state.in_review,\n                    search_debug: this.props.validationParameters.search_debug,\n                    cluster: cluster,\n                    selectedIndexers: selectedIndexers,\n                    system_call_trace: system_call_trace,\n                    stack_trace: stack_trace,\n                    processData: processData,\n                    fileList: fileList\n                    // eslint-disable-next-line react/jsx-boolean-value\n                    , isReview: true,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 105\n                    },\n                    __self: this\n                })), _react2.default.createElement(_Modal2.default.Footer, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 122\n                    },\n                    __self: this\n                }, _react2.default.createElement(_Button2.default, {\n                    appearance: "secondary",\n                    onClick: this.handleRequestClose,\n                    label: "Cancel",\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 123\n                    },\n                    __self: this\n                }), _react2.default.createElement(_Button2.default, { appearance: "primary", label: "Save", onClick: this.handleSave, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 128\n                    },\n                    __self: this\n                })));\n            }\n        }]);\n\n        return ReviewPopUp;\n    }(_react.Component);\n\n    exports.default = ReviewPopUp;\n\n    /***/\n},\n/* 70 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n\n    var _extends = Object.assign || function (target) {\n        for (var i = 1; i < arguments.length; i++) {\n            var source = arguments[i];for (var key in source) {\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }return target;\n    };\n\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/step-wizard/src/components/CollectorWrapper/CollectorWrapper.jsx";\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _SystemCallTrace = __webpack_require__(71);\n\n    var _SystemCallTrace2 = _interopRequireDefault(_SystemCallTrace);\n\n    var _StackTrace = __webpack_require__(79);\n\n    var _StackTrace2 = _interopRequireDefault(_StackTrace);\n\n    var _NetworkPacket = __webpack_require__(80);\n\n    var _NetworkPacket2 = _interopRequireDefault(_NetworkPacket);\n\n    var _SearchResult = __webpack_require__(81);\n\n    var _SearchResult2 = _interopRequireDefault(_SearchResult);\n\n    var _Iops = __webpack_require__(83);\n\n    var _Iops2 = _interopRequireDefault(_Iops);\n\n    var _Netstat = __webpack_require__(84);\n\n    var _Netstat2 = _interopRequireDefault(_Netstat);\n\n    var _Ps = __webpack_require__(85);\n\n    var _Ps2 = _interopRequireDefault(_Ps);\n\n    var _Lsof = __webpack_require__(86);\n\n    var _Lsof2 = _interopRequireDefault(_Lsof);\n\n    var _SplunkDiag = __webpack_require__(87);\n\n    var _SplunkDiag2 = _interopRequireDefault(_SplunkDiag);\n\n    var _SearchDebug = __webpack_require__(88);\n\n    var _SearchDebug2 = _interopRequireDefault(_SearchDebug);\n\n    var _CollectionInformation = __webpack_require__(89);\n\n    var _CollectionInformation2 = _interopRequireDefault(_CollectionInformation);\n\n    var _DistributedCollection = __webpack_require__(90);\n\n    var _DistributedCollection2 = _interopRequireDefault(_DistributedCollection);\n\n    var _Periodic = __webpack_require__(93);\n\n    var _Periodic2 = _interopRequireDefault(_Periodic);\n\n    var _LogMonitor = __webpack_require__(94);\n\n    var _LogMonitor2 = _interopRequireDefault(_LogMonitor);\n\n    var _ResourceMonitor = __webpack_require__(96);\n\n    var _ResourceMonitor2 = _interopRequireDefault(_ResourceMonitor);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError("Cannot call a class as a function");\n        }\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n        }return call && ((typeof call === \'undefined\' ? \'undefined\' : _typeof(call)) === "object" || typeof call === "function") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== "function" && superClass !== null) {\n            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === \'undefined\' ? \'undefined\' : _typeof(superClass)));\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var components = {\n        system_call_trace: _SystemCallTrace2.default,\n        stack_trace: _StackTrace2.default,\n        network_packet: _NetworkPacket2.default,\n        search_result: _SearchResult2.default,\n        iops: _Iops2.default,\n        netstat: _Netstat2.default,\n        ps: _Ps2.default,\n        lsof: _Lsof2.default,\n        splunk_diag: _SplunkDiag2.default,\n        search_debug: _SearchDebug2.default,\n        collection_info: _CollectionInformation2.default,\n        distributed_collection: _DistributedCollection2.default,\n        periodic: _Periodic2.default,\n        log_monitor: _LogMonitor2.default,\n        resource_monitor: _ResourceMonitor2.default\n    };\n\n    var CollectorWrapper = function (_Component) {\n        _inherits(CollectorWrapper, _Component);\n\n        function CollectorWrapper(props) {\n            _classCallCheck(this, CollectorWrapper);\n\n            return _possibleConstructorReturn(this, (CollectorWrapper.__proto__ || Object.getPrototypeOf(CollectorWrapper)).call(this, props));\n        }\n\n        _createClass(CollectorWrapper, [{\n            key: "render",\n            value: function render() {\n                var Collector = components[this.props.name];\n                return _react2.default.createElement(Collector, _extends({}, this.props, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 43\n                    },\n                    __self: this\n                }));\n            }\n        }]);\n\n        return CollectorWrapper;\n    }(_react.Component);\n\n    exports.default = CollectorWrapper;\n\n    /***/\n},\n/* 71 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/src/components/SystemCallTrace/SystemCallTrace.jsx";\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _ProcessSelector = __webpack_require__(22);\n\n    var _NumberInput = __webpack_require__(15);\n\n    var _NumberInput2 = _interopRequireDefault(_NumberInput);\n\n    var _CollectorCard = __webpack_require__(2);\n\n    var _CollectorCard2 = _interopRequireDefault(_CollectorCard);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError("Cannot call a class as a function");\n        }\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n        }return call && ((typeof call === \'undefined\' ? \'undefined\' : _typeof(call)) === "object" || typeof call === "function") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== "function" && superClass !== null) {\n            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === \'undefined\' ? \'undefined\' : _typeof(superClass)));\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var SystemCallTrace = function (_Component) {\n        _inherits(SystemCallTrace, _Component);\n\n        function SystemCallTrace(props) {\n            _classCallCheck(this, SystemCallTrace);\n\n            var _this = _possibleConstructorReturn(this, (SystemCallTrace.__proto__ || Object.getPrototypeOf(SystemCallTrace)).call(this, props));\n\n            _this.handleChildren = function (attribute, value) {\n                _this.props.handler(attribute, value);\n            };\n\n            _this.state = {};\n            return _this;\n        }\n\n        _createClass(SystemCallTrace, [{\n            key: "render",\n            value: function render() {\n                var _props = this.props,\n                    availMatrix = _props.availMatrix,\n                    collectorObj = _props.collectorObj,\n                    system_call_trace = _props.system_call_trace,\n                    stack_trace = _props.stack_trace,\n                    search_debug = _props.search_debug,\n                    cluster = _props.cluster,\n                    selectedIndexers = _props.selectedIndexers,\n                    processData = _props.processData,\n                    loader = _props.loader,\n                    isReview = _props.isReview;\n\n                return _react2.default.createElement(_CollectorCard2.default, {\n                    id: 1,\n                    name: "system_call_trace",\n                    handler: this.handleChildren,\n                    availMatrix: availMatrix,\n                    collectorObj: collectorObj,\n                    search_debug: search_debug,\n                    customStyle: this.props.customStyle,\n                    isReview: isReview,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 31\n                    },\n                    __self: this\n                }, _react2.default.createElement(_ProcessSelector.ProcessSelector, {\n                    handler: this.handleChildren,\n                    collectorName: "system_call_trace",\n                    collectorObj: collectorObj,\n                    system_call_trace: system_call_trace,\n                    stack_trace: stack_trace,\n                    search_debug: search_debug,\n                    cluster: cluster,\n                    selectedIndexers: selectedIndexers,\n                    processData: processData,\n                    loader: loader,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 41\n                    },\n                    __self: this\n                }), _react2.default.createElement(_NumberInput2.default, {\n                    name: "collection_time",\n                    min: 0,\n                    collectorName: "system_call_trace",\n                    placeholder: "Collection Time (s)",\n                    collectorObj: collectorObj,\n                    handler: this.handleChildren,\n                    style: { width: 50 + "%" },\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 53\n                    },\n                    __self: this\n                }));\n            }\n        }]);\n\n        return SystemCallTrace;\n    }(_react.Component);\n\n    SystemCallTrace.defaultProps = {\n        isReview: false\n    };\n\n    exports.default = SystemCallTrace;\n\n    /***/\n},\n/* 72 */\n/***/function (module, exports) {\n\n    // shim for using process in browser\n    var process = module.exports = {};\n\n    // cached from whatever global is present so that test runners that stub it\n    // don\'t break things.  But we need to wrap it in a try catch in case it is\n    // wrapped in strict mode code which doesn\'t define any globals.  It\'s inside a\n    // function because try/catches deoptimize in certain engines.\n\n    var cachedSetTimeout;\n    var cachedClearTimeout;\n\n    function defaultSetTimout() {\n        throw new Error(\'setTimeout has not been defined\');\n    }\n    function defaultClearTimeout() {\n        throw new Error(\'clearTimeout has not been defined\');\n    }\n    (function () {\n        try {\n            if (typeof setTimeout === \'function\') {\n                cachedSetTimeout = setTimeout;\n            } else {\n                cachedSetTimeout = defaultSetTimout;\n            }\n        } catch (e) {\n            cachedSetTimeout = defaultSetTimout;\n        }\n        try {\n            if (typeof clearTimeout === \'function\') {\n                cachedClearTimeout = clearTimeout;\n            } else {\n                cachedClearTimeout = defaultClearTimeout;\n            }\n        } catch (e) {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    })();\n    function runTimeout(fun) {\n        if (cachedSetTimeout === setTimeout) {\n            //normal enviroments in sane situations\n            return setTimeout(fun, 0);\n        }\n        // if setTimeout wasn\'t available but was latter defined\n        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n            cachedSetTimeout = setTimeout;\n            return setTimeout(fun, 0);\n        }\n        try {\n            // when when somebody has screwed with setTimeout but no I.E. maddness\n            return cachedSetTimeout(fun, 0);\n        } catch (e) {\n            try {\n                // When we are in I.E. but the script has been evaled so I.E. doesn\'t trust the global object when called normally\n                return cachedSetTimeout.call(null, fun, 0);\n            } catch (e) {\n                // same as above but when it\'s a version of I.E. that must have the global object for \'this\', hopfully our context correct otherwise it will throw a global error\n                return cachedSetTimeout.call(this, fun, 0);\n            }\n        }\n    }\n    function runClearTimeout(marker) {\n        if (cachedClearTimeout === clearTimeout) {\n            //normal enviroments in sane situations\n            return clearTimeout(marker);\n        }\n        // if clearTimeout wasn\'t available but was latter defined\n        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n            cachedClearTimeout = clearTimeout;\n            return clearTimeout(marker);\n        }\n        try {\n            // when when somebody has screwed with setTimeout but no I.E. maddness\n            return cachedClearTimeout(marker);\n        } catch (e) {\n            try {\n                // When we are in I.E. but the script has been evaled so I.E. doesn\'t  trust the global object when called normally\n                return cachedClearTimeout.call(null, marker);\n            } catch (e) {\n                // same as above but when it\'s a version of I.E. that must have the global object for \'this\', hopfully our context correct otherwise it will throw a global error.\n                // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n                return cachedClearTimeout.call(this, marker);\n            }\n        }\n    }\n    var queue = [];\n    var draining = false;\n    var currentQueue;\n    var queueIndex = -1;\n\n    function cleanUpNextTick() {\n        if (!draining || !currentQueue) {\n            return;\n        }\n        draining = false;\n        if (currentQueue.length) {\n            queue = currentQueue.concat(queue);\n        } else {\n            queueIndex = -1;\n        }\n        if (queue.length) {\n            drainQueue();\n        }\n    }\n\n    function drainQueue() {\n        if (draining) {\n            return;\n        }\n        var timeout = runTimeout(cleanUpNextTick);\n        draining = true;\n\n        var len = queue.length;\n        while (len) {\n            currentQueue = queue;\n            queue = [];\n            while (++queueIndex < len) {\n                if (currentQueue) {\n                    currentQueue[queueIndex].run();\n                }\n            }\n            queueIndex = -1;\n            len = queue.length;\n        }\n        currentQueue = null;\n        draining = false;\n        runClearTimeout(timeout);\n    }\n\n    process.nextTick = function (fun) {\n        var args = new Array(arguments.length - 1);\n        if (arguments.length > 1) {\n            for (var i = 1; i < arguments.length; i++) {\n                args[i - 1] = arguments[i];\n            }\n        }\n        queue.push(new Item(fun, args));\n        if (queue.length === 1 && !draining) {\n            runTimeout(drainQueue);\n        }\n    };\n\n    // v8 likes predictible objects\n    function Item(fun, array) {\n        this.fun = fun;\n        this.array = array;\n    }\n    Item.prototype.run = function () {\n        this.fun.apply(null, this.array);\n    };\n    process.title = \'browser\';\n    process.browser = true;\n    process.env = {};\n    process.argv = [];\n    process.version = \'\'; // empty string to avoid regexp issues\n    process.versions = {};\n\n    function noop() {}\n\n    process.on = noop;\n    process.addListener = noop;\n    process.once = noop;\n    process.off = noop;\n    process.removeListener = noop;\n    process.removeAllListeners = noop;\n    process.emit = noop;\n    process.prependListener = noop;\n    process.prependOnceListener = noop;\n\n    process.listeners = function (name) {\n        return [];\n    };\n\n    process.binding = function (name) {\n        throw new Error(\'process.binding is not supported\');\n    };\n\n    process.cwd = function () {\n        return \'/\';\n    };\n    process.chdir = function (dir) {\n        throw new Error(\'process.chdir is not supported\');\n    };\n    process.umask = function () {\n        return 0;\n    };\n\n    /***/\n},\n/* 73 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(248);\n\n    /***/\n},\n/* 74 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(227);\n\n    /***/\n},\n/* 75 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(254);\n\n    /***/\n},\n/* 76 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(77);\n\n    /***/\n},\n/* 77 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var descriptions = exports.descriptions = {\n        system_call_trace: "System call traces contain information about requests from a program to the operating system (eg. reading and writing to files, network access and several others). The data collected won\'t include the text from those requests (i.e. the data read or written), but may contain file names.",\n        stack_trace: "Stack trace only contains a snapshot of a program\'s activity at a point in time, no sensitive information will be collected.",\n        network_packet: "Network packet dump will collect all data going through the chosen host and port. If SSL is enabled in that port, the data will be encrypted. If not, sensitive data may be collected. Please do not enable for non-SSL ports unless you feel confident the data being communicated can be safely shared. The data collected can be examined using Wireshark(https://www.wireshark.org).",\n        search_result: "Search results may contain sensitive data, especially if the target index is not _internal or _interospection. Please do not share results unless you feel confident they can be safely shared.",\n        splunk_diag: " Splunk diag collects basic information about your Splunk platform instance, including Splunk platform configuration details. It gathers information, such as server specs, OS version, file system, and current open connections, from the machine running the Splunk platform.",\n        iops: "Input/output operations per second (IOPS, pronounced eye-ops) is an input/output performance measurement used to characterize computer storage devices like hard disk drives (HDD), solid state drives (SSD), and storage area networks (SAN). Like benchmarks, IOPS numbers published by storage device manufacturers do not directly relate to real-world application performance.",\n        netstat: "Netstat collects system-wide connection metadata (status, and source and target addresses and ports), for both network connections and local sockets.",\n        ps: "PS contains the snapshot report of current running processes with PID.",\n        lsof: "LSOF contains the snapshot list of open files by given process.",\n        search_debug: "Search debug matches for regular expression in search query. Once match is found collection will be triggered."\n    };\n\n    var searchDebugMessages = exports.searchDebugMessages = {\n        system_call_trace: "Process selector will be disabled if search debug collection is enabled.",\n        stack_trace: "Process selector will be disabled if search debug collection is enabled.",\n        network_packet: "",\n        search_result: "This collector will be disabled if search debug collection is enabled.",\n        splunk_diag: "",\n        iops: "",\n        netstat: "",\n        ps: "",\n        lsof: "Process selector will be disabled if search debug collection is enabled",\n        log_monitor: "Log Monitor will be disabled if search debug collection is enabled.",\n        resource_monitor: "Resource Monitor will be disabled if search debug collection is enabled."\n    };\n\n    var searchdebugCollectors = exports.searchdebugCollectors = ["system_call_trace", "stack_trace", "search_result", "lsof"];\n\n    var searchdebugTriggers = exports.searchdebugTriggers = ["resource_monitor", "log_monitor"];\n\n    /***/\n},\n/* 78 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var card = {\n        height: 300 + "px",\n        margin: 10 + "px",\n        border: 0,\n        boxShadow: "0 6px 20px 0 rgba(92,192,92,0.38)",\n        borderRadius: 10 + "px",\n        minWidth: 450 + "px"\n    };\n\n    var cardHeader = {\n        fontWeight: 700,\n        fontSize: "large",\n        display: "contents"\n    };\n\n    var cardBody = {\n        display: "inline",\n        flexDirection: "column",\n        justifyContent: "space-between",\n        zIndex: "1",\n        position: "relative"\n    };\n\n    var cardDisable = {\n        textAlign: "right",\n        color: "#5cc05c"\n    };\n\n    var triggerCardChildren = {\n        position: "absolute",\n        width: 90 + "%"\n    };\n\n    var cardChildren = {\n        position: "absolute",\n        bottom: 20,\n        width: 90 + "%"\n    };\n\n    var enabledCard = { textAlign: "justify" };\n    var disabledCard = { textAlign: "justify", opacity: 0.5 };\n\n    exports.card = card;\n    exports.cardHeader = cardHeader;\n    exports.cardBody = cardBody;\n    exports.cardDisable = cardDisable;\n    exports.cardChildren = cardChildren;\n    exports.enabledCard = enabledCard;\n    exports.disabledCard = disabledCard;\n    exports.triggerCardChildren = triggerCardChildren;\n\n    /***/\n},\n/* 79 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/src/components/StackTrace/StackTrace.jsx";\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _ProcessSelector = __webpack_require__(22);\n\n    var _CollectorCard = __webpack_require__(2);\n\n    var _CollectorCard2 = _interopRequireDefault(_CollectorCard);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError("Cannot call a class as a function");\n        }\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n        }return call && ((typeof call === \'undefined\' ? \'undefined\' : _typeof(call)) === "object" || typeof call === "function") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== "function" && superClass !== null) {\n            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === \'undefined\' ? \'undefined\' : _typeof(superClass)));\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var StackTrace = function (_Component) {\n        _inherits(StackTrace, _Component);\n\n        function StackTrace(props) {\n            _classCallCheck(this, StackTrace);\n\n            var _this = _possibleConstructorReturn(this, (StackTrace.__proto__ || Object.getPrototypeOf(StackTrace)).call(this, props));\n\n            _this.handleChildren = function (attribute, value) {\n                _this.props.handler(attribute, value);\n            };\n\n            _this.state = {};\n            return _this;\n        }\n\n        _createClass(StackTrace, [{\n            key: "render",\n            value: function render() {\n                var _props = this.props,\n                    availMatrix = _props.availMatrix,\n                    collectorObj = _props.collectorObj,\n                    system_call_trace = _props.system_call_trace,\n                    stack_trace = _props.stack_trace,\n                    search_debug = _props.search_debug,\n                    cluster = _props.cluster,\n                    selectedIndexers = _props.selectedIndexers,\n                    processData = _props.processData,\n                    open = _props.open,\n                    loader = _props.loader,\n                    isReview = _props.isReview;\n\n                return _react2.default.createElement(_CollectorCard2.default, {\n                    id: 2,\n                    name: "stack_trace",\n                    handler: this.handleChildren,\n                    availMatrix: availMatrix,\n                    collectorObj: collectorObj,\n                    search_debug: search_debug,\n                    customStyle: this.props.customStyle,\n                    isReview: isReview,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 30\n                    },\n                    __self: this\n                }, _react2.default.createElement(_ProcessSelector.ProcessSelector, {\n                    handler: this.handleChildren,\n                    collectorName: "stack_trace",\n                    system_call_trace: system_call_trace,\n                    stack_trace: stack_trace,\n                    search_debug: search_debug,\n                    collectorObj: collectorObj,\n                    cluster: cluster,\n                    selectedIndexers: selectedIndexers,\n                    open: open,\n                    processData: processData,\n                    loader: loader,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 40\n                    },\n                    __self: this\n                }));\n            }\n        }]);\n\n        return StackTrace;\n    }(_react.Component);\n\n    StackTrace.defaultProps = {\n        isReview: false\n    };\n\n    exports.default = StackTrace;\n\n    /***/\n},\n/* 80 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/src/components/NetworkPacket/NetworkPacket.jsx";\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _i18n = __webpack_require__(3);\n\n    var _NumberInput = __webpack_require__(15);\n\n    var _NumberInput2 = _interopRequireDefault(_NumberInput);\n\n    var _TextInput = __webpack_require__(16);\n\n    var _TextInput2 = _interopRequireDefault(_TextInput);\n\n    var _CollectorCard = __webpack_require__(2);\n\n    var _CollectorCard2 = _interopRequireDefault(_CollectorCard);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _defineProperty(obj, key, value) {\n        if (key in obj) {\n            Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n        } else {\n            obj[key] = value;\n        }return obj;\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError("Cannot call a class as a function");\n        }\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n        }return call && ((typeof call === \'undefined\' ? \'undefined\' : _typeof(call)) === "object" || typeof call === "function") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== "function" && superClass !== null) {\n            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === \'undefined\' ? \'undefined\' : _typeof(superClass)));\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var NetworkPacket = function (_Component) {\n        _inherits(NetworkPacket, _Component);\n\n        function NetworkPacket(props) {\n            _classCallCheck(this, NetworkPacket);\n\n            var _this = _possibleConstructorReturn(this, (NetworkPacket.__proto__ || Object.getPrototypeOf(NetworkPacket)).call(this, props));\n\n            _this.handleChildren = function (attribute, value) {\n                _this.setState(_defineProperty({}, attribute, value));\n                _this.props.handler(attribute, value);\n            };\n\n            _this.state = {};\n            return _this;\n        }\n\n        _createClass(NetworkPacket, [{\n            key: "render",\n            value: function render() {\n                var _props = this.props,\n                    availMatrix = _props.availMatrix,\n                    collectorObj = _props.collectorObj,\n                    search_debug = _props.search_debug,\n                    isReview = _props.isReview;\n\n                return _react2.default.createElement(_CollectorCard2.default, {\n                    id: 3,\n                    name: "network_packet",\n                    handler: this.handleChildren,\n                    availMatrix: availMatrix,\n                    collectorObj: collectorObj,\n                    search_debug: search_debug,\n                    customStyle: this.props.customStyle,\n                    isReview: isReview,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 22\n                    },\n                    __self: this\n                }, _react2.default.createElement(_TextInput2.default, {\n                    name: "ip_address",\n                    cardName: "network_packet",\n                    placeholder: "Dest IP Address",\n                    collectorObj: collectorObj,\n                    handler: this.handleChildren,\n                    style: { width: 30 + "%" },\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 32\n                    },\n                    __self: this\n                }), _react2.default.createElement(_NumberInput2.default, {\n                    name: "port",\n                    collectorName: "network_packet",\n                    min: 0,\n                    roundTo: 0,\n                    placeholder: "Port",\n                    collectorObj: collectorObj,\n                    handler: this.handleChildren,\n                    style: { width: 18 + "%" },\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 40\n                    },\n                    __self: this\n                }), _react2.default.createElement(_NumberInput2.default, {\n                    name: "collection_time",\n                    collectorName: "network_packet",\n                    min: 0,\n                    placeholder: "Collection Time (s)",\n                    collectorObj: collectorObj,\n                    handler: this.handleChildren,\n                    style: { width: 45 + "%" },\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 50\n                    },\n                    __self: this\n                }));\n            }\n        }]);\n\n        return NetworkPacket;\n    }(_react.Component);\n\n    NetworkPacket.defaultProps = {\n        isReview: false\n    };\n\n    exports.default = NetworkPacket;\n\n    /***/\n},\n/* 81 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/src/components/SearchResult/SearchResult.jsx";\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _url = __webpack_require__(4);\n\n    var _Anchor = __webpack_require__(82);\n\n    var _Anchor2 = _interopRequireDefault(_Anchor);\n\n    var _TextInput = __webpack_require__(16);\n\n    var _TextInput2 = _interopRequireDefault(_TextInput);\n\n    var _CollectorCard = __webpack_require__(2);\n\n    var _CollectorCard2 = _interopRequireDefault(_CollectorCard);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError("Cannot call a class as a function");\n        }\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n        }return call && ((typeof call === \'undefined\' ? \'undefined\' : _typeof(call)) === "object" || typeof call === "function") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== "function" && superClass !== null) {\n            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === \'undefined\' ? \'undefined\' : _typeof(superClass)));\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var searchUrl = (0, _url.createURL)("app/search/search?q=");\n\n    var SearchResult = function (_Component) {\n        _inherits(SearchResult, _Component);\n\n        function SearchResult(props) {\n            _classCallCheck(this, SearchResult);\n\n            var _this = _possibleConstructorReturn(this, (SearchResult.__proto__ || Object.getPrototypeOf(SearchResult)).call(this, props));\n\n            _this.handleChildren = function (attribute, value) {\n                _this.props.handler(attribute, value);\n            };\n\n            _this.state = {};\n            return _this;\n        }\n\n        _createClass(SearchResult, [{\n            key: "render",\n            value: function render() {\n                var _props = this.props,\n                    availMatrix = _props.availMatrix,\n                    collectorObj = _props.collectorObj,\n                    search_debug = _props.search_debug,\n                    isReview = _props.isReview;\n\n                return _react2.default.createElement(_CollectorCard2.default, {\n                    id: 4,\n                    name: "search_result",\n                    handler: this.handleChildren,\n                    availMatrix: availMatrix,\n                    collectorObj: collectorObj,\n                    search_debug: search_debug,\n                    customStyle: this.props.customStyle,\n                    isReview: isReview,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 22\n                    },\n                    __self: this\n                }, _react2.default.createElement(_TextInput2.default, {\n                    name: "search_query",\n                    cardName: "search_result",\n                    handler: this.handleChildren,\n                    multiline: true,\n                    collectorObj: collectorObj,\n                    style: { width: 100 + "%" },\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 32\n                    },\n                    __self: this\n                }), _react2.default.createElement("br", {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 40\n                    },\n                    __self: this\n                }), _react2.default.createElement(_Anchor2.default, {\n                    url: "" + searchUrl + collectorObj.search_query,\n                    openInNewContext: true,\n                    style: { width: 30 + "%" },\n                    disabled: !collectorObj.selected,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 41\n                    },\n                    __self: this\n                }, "Run Search"));\n            }\n        }]);\n\n        return SearchResult;\n    }(_react.Component);\n\n    SearchResult.defaultProps = {\n        isReview: false\n    };\n\n    exports.default = SearchResult;\n\n    /***/\n},\n/* 82 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n\n    var _extends = Object.assign || function (target) {\n        for (var i = 1; i < arguments.length; i++) {\n            var source = arguments[i];for (var key in source) {\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }return target;\n    };\n\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/step-wizard/src/components/Anchor/Anchor.jsx";\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _propTypes = __webpack_require__(1);\n\n    var _propTypes2 = _interopRequireDefault(_propTypes);\n\n    var _Link = __webpack_require__(40);\n\n    var _Link2 = _interopRequireDefault(_Link);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _objectWithoutProperties(obj, keys) {\n        var target = {};for (var i in obj) {\n            if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];\n        }return target;\n    }\n\n    var handleClick = function handleClick(e) {\n        return e.stopPropagation();\n    };\n\n    function Anchor(props) {\n        var url = props.url,\n            style = props.style,\n            disabled = props.disabled,\n            rest = _objectWithoutProperties(props, ["url", "style", "disabled"]);\n\n        return _react2.default.createElement(_Link2.default, _extends({ to: url, style: style, disabled: disabled, onClick: handleClick }, rest, {\n            __source: {\n                fileName: _jsxFileName,\n                lineNumber: 10\n            },\n            __self: this\n        }));\n    }\n\n    Anchor.defaultProps = {\n        style: {}\n    };\n\n    Anchor.propTypes = {\n        /**\n         * url to open\n         */\n        url: _propTypes2.default.string,\n\n        /**\n         * style for Component\n         */\n        style: _propTypes2.default.object,\n\n        /**\n         * Component disabled or enabled\n         */\n        disabled: _propTypes2.default.bool\n    };\n\n    exports.default = Anchor;\n\n    /***/\n},\n/* 83 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/src/components/Iops/Iops.jsx";\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _i18n = __webpack_require__(3);\n\n    var _NumberInput = __webpack_require__(15);\n\n    var _NumberInput2 = _interopRequireDefault(_NumberInput);\n\n    var _CollectorCard = __webpack_require__(2);\n\n    var _CollectorCard2 = _interopRequireDefault(_CollectorCard);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError("Cannot call a class as a function");\n        }\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n        }return call && ((typeof call === \'undefined\' ? \'undefined\' : _typeof(call)) === "object" || typeof call === "function") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== "function" && superClass !== null) {\n            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === \'undefined\' ? \'undefined\' : _typeof(superClass)));\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var Iops = function (_Component) {\n        _inherits(Iops, _Component);\n\n        function Iops(props) {\n            _classCallCheck(this, Iops);\n\n            var _this = _possibleConstructorReturn(this, (Iops.__proto__ || Object.getPrototypeOf(Iops)).call(this, props));\n\n            _this.handleChildren = function (attribute, value) {\n                _this.props.handler(attribute, value);\n            };\n\n            _this.state = {};\n            return _this;\n        }\n\n        _createClass(Iops, [{\n            key: "render",\n            value: function render() {\n                var _props = this.props,\n                    availMatrix = _props.availMatrix,\n                    collectorObj = _props.collectorObj,\n                    search_debug = _props.search_debug,\n                    isReview = _props.isReview;\n\n                return _react2.default.createElement(_CollectorCard2.default, {\n                    id: 5,\n                    name: "iops",\n                    handler: this.handleChildren,\n                    availMatrix: availMatrix,\n                    collectorObj: collectorObj,\n                    search_debug: search_debug,\n                    customStyle: this.props.customStyle,\n                    isReview: isReview,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 19\n                    },\n                    __self: this\n                }, _react2.default.createElement(_NumberInput2.default, {\n                    name: "collection_time",\n                    collectorName: "iops",\n                    min: 0,\n                    placeholder: "Collection Time (s)",\n                    collectorObj: collectorObj,\n                    handler: this.handleChildren,\n                    style: { width: 70 + "%" },\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 29\n                    },\n                    __self: this\n                }));\n            }\n        }]);\n\n        return Iops;\n    }(_react.Component);\n\n    Iops.defaultProps = {\n        isReview: false\n    };\n\n    exports.default = Iops;\n\n    /***/\n},\n/* 84 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/src/components/Netstat/Netstat.jsx";\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _i18n = __webpack_require__(3);\n\n    var _CollectorCard = __webpack_require__(2);\n\n    var _CollectorCard2 = _interopRequireDefault(_CollectorCard);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError("Cannot call a class as a function");\n        }\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n        }return call && ((typeof call === \'undefined\' ? \'undefined\' : _typeof(call)) === "object" || typeof call === "function") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== "function" && superClass !== null) {\n            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === \'undefined\' ? \'undefined\' : _typeof(superClass)));\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var Netstat = function (_Component) {\n        _inherits(Netstat, _Component);\n\n        function Netstat(props) {\n            _classCallCheck(this, Netstat);\n\n            var _this = _possibleConstructorReturn(this, (Netstat.__proto__ || Object.getPrototypeOf(Netstat)).call(this, props));\n\n            _this.handleChildren = function (attribute, value) {\n                _this.props.handler(attribute, value);\n            };\n\n            _this.state = {};\n            return _this;\n        }\n\n        _createClass(Netstat, [{\n            key: "render",\n            value: function render() {\n                var _props = this.props,\n                    availMatrix = _props.availMatrix,\n                    collectorObj = _props.collectorObj,\n                    search_debug = _props.search_debug,\n                    isReview = _props.isReview;\n\n                return _react2.default.createElement(_CollectorCard2.default, {\n                    id: 6,\n                    name: "netstat",\n                    handler: this.handleChildren,\n                    availMatrix: availMatrix,\n                    collectorObj: collectorObj,\n                    search_debug: search_debug,\n                    customStyle: this.props.customStyle,\n                    isReview: isReview,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 19\n                    },\n                    __self: this\n                });\n            }\n        }]);\n\n        return Netstat;\n    }(_react.Component);\n\n    Netstat.defaultProps = {\n        isReview: false\n    };\n\n    exports.default = Netstat;\n\n    /***/\n},\n/* 85 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/src/components/Ps/Ps.jsx";\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _i18n = __webpack_require__(3);\n\n    var _CollectorCard = __webpack_require__(2);\n\n    var _CollectorCard2 = _interopRequireDefault(_CollectorCard);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError("Cannot call a class as a function");\n        }\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n        }return call && ((typeof call === \'undefined\' ? \'undefined\' : _typeof(call)) === "object" || typeof call === "function") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== "function" && superClass !== null) {\n            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === \'undefined\' ? \'undefined\' : _typeof(superClass)));\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var Ps = function (_Component) {\n        _inherits(Ps, _Component);\n\n        function Ps(props) {\n            _classCallCheck(this, Ps);\n\n            var _this = _possibleConstructorReturn(this, (Ps.__proto__ || Object.getPrototypeOf(Ps)).call(this, props));\n\n            _this.handleChildren = function (attribute, value) {\n                _this.props.handler(attribute, value);\n            };\n\n            _this.state = {};\n            return _this;\n        }\n\n        _createClass(Ps, [{\n            key: "render",\n            value: function render() {\n                var _props = this.props,\n                    availMatrix = _props.availMatrix,\n                    collectorObj = _props.collectorObj,\n                    search_debug = _props.search_debug,\n                    isReview = _props.isReview;\n\n                return _react2.default.createElement(_CollectorCard2.default, {\n                    id: 7,\n                    name: "ps",\n                    handler: this.handleChildren,\n                    availMatrix: availMatrix,\n                    collectorObj: collectorObj,\n                    search_debug: search_debug,\n                    customStyle: this.props.customStyle,\n                    isReview: isReview,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 19\n                    },\n                    __self: this\n                });\n            }\n        }]);\n\n        return Ps;\n    }(_react.Component);\n\n    Ps.defaultProps = {\n        isReview: false\n    };\n\n    exports.default = Ps;\n\n    /***/\n},\n/* 86 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/src/components/Lsof/Lsof.jsx";\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _ProcessSelector = __webpack_require__(22);\n\n    var _CollectorCard = __webpack_require__(2);\n\n    var _CollectorCard2 = _interopRequireDefault(_CollectorCard);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError("Cannot call a class as a function");\n        }\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n        }return call && ((typeof call === \'undefined\' ? \'undefined\' : _typeof(call)) === "object" || typeof call === "function") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== "function" && superClass !== null) {\n            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === \'undefined\' ? \'undefined\' : _typeof(superClass)));\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var Lsof = function (_Component) {\n        _inherits(Lsof, _Component);\n\n        function Lsof(props) {\n            _classCallCheck(this, Lsof);\n\n            var _this = _possibleConstructorReturn(this, (Lsof.__proto__ || Object.getPrototypeOf(Lsof)).call(this, props));\n\n            _this.handleChildren = function (attribute, value) {\n                _this.props.handler(attribute, value);\n            };\n\n            _this.state = {};\n            return _this;\n        }\n\n        _createClass(Lsof, [{\n            key: "render",\n            value: function render() {\n                var _props = this.props,\n                    availMatrix = _props.availMatrix,\n                    collectorObj = _props.collectorObj,\n                    search_debug = _props.search_debug,\n                    cluster = _props.cluster,\n                    selectedIndexers = _props.selectedIndexers,\n                    processData = _props.processData,\n                    open = _props.open,\n                    loader = _props.loader,\n                    isReview = _props.isReview;\n\n                return _react2.default.createElement(_CollectorCard2.default, {\n                    id: 8,\n                    name: "lsof",\n                    handler: this.handleChildren,\n                    availMatrix: availMatrix,\n                    collectorObj: collectorObj,\n                    search_debug: search_debug,\n                    customStyle: this.props.customStyle,\n                    isReview: isReview,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 28\n                    },\n                    __self: this\n                }, _react2.default.createElement(_ProcessSelector.ProcessSelector, {\n                    handler: this.handleChildren,\n                    collectorName: "lsof",\n                    search_debug: search_debug,\n                    collectorObj: collectorObj,\n                    cluster: cluster,\n                    selectedIndexers: selectedIndexers,\n                    open: open,\n                    processData: processData,\n                    loader: loader,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 38\n                    },\n                    __self: this\n                }));\n            }\n        }]);\n\n        return Lsof;\n    }(_react.Component);\n\n    Lsof.defaultProps = {\n        isReview: false\n    };\n\n    exports.default = Lsof;\n\n    /***/\n},\n/* 87 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/src/components/SplunkDiag/SplunkDiag.jsx";\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _CollectorCard = __webpack_require__(2);\n\n    var _CollectorCard2 = _interopRequireDefault(_CollectorCard);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError("Cannot call a class as a function");\n        }\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n        }return call && ((typeof call === \'undefined\' ? \'undefined\' : _typeof(call)) === "object" || typeof call === "function") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== "function" && superClass !== null) {\n            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === \'undefined\' ? \'undefined\' : _typeof(superClass)));\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var SplunkDiag = function (_Component) {\n        _inherits(SplunkDiag, _Component);\n\n        function SplunkDiag(props) {\n            _classCallCheck(this, SplunkDiag);\n\n            var _this = _possibleConstructorReturn(this, (SplunkDiag.__proto__ || Object.getPrototypeOf(SplunkDiag)).call(this, props));\n\n            _this.handleChildren = function (attribute, value) {\n                _this.props.handler(attribute, value);\n            };\n\n            _this.state = {};\n            return _this;\n        }\n\n        _createClass(SplunkDiag, [{\n            key: "render",\n            value: function render() {\n                var _props = this.props,\n                    availMatrix = _props.availMatrix,\n                    collectorObj = _props.collectorObj,\n                    search_debug = _props.search_debug,\n                    isReview = _props.isReview;\n\n                return _react2.default.createElement(_CollectorCard2.default, {\n                    id: 9,\n                    name: "splunk_diag",\n                    handler: this.handleChildren,\n                    availMatrix: availMatrix,\n                    collectorObj: collectorObj,\n                    search_debug: search_debug,\n                    customStyle: this.props.customStyle,\n                    isReview: isReview,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 18\n                    },\n                    __self: this\n                });\n            }\n        }]);\n\n        return SplunkDiag;\n    }(_react.Component);\n\n    SplunkDiag.defaultProps = {\n        isReview: false\n    };\n\n    exports.default = SplunkDiag;\n\n    /***/\n},\n/* 88 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/src/components/SearchDebug/SearchDebug.jsx";\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _ControlGroup = __webpack_require__(10);\n\n    var _ControlGroup2 = _interopRequireDefault(_ControlGroup);\n\n    var _TextInput = __webpack_require__(16);\n\n    var _TextInput2 = _interopRequireDefault(_TextInput);\n\n    var _CollectorCard = __webpack_require__(2);\n\n    var _CollectorCard2 = _interopRequireDefault(_CollectorCard);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError("Cannot call a class as a function");\n        }\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n        }return call && ((typeof call === \'undefined\' ? \'undefined\' : _typeof(call)) === "object" || typeof call === "function") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== "function" && superClass !== null) {\n            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === \'undefined\' ? \'undefined\' : _typeof(superClass)));\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var width = 175;\n\n    var SearchDebug = function (_Component) {\n        _inherits(SearchDebug, _Component);\n\n        function SearchDebug(props) {\n            _classCallCheck(this, SearchDebug);\n\n            var _this = _possibleConstructorReturn(this, (SearchDebug.__proto__ || Object.getPrototypeOf(SearchDebug)).call(this, props));\n\n            _this.handleChildren = function (attribute, value) {\n                _this.props.handler(attribute, value);\n            };\n\n            _this.state = {};\n            return _this;\n        }\n\n        _createClass(SearchDebug, [{\n            key: "render",\n            value: function render() {\n                var _props = this.props,\n                    availMatrix = _props.availMatrix,\n                    collectorObj = _props.collectorObj,\n                    search_debug = _props.search_debug,\n                    isReview = _props.isReview;\n\n                return _react2.default.createElement(_CollectorCard2.default, {\n                    id: 1,\n                    name: "search_debug",\n                    handler: this.handleChildren,\n                    collectorObj: collectorObj,\n                    search_debug: search_debug,\n                    availMatrix: availMatrix,\n                    customStyle: this.props.customStyle,\n                    isReview: isReview,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 21\n                    },\n                    __self: this\n                }, _react2.default.createElement(_ControlGroup2.default, {\n                    label: "Search Regex",\n                    tooltip: "Enter the regular expression to match the search",\n                    labelWidth: width,\n                    style: { marginTop: "30px" },\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 31\n                    },\n                    __self: this\n                }, _react2.default.createElement(_TextInput2.default, {\n                    name: "search_regex",\n                    collectorObj: collectorObj,\n                    cardName: "search_debug",\n                    disabled: !collectorObj.selected,\n                    handler: this.handleChildren,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 37\n                    },\n                    __self: this\n                })));\n            }\n        }]);\n\n        return SearchDebug;\n    }(_react.Component);\n\n    SearchDebug.defaultProps = {\n        isReview: false\n    };\n\n    exports.default = SearchDebug;\n\n    /***/\n},\n/* 89 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/src/components/CollectionInformation/CollectionInformation.jsx";\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _i18n = __webpack_require__(3);\n\n    var _Card = __webpack_require__(7);\n\n    var _Card2 = _interopRequireDefault(_Card);\n\n    var _Text = __webpack_require__(13);\n\n    var _Text2 = _interopRequireDefault(_Text);\n\n    var _ControlGroup = __webpack_require__(10);\n\n    var _ControlGroup2 = _interopRequireDefault(_ControlGroup);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError("Cannot call a class as a function");\n        }\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n        }return call && ((typeof call === \'undefined\' ? \'undefined\' : _typeof(call)) === "object" || typeof call === "function") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== "function" && superClass !== null) {\n            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === \'undefined\' ? \'undefined\' : _typeof(superClass)));\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var width = 175;\n    var cardHeaderStyle = {\n        height: "60px",\n        borderRadius: "20px 20px 0 0"\n    };\n    var cardStyle = {\n        boxShadow: "0 6px 20px 0 rgba(0, 0, 0, 0.19)",\n        borderRadius: "10px",\n        border: "0px",\n        margin: "5px"\n    };\n\n    var CollectionInformation = function (_Component) {\n        _inherits(CollectionInformation, _Component);\n\n        function CollectionInformation() {\n            var _ref;\n\n            var _temp, _this, _ret;\n\n            _classCallCheck(this, CollectionInformation);\n\n            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n            }\n\n            return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CollectionInformation.__proto__ || Object.getPrototypeOf(CollectionInformation)).call.apply(_ref, [this].concat(args))), _this), _this.handleChildren = function (e, _ref2) {\n                var name = _ref2.name,\n                    value = _ref2.value;\n\n                _this.props.handler(name, value);\n            }, _temp), _possibleConstructorReturn(_this, _ret);\n        }\n\n        _createClass(CollectionInformation, [{\n            key: "render",\n            value: function render() {\n                var _props$collectorObj = this.props.collectorObj,\n                    name = _props$collectorObj.name,\n                    description = _props$collectorObj.description;\n\n                return _react2.default.createElement(_Card2.default, { style: cardStyle, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 27\n                    },\n                    __self: this\n                }, _react2.default.createElement(_Card2.default.Header, { style: cardHeaderStyle, title: "Collection Information", __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 28\n                    },\n                    __self: this\n                }), _react2.default.createElement(_Card2.default.Body, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 29\n                    },\n                    __self: this\n                }, _react2.default.createElement(_ControlGroup2.default, { label: "Name", labelWidth: width, style: { marginTop: "10px" }, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 30\n                    },\n                    __self: this\n                }, _react2.default.createElement(_Text2.default, { inline: true, value: name, onChange: this.handleChildren, name: "name", __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 31\n                    },\n                    __self: this\n                })), _react2.default.createElement(_ControlGroup2.default, {\n                    label: "Description",\n                    labelWidth: width,\n                    style: { marginTop: "10px" },\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 33\n                    },\n                    __self: this\n                }, _react2.default.createElement(_Text2.default, {\n                    multiline: true,\n                    inline: true,\n                    value: description,\n                    onChange: this.handleChildren,\n                    placeholder: "optional",\n                    name: "description",\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 38\n                    },\n                    __self: this\n                }))));\n            }\n        }]);\n\n        return CollectionInformation;\n    }(_react.Component);\n\n    exports.default = CollectionInformation;\n\n    /***/\n},\n/* 90 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/src/components/DistributedCollection/DistributedCollection.jsx";\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _i18n = __webpack_require__(3);\n\n    var _Card = __webpack_require__(7);\n\n    var _Card2 = _interopRequireDefault(_Card);\n\n    var _ClusterConfiguration = __webpack_require__(91);\n\n    var _PopOverText = __webpack_require__(21);\n\n    var _PopOverText2 = _interopRequireDefault(_PopOverText);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _objectWithoutProperties(obj, keys) {\n        var target = {};for (var i in obj) {\n            if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];\n        }return target;\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError("Cannot call a class as a function");\n        }\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n        }return call && ((typeof call === \'undefined\' ? \'undefined\' : _typeof(call)) === "object" || typeof call === "function") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== "function" && superClass !== null) {\n            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === \'undefined\' ? \'undefined\' : _typeof(superClass)));\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var cardHeaderStyle = {\n        height: "60px",\n        borderRadius: "20px 20px 0 0"\n    };\n    var cardStyle = {\n        boxShadow: "0 6px 20px 0 rgba(0, 0, 0, 0.19)",\n        borderRadius: "10px",\n        border: "0px",\n        margin: "5px"\n    };\n\n    var helpText = "\\n* Select multiple connected peers from the dropdown.\\n\\n* Only showing those peers that have RapidDiag app enabled.\\n\\n* The first option in the drop-down is the local instance.\\n";\n\n    var DistributedCollection = function (_Component) {\n        _inherits(DistributedCollection, _Component);\n\n        function DistributedCollection() {\n            var _ref;\n\n            var _temp, _this, _ret;\n\n            _classCallCheck(this, DistributedCollection);\n\n            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n            }\n\n            return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = DistributedCollection.__proto__ || Object.getPrototypeOf(DistributedCollection)).call.apply(_ref, [this].concat(args))), _this), _this.handleChildren = function (attribute, value) {\n                _this.props.handler(attribute, value);\n            }, _temp), _possibleConstructorReturn(_this, _ret);\n        }\n\n        _createClass(DistributedCollection, [{\n            key: "render",\n            value: function render() {\n                var _props = this.props,\n                    handler = _props.handler,\n                    data = _objectWithoutProperties(_props, ["handler"]);\n\n                return _react2.default.createElement(_Card2.default, { style: cardStyle, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 32\n                    },\n                    __self: this\n                }, _react2.default.createElement(_Card2.default.Header, { style: cardHeaderStyle, title: "Distributed Collection", __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 33\n                    },\n                    __self: this\n                }), _react2.default.createElement(_Card2.default.Body, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 34\n                    },\n                    __self: this\n                }, _react2.default.createElement("div", { style: { padding: "30px" }, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 35\n                    },\n                    __self: this\n                }, _react2.default.createElement(_ClusterConfiguration.ClusterConfiguration, {\n                    handler: this.handleChildren,\n                    data: data.collectorObj,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 36\n                    },\n                    __self: this\n                }), _react2.default.createElement(_PopOverText2.default, {\n                    buttonStyle: {},\n                    dialogueBoxStyle: { padding: "10px" },\n                    help: helpText,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 40\n                    },\n                    __self: this\n                }))));\n            }\n        }]);\n\n        return DistributedCollection;\n    }(_react.Component);\n\n    exports.default = DistributedCollection;\n\n    /***/\n},\n/* 91 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    exports.ClusterConfiguration = undefined;\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/step-wizard/src/components/ClusterConfiguration/ClusterConfiguration.jsx";\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _Multiselect = __webpack_require__(41);\n\n    var _Multiselect2 = _interopRequireDefault(_Multiselect);\n\n    var _propTypes = __webpack_require__(1);\n\n    var _propTypes2 = _interopRequireDefault(_propTypes);\n\n    var _i18n = __webpack_require__(3);\n\n    var _ClusterConfigurationStyle = __webpack_require__(92);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _defineProperty(obj, key, value) {\n        if (key in obj) {\n            Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n        } else {\n            obj[key] = value;\n        }return obj;\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError("Cannot call a class as a function");\n        }\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n        }return call && ((typeof call === \'undefined\' ? \'undefined\' : _typeof(call)) === "object" || typeof call === "function") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== "function" && superClass !== null) {\n            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === \'undefined\' ? \'undefined\' : _typeof(superClass)));\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var ClusterConfiguration = exports.ClusterConfiguration = function (_Component) {\n        _inherits(ClusterConfiguration, _Component);\n\n        function ClusterConfiguration(props) {\n            _classCallCheck(this, ClusterConfiguration);\n\n            var _this = _possibleConstructorReturn(this, (ClusterConfiguration.__proto__ || Object.getPrototypeOf(ClusterConfiguration)).call(this, props));\n\n            _this.handleChange = function (e, _ref) {\n                var name = _ref.name,\n                    values = _ref.values;\n\n                if (_this.props.data.indexerList.length === 1) {\n                    _this.setState({ cluster: false });\n                    _this.props.handler("cluster", false);\n                } else if (values.length > 0) {\n                    _this.setState({ cluster: true });\n                    _this.props.handler("cluster", true);\n                } else {\n                    _this.setState({ cluster: false });\n                    _this.props.handler("cluster", false);\n                }\n                _this.setState(_defineProperty({}, name, values));\n                _this.props.handler(name, values);\n            };\n\n            _this.handleChildren = function (attribute, value) {\n                _this.setState(_defineProperty({}, attribute, value));\n                _this.props.handler(attribute, value);\n            };\n\n            _this.handleClick = function (e) {\n                e.stopPropagation();\n                try {\n                    e.stopImmediatePropagation();\n                } catch (err) {}\n            };\n\n            _this.state = {\n                cluster: _this.props.data.cluster,\n                selectedIndexers: _this.props.data.selectedIndexers,\n                indexerList: _this.props.data.indexerList,\n                indexer_dropdown_message: (0, _i18n._)("No matches"),\n                rapidDiagData: _this.props.data.rapidDiagData,\n                clusterLoader: _this.props.data.clusterLoader\n            };\n            return _this;\n        }\n\n        _createClass(ClusterConfiguration, [{\n            key: "componentDidUpdate",\n            value: function componentDidUpdate(prevProps, prevState) {\n                if (prevProps.data !== this.props.data) {\n                    this.setState(this.props.data);\n                }\n\n                if (this.props.data.indexerList !== prevProps.data.indexerList) {\n                    if (this.props.data.indexerList.length === 1) {\n                        this.setState({ selectedIndexers: this.props.data.indexerList });\n                        this.props.handler("selectedIndexers", this.props.data.indexerList);\n                    }\n                }\n            }\n\n            /**\n             * Updates the state of component and passes upadated value to parent component\n             */\n\n            /**\n             * function passes child component data to parent component\n             */\n\n            /**\n             * function handles the click event on `ClusterConfiguration`\n             */\n\n        }, {\n            key: "render",\n            value: function render() {\n                var _this2 = this;\n\n                var _state = this.state,\n                    indexerList = _state.indexerList,\n                    clusterLoader = _state.clusterLoader,\n                    selectedIndexers = _state.selectedIndexers;\n\n                return _react2.default.createElement(_ClusterConfigurationStyle.StyledMultiSelect, {\n                    values: selectedIndexers,\n                    inline: true,\n                    placeholder: "Select Peer Nodes",\n                    onChange: this.handleChange,\n                    isLoadingOptions: clusterLoader,\n                    menuStyle: { maxHeight: "200px", minWidth: "200px" },\n                    name: "selectedIndexers",\n                    compact: true,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 109\n                    },\n                    __self: this\n                }, indexerList.map(function (server) {\n                    return _react2.default.createElement(_Multiselect2.default.Option, { label: server, value: server, key: server, __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 119\n                        },\n                        __self: _this2\n                    });\n                }));\n            }\n        }]);\n\n        return ClusterConfiguration;\n    }(_react.Component);\n\n    ClusterConfiguration.propTypes = {\n        /**\n         * data: props from `StepWizard`\n         */\n        data: _propTypes2.default.object,\n\n        /**\n         * handler: function to pass children data to parent\n         */\n        handler: _propTypes2.default.func,\n\n        /**\n         * cluster: cluster data collection is enable or disabled\n         */\n        cluster: _propTypes2.default.bool,\n\n        /**\n         * selectedIndexers: selected peers in cluster\n         */\n        selectedIndexers: _propTypes2.default.array,\n\n        /**\n         * indexerList: list of peers in cluster\n         */\n        indexerList: _propTypes2.default.array,\n\n        /**\n         * rapidDiagData: details of `runningCollectors` and `unavailbleUtilities` in every cluster peer\n         */\n        rapidDiagData: _propTypes2.default.array,\n\n        /**\n         * localHostName: name of localhost machine\n         */\n        localHostName: _propTypes2.default.string\n    };\n\n    /***/\n},\n/* 92 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    exports.StyledMultiSelect = undefined;\n\n    var _templateObject = _taggedTemplateLiteral(["\\n\\n    & [data-test=toggle] {\\n        border: 0;\\n        background: #ffffff;\\n        box-shadow: rgba(0, 0, 0, 0) 0px 10px 10px -10px\\n\\n\\n        &: hover {\\n            border: 0;\\n            background-color: #ffffff;\\n            box-shadow: rgba(92, 192, 92, 0.48) 0px 10px 10px -10px\\n        }\\n\\n        &: focus {\\n            border: 0;\\n            background-color: #ffffff;\\n            box-shadow: rgba(92, 192, 92, 0.48) 0px 10px 10px -10px\\n        }\\n    }\\n"], ["\\n\\n    & [data-test=toggle] {\\n        border: 0;\\n        background: #ffffff;\\n        box-shadow: rgba(0, 0, 0, 0) 0px 10px 10px -10px\\n\\n\\n        &: hover {\\n            border: 0;\\n            background-color: #ffffff;\\n            box-shadow: rgba(92, 192, 92, 0.48) 0px 10px 10px -10px\\n        }\\n\\n        &: focus {\\n            border: 0;\\n            background-color: #ffffff;\\n            box-shadow: rgba(92, 192, 92, 0.48) 0px 10px 10px -10px\\n        }\\n    }\\n"]);\n\n    var _styledComponents = __webpack_require__(6);\n\n    var _styledComponents2 = _interopRequireDefault(_styledComponents);\n\n    var _Multiselect = __webpack_require__(41);\n\n    var _Multiselect2 = _interopRequireDefault(_Multiselect);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _taggedTemplateLiteral(strings, raw) {\n        return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));\n    }\n\n    var StyledMultiSelect = exports.StyledMultiSelect = (0, _styledComponents2.default)(_Multiselect2.default)(_templateObject);\n\n    /***/\n},\n/* 93 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/src/components/Periodic/Periodic.jsx";\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _i18n = __webpack_require__(3);\n\n    var _ControlGroup = __webpack_require__(10);\n\n    var _ControlGroup2 = _interopRequireDefault(_ControlGroup);\n\n    var _NumberInput = __webpack_require__(15);\n\n    var _NumberInput2 = _interopRequireDefault(_NumberInput);\n\n    var _CollectorCard = __webpack_require__(2);\n\n    var _CollectorCard2 = _interopRequireDefault(_CollectorCard);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError("Cannot call a class as a function");\n        }\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n        }return call && ((typeof call === \'undefined\' ? \'undefined\' : _typeof(call)) === "object" || typeof call === "function") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== "function" && superClass !== null) {\n            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === \'undefined\' ? \'undefined\' : _typeof(superClass)));\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var Periodic = function (_Component) {\n        _inherits(Periodic, _Component);\n\n        function Periodic(props) {\n            _classCallCheck(this, Periodic);\n\n            var _this = _possibleConstructorReturn(this, (Periodic.__proto__ || Object.getPrototypeOf(Periodic)).call(this, props));\n\n            _this.handleChildren = function (attribute, value) {\n                _this.props.handler(attribute, value);\n            };\n\n            _this.state = {};\n            return _this;\n        }\n\n        _createClass(Periodic, [{\n            key: "render",\n            value: function render() {\n                var width = 175;\n                var _props = this.props,\n                    availMatrix = _props.availMatrix,\n                    collectorObj = _props.collectorObj,\n                    search_debug = _props.search_debug,\n                    isReview = _props.isReview;\n\n                return _react2.default.createElement(_CollectorCard2.default, {\n                    id: 5,\n                    name: "periodic",\n                    handler: this.handleChildren,\n                    availMatrix: availMatrix,\n                    collectorObj: collectorObj,\n                    search_debug: search_debug,\n                    customStyle: this.props.customStyle,\n                    isReview: isReview,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 21\n                    },\n                    __self: this\n                }, _react2.default.createElement(_ControlGroup2.default, {\n                    label: "Number of Samples",\n                    labelWidth: width,\n                    tooltip: "Enter the number of samples to be generated for each collector",\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 31\n                    },\n                    __self: this\n                }, _react2.default.createElement(_NumberInput2.default, {\n                    collectorName: "periodic",\n                    inline: true,\n                    collectorObj: collectorObj,\n                    roundTo: 0,\n                    placeholder: "Enter the number of samples",\n                    handler: this.handleChildren,\n                    style: { float: "left" },\n                    min: 0,\n                    name: "sampleCount",\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 36\n                    },\n                    __self: this\n                })), _react2.default.createElement(_ControlGroup2.default, {\n                    label: "Period",\n                    labelWidth: width,\n                    tooltip: "Enter the interval (in seconds) between each sample",\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 48\n                    },\n                    __self: this\n                }, _react2.default.createElement(_NumberInput2.default, {\n                    collectorName: "periodic",\n                    inline: true,\n                    collectorObj: collectorObj,\n                    placeholder: "Enter Interval (in Seconds)",\n                    handler: this.handleChildren,\n                    style: { float: "left" },\n                    min: 0,\n                    name: "interval",\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 53\n                    },\n                    __self: this\n                })));\n            }\n        }]);\n\n        return Periodic;\n    }(_react.Component);\n\n    Periodic.defaultProps = {\n        isReview: false\n    };\n\n    exports.default = Periodic;\n\n    /***/\n},\n/* 94 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/src/components/LogMonitor/LogMonitor.jsx";\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _i18n = __webpack_require__(3);\n\n    var _ControlGroup = __webpack_require__(10);\n\n    var _ControlGroup2 = _interopRequireDefault(_ControlGroup);\n\n    var _Select = __webpack_require__(95);\n\n    var _Select2 = _interopRequireDefault(_Select);\n\n    var _url = __webpack_require__(4);\n\n    var _TextInput = __webpack_require__(16);\n\n    var _TextInput2 = _interopRequireDefault(_TextInput);\n\n    var _CollectorCard = __webpack_require__(2);\n\n    var _CollectorCard2 = _interopRequireDefault(_CollectorCard);\n\n    var _CommonService = __webpack_require__(14);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError("Cannot call a class as a function");\n        }\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n        }return call && ((typeof call === \'undefined\' ? \'undefined\' : _typeof(call)) === "object" || typeof call === "function") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== "function" && superClass !== null) {\n            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === \'undefined\' ? \'undefined\' : _typeof(superClass)));\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var LogMonitor = function (_Component) {\n        _inherits(LogMonitor, _Component);\n\n        function LogMonitor(props) {\n            var _this2 = this;\n\n            _classCallCheck(this, LogMonitor);\n\n            var _this = _possibleConstructorReturn(this, (LogMonitor.__proto__ || Object.getPrototypeOf(LogMonitor)).call(this, props));\n\n            _this.getLogFilesList = function () {\n                var list = Object.values(_this.state.fileList).map(function (file) {\n                    return _this.createOption(file);\n                });\n                return list;\n            };\n\n            _this.createOption = function (file) {\n                var isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                return _react2.default.createElement(_Select2.default.Option, {\n                    label: file,\n                    value: file,\n                    key: isSelected ? "selected" : file,\n                    hidden: !!isSelected,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 42\n                    },\n                    __self: _this2\n                });\n            };\n\n            _this.handleFileChange = function (e, _ref) {\n                var name = _ref.name,\n                    value = _ref.value;\n\n                var tempState = _this.props.collectorObj;\n                if (e.key === "Enter") {\n                    tempState.selected = true;\n                }\n                tempState[name] = value;\n                _this.props.handler("log_monitor", [tempState]);\n            };\n\n            _this.handleChildren = function (attribute, value) {\n                _this.props.handler(attribute, value);\n            };\n\n            _this.state = {\n                fileList: []\n            };\n            return _this;\n        }\n\n        _createClass(LogMonitor, [{\n            key: "componentDidMount",\n            value: function componentDidMount() {\n                var _this3 = this;\n\n                this.setState({ isLoading: true });\n                var url = (0, _url.createRESTURL)("rapid_diag/get_log_files");\n                var peers = this.props.cluster ? this.props.selectedIndexers : [];\n                var params = { peers: JSON.stringify(peers) };\n\n                (0, _CommonService.axiosGetCall)(url, params).then(function (responseJson) {\n                    _this3.setState({ isLoading: false });\n                    _this3.setState({ fileList: responseJson.data });\n                    _this3.handleChildren("fileList", responseJson.data);\n                }).catch(function () {\n                    _this3.setState({ isLoading: false });\n                });\n            }\n\n            // create options on the basis of request output list\n\n        }, {\n            key: "render",\n            value: function render() {\n                var _props = this.props,\n                    availMatrix = _props.availMatrix,\n                    collectorObj = _props.collectorObj,\n                    search_debug = _props.search_debug,\n                    isReview = _props.isReview;\n\n                var isSearchDebug = search_debug.filter(function (collector) {\n                    return collector.selected === true;\n                }).length > 0;\n                var width = 175;\n                var fileList = this.getLogFilesList();\n                return _react2.default.createElement(_CollectorCard2.default, {\n                    id: 5,\n                    name: "log_monitor",\n                    handler: this.handleChildren,\n                    availMatrix: availMatrix,\n                    collectorObj: collectorObj,\n                    search_debug: search_debug,\n                    disabled: isSearchDebug && !isReview,\n                    customStyle: this.props.customStyle,\n                    isReview: isReview,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 70\n                    },\n                    __self: this\n                }, _react2.default.createElement(_ControlGroup2.default, {\n                    label: "Select File",\n                    labelWidth: width,\n                    tooltip: "Select the file to monitor",\n                    style: { textAlign: "left", marginLeft: "5%" },\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 81\n                    },\n                    __self: this\n                }, _react2.default.createElement(_Select2.default, {\n                    value: collectorObj.selectedFile,\n                    inline: true,\n                    placeholder: (0, _i18n._)("Select a file..."),\n                    isLoadingOptions: this.state.isLoading,\n                    onChange: this.handleFileChange,\n                    noOptionsMessage: "No matches",\n                    menuStyle: { maxHeight: 200 },\n                    style: { width: 230 },\n                    name: "selectedFile",\n                    disabled: !collectorObj.selected || isSearchDebug && !isReview,\n                    filter: true,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 87\n                    },\n                    __self: this\n                }, fileList)), _react2.default.createElement(_ControlGroup2.default, {\n                    label: "Regex",\n                    labelWidth: width,\n                    tooltip: "Enter the regex",\n                    style: { textAlign: "left", marginLeft: "5%" },\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 103\n                    },\n                    __self: this\n                }, _react2.default.createElement(_TextInput2.default, {\n                    inline: true,\n                    cardName: "log_monitor",\n                    collectorObj: collectorObj,\n                    disabled: isSearchDebug && !isReview,\n                    handler: this.handleChildren,\n                    name: "regex",\n                    style: { float: "left" },\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 109\n                    },\n                    __self: this\n                })));\n            }\n        }]);\n\n        return LogMonitor;\n    }(_react.Component);\n\n    LogMonitor.defaultProps = {\n        isReview: false\n    };\n\n    exports.default = LogMonitor;\n\n    /***/\n},\n/* 95 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(255);\n\n    /***/\n},\n/* 96 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/src/components/ResourceMonitor/ResourceMonitor.jsx";\n\n    var _extends = Object.assign || function (target) {\n        for (var i = 1; i < arguments.length; i++) {\n            var source = arguments[i];for (var key in source) {\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }return target;\n    };\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _Number = __webpack_require__(39);\n\n    var _Number2 = _interopRequireDefault(_Number);\n\n    var _ControlGroup = __webpack_require__(10);\n\n    var _ControlGroup2 = _interopRequireDefault(_ControlGroup);\n\n    var _Switch = __webpack_require__(42);\n\n    var _Switch2 = _interopRequireDefault(_Switch);\n\n    var _CollectorCard = __webpack_require__(2);\n\n    var _CollectorCard2 = _interopRequireDefault(_CollectorCard);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError("Cannot call a class as a function");\n        }\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n        }return call && ((typeof call === \'undefined\' ? \'undefined\' : _typeof(call)) === "object" || typeof call === "function") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== "function" && superClass !== null) {\n            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === \'undefined\' ? \'undefined\' : _typeof(superClass)));\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var defaultMetric = {\n        threshold: null,\n        metric: null,\n        __class__: "rapid_diag.collector.trigger.resource_monitor_trackers.MovingAverageResourceMonitorTracker",\n        invert: false,\n        target: "system",\n        num_samples: 10\n    };\n    var invertHelp = "\\nWhen Invert is False, Data collection would get started if any of the resource usage goes above the configured threshold value.\\n\\nWhen Invert is True, Data collection would get started if any of the resource usage goes below the configured threshold value.\\n\\n### For example: \\n* CPU Usage is set to 10% and Invert is True, the data collection would get started when the CPU Usage goes below 10%.\\n* CPU Usage is set to 10% and Invert is False, the data collection would get started when the CPU Usage goes above 10%.\\n";\n\n    var ResourceMonitor = function (_Component) {\n        _inherits(ResourceMonitor, _Component);\n\n        function ResourceMonitor(props) {\n            _classCallCheck(this, ResourceMonitor);\n\n            var _this = _possibleConstructorReturn(this, (ResourceMonitor.__proto__ || Object.getPrototypeOf(ResourceMonitor)).call(this, props));\n\n            _this.getMetricThreshold = function (metric) {\n                if (_this.props.collectorObj.resource_monitor_trackers.length > 0) {\n                    for (var i = 0; i < _this.props.collectorObj.resource_monitor_trackers.length; i++) {\n                        if (metric === _this.props.collectorObj.resource_monitor_trackers[i].metric) {\n                            return _this.props.collectorObj.resource_monitor_trackers[i].threshold;\n                        }\n                    }\n                }\n                return null;\n            };\n\n            _this.getMetricInvert = function () {\n                var metricInvert = { cpu: false, physical_memory: false, virtual_memory: false };\n                if (_this.props.collectorObj.resource_monitor_trackers.length > 0) {\n                    _this.props.collectorObj.resource_monitor_trackers.forEach(function (tracker) {\n                        metricInvert[tracker.metric] = tracker.invert;\n                    });\n                }\n                return metricInvert;\n            };\n\n            _this.removeEmptyTriggers = function (tempState) {\n                if (tempState.resource_monitor_trackers) {\n                    for (var i = tempState.resource_monitor_trackers.length - 1; i >= 0; i--) {\n                        if (!tempState.resource_monitor_trackers[i].invert && [null, undefined].indexOf(tempState.resource_monitor_trackers[i].threshold) > -1) {\n                            tempState.resource_monitor_trackers.splice(i, 1);\n                        }\n                    }\n                }\n                _this.handleChildren("resource_monitor", [tempState]);\n            };\n\n            _this.handleInvert = function (e, name) {\n                var tempState = Object.assign({}, _this.props.collectorObj);\n                var found = false;\n                if (tempState.resource_monitor_trackers.length > 0) {\n                    for (var i = 0; i < tempState.resource_monitor_trackers.length; i++) {\n                        if (tempState.resource_monitor_trackers[i].metric === name) {\n                            tempState.resource_monitor_trackers[i].invert = !tempState.resource_monitor_trackers[i].invert;\n                            found = true;\n                            break;\n                        }\n                    }\n                    if (!found) {\n                        tempState.resource_monitor_trackers.push(_extends({}, defaultMetric, { metric: name, invert: true }));\n                    }\n                } else {\n                    tempState.resource_monitor_trackers = [_extends({}, defaultMetric, { metric: name, invert: true })];\n                }\n                _this.removeEmptyTriggers(tempState);\n                e.stopPropagation();\n                try {\n                    e.stopImmediatePropagation();\n                } catch (err) {}\n            };\n\n            _this.handleChange = function (e, name, value) {\n                var tempState = Object.assign({}, _this.props.collectorObj);\n                var invert = _this.getMetricInvert()[name];\n                var found = false;\n                if (tempState.resource_monitor_trackers.length > 0) {\n                    for (var i = 0; i < tempState.resource_monitor_trackers.length; i++) {\n                        if (name === tempState.resource_monitor_trackers[i].metric) {\n                            tempState.resource_monitor_trackers[i].threshold = value;\n                            found = true;\n                            break;\n                        }\n                    }\n                    if (!found) {\n                        tempState.resource_monitor_trackers.push(_extends({}, defaultMetric, { metric: name, threshold: value, invert: invert }));\n                    }\n                } else {\n                    tempState.resource_monitor_trackers = [_extends({}, defaultMetric, { metric: name, threshold: value })];\n                }\n                _this.removeEmptyTriggers(tempState);\n            };\n\n            _this.handleClick = function (e) {\n                var tempState = _this.props.collectorObj;\n                if (!tempState.selected) {\n                    tempState.selected = true;\n                    _this.handleChildren("resource_monitor", [tempState]);\n                }\n                e.stopPropagation();\n                try {\n                    e.stopImmediatePropagation();\n                } catch (err) {}\n            };\n\n            _this.handleChildren = function (attribute, value) {\n                _this.props.handler(attribute, value);\n            };\n\n            _this.state = {};\n            return _this;\n        }\n\n        // handle invert checkbox changes and send it to parent\n\n\n        // On change, send the data to parent\n        // Put the changed value in the object of that metric in resource_monitor trackers list\n\n\n        _createClass(ResourceMonitor, [{\n            key: "render",\n            value: function render() {\n                var _this2 = this;\n\n                var _props = this.props,\n                    availMatrix = _props.availMatrix,\n                    collectorObj = _props.collectorObj,\n                    search_debug = _props.search_debug,\n                    isReview = _props.isReview;\n\n                var isSearchDebug = search_debug.filter(function (collector) {\n                    return collector.selected === true;\n                }).length > 0;\n                var width = 125;\n                var metricInvert = this.getMetricInvert();\n                return _react2.default.createElement(_CollectorCard2.default, {\n                    id: 5,\n                    name: "resource_monitor",\n                    handler: this.handleChildren,\n                    availMatrix: availMatrix,\n                    collectorObj: collectorObj,\n                    search_debug: search_debug,\n                    disabled: isSearchDebug && !isReview,\n                    customStyle: this.props.customStyle,\n                    isReview: isReview,\n                    helpInfo: invertHelp,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 146\n                    },\n                    __self: this\n                }, _react2.default.createElement(_ControlGroup2.default, {\n                    label: "CPU Usage",\n                    labelWidth: width,\n                    tooltip: "Enter the CPU threshold in percentage ",\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 158\n                    },\n                    __self: this\n                }, _react2.default.createElement(_Number2.default, {\n                    inline: true,\n                    value: this.getMetricThreshold("cpu"),\n                    placeholder: "Enter the threshold for CPU (%)",\n                    onChange: function onChange(e, _ref) {\n                        var value = _ref.value;\n                        return _this2.handleChange(e, "cpu", value);\n                    },\n                    onClick: function onClick(e) {\n                        return !isSearchDebug ? _this2.handleClick(e) : null;\n                    },\n                    disabled: !collectorObj.selected || isSearchDebug && !isReview,\n                    style: { float: "left", marginLeft: "5%" },\n                    min: 0,\n                    name: "cpu",\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 163\n                    },\n                    __self: this\n                }), _react2.default.createElement("div", { style: { marginLeft: "10px" }, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 174\n                    },\n                    __self: this\n                }, _react2.default.createElement(_Switch2.default, {\n                    id: "cpu",\n                    name: "cpu_invert",\n                    value: metricInvert.cpu,\n                    onClick: function onClick(e) {\n                        return _this2.handleInvert(e, "cpu");\n                    },\n                    disabled: !collectorObj.selected || isSearchDebug && !isReview,\n                    selected: metricInvert.cpu,\n                    appearance: "checkbox",\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 175\n                    },\n                    __self: this\n                }))), _react2.default.createElement(_ControlGroup2.default, {\n                    label: "Physical Memory",\n                    labelWidth: width,\n                    tooltip: "Enter the threshold for Physical Memory",\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 186\n                    },\n                    __self: this\n                }, _react2.default.createElement(_Number2.default, {\n                    inline: true,\n                    value: this.getMetricThreshold("physical_memory"),\n                    placeholder: "Enter the threshold for Physical Memory(in MB)",\n                    onChange: function onChange(e, _ref2) {\n                        var value = _ref2.value;\n                        return _this2.handleChange(e, "physical_memory", value);\n                    },\n                    onClick: function onClick(e) {\n                        return !isSearchDebug ? _this2.handleClick(e) : null;\n                    },\n                    disabled: !collectorObj.selected || isSearchDebug && !isReview,\n                    style: { float: "left", marginLeft: "5%" },\n                    min: 0,\n                    name: "physical_memory",\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 191\n                    },\n                    __self: this\n                }), _react2.default.createElement("div", { style: { marginLeft: "10px" }, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 202\n                    },\n                    __self: this\n                }, _react2.default.createElement(_Switch2.default, {\n                    id: "physical_memory",\n                    name: "physical_memory_invert",\n                    value: metricInvert.physical_memory,\n                    onClick: function onClick(e) {\n                        return _this2.handleInvert(e, "physical_memory");\n                    },\n                    disabled: !collectorObj.selected || isSearchDebug && !isReview,\n                    selected: metricInvert.physical_memory,\n                    appearance: "checkbox",\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 203\n                    },\n                    __self: this\n                }))), _react2.default.createElement(_ControlGroup2.default, {\n                    label: "Virtual Memory",\n                    labelWidth: width,\n                    tooltip: "Enter the threshold for Virtual Memory",\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 214\n                    },\n                    __self: this\n                }, _react2.default.createElement(_Number2.default, {\n                    inline: true,\n                    value: this.getMetricThreshold("virtual_memory"),\n                    placeholder: "Enter the threshold for Virtual Memory(in MB)",\n                    onChange: function onChange(e, _ref3) {\n                        var value = _ref3.value;\n                        return _this2.handleChange(e, "virtual_memory", value);\n                    },\n                    onClick: function onClick(e) {\n                        return !isSearchDebug ? _this2.handleClick(e) : null;\n                    },\n                    disabled: !collectorObj.selected || isSearchDebug && !isReview,\n                    style: { float: "left", marginLeft: "5%" },\n                    min: 0,\n                    name: "virtual_memory",\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 219\n                    },\n                    __self: this\n                }), _react2.default.createElement("div", { style: { marginLeft: "10px" }, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 230\n                    },\n                    __self: this\n                }, _react2.default.createElement(_Switch2.default, {\n                    id: "virtual_memory",\n                    name: "virtual_memory_invert",\n                    value: metricInvert.virtual_memory,\n                    onClick: function onClick(e) {\n                        return _this2.handleInvert(e, "virtual_memory");\n                    },\n                    disabled: !collectorObj.selected || isSearchDebug && !isReview,\n                    selected: metricInvert.virtual_memory,\n                    appearance: "checkbox",\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 231\n                    },\n                    __self: this\n                }))));\n            }\n        }]);\n\n        return ResourceMonitor;\n    }(_react.Component);\n\n    ResourceMonitor.defaultProps = {\n        isReview: false\n    };\n\n    exports.default = ResourceMonitor;\n\n    /***/\n},\n/* 97 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    /* eslint-disable no-restricted-syntax */\n    /* eslint-disable func-names */\n    var allValidations = {\n        collection_info: function collection_info(stateObj) {\n            var valid = true;\n            var action_needed = {};\n            var validFile = this.utils.isValidName.call(this, stateObj.name);\n            var message = "";\n\n            if (!validFile.status) {\n                action_needed.name = validFile.message;\n                valid = valid && false;\n            }\n            if (stateObj.description && stateObj.description.length > 0) {\n                if (stateObj.description.length > 8192) {\n                    message = "Collection Description cannot contain more than 8192 characters.";\n                    action_needed.description = message;\n                    valid = valid && false;\n                }\n                if (!stateObj.description.trim().length) {\n                    message = "Collection Description should not contain only spaces.";\n                    action_needed.description = message;\n                    valid = valid && false;\n                }\n            }\n            return { valid: valid, action_needed: action_needed };\n        },\n        distributed_collection: function distributed_collection(stateObj) {\n            var message = "";\n            var valid = true;\n            var action_needed = {};\n\n            if (stateObj.selectedIndexers < 1) {\n                message = "Please select peers from the dropdown.";\n                action_needed.selectedIndexers = message;\n                valid = valid && false;\n            }\n            return { valid: valid, action_needed: action_needed };\n        },\n        search_debug: function search_debug(stateObj) {\n            var message = "";\n            var valid = true;\n            var action_needed = {};\n\n            if (stateObj.search_debug.selected === true) {\n                if (!stateObj.search_debug.search_regex || stateObj.search_debug.search_regex.length === 0) {\n                    message = "Please enter the regular expression to match the search.";\n                    action_needed.search_regex = message;\n                    valid = valid && false;\n                }\n                if (valid && stateObj.search_debug.search_regex.trim().length === 0) {\n                    message = "Search regex should not contain only spaces.";\n                    action_needed.search_regex = message;\n                    valid = valid && false;\n                }\n            }\n            return { valid: valid, action_needed: action_needed };\n        },\n        system_call_trace: function system_call_trace(stateObj) {\n            var message = "";\n            var action_needed = {};\n            var valid = true;\n            var result = false;\n            var serachResult = stateObj.search_debug ? this.utils.getSearchDebugFlag.call(this, stateObj.search_debug) : false;\n\n            if (stateObj.system_call_trace.selected) {\n                if (!serachResult && !stateObj.system_call_trace.process) {\n                    message = "Please select a process for System Call Trace collector.";\n                    action_needed.process = message;\n                    valid = valid && false;\n                }\n\n                result = this.utils.validateBoundedFloat.call(this, "Collection Time", stateObj.system_call_trace.collection_time, true, 10, 2592000);\n                if (result !== true) {\n                    action_needed.collection_time = result;\n                    valid = valid && false;\n                }\n            }\n            return { valid: valid, action_needed: action_needed };\n        },\n        stack_trace: function stack_trace(stateObj) {\n            var message = "";\n            var valid = true;\n            var action_needed = {};\n            var serachResult = stateObj.search_debug ? this.utils.getSearchDebugFlag.call(this, stateObj.search_debug) : false;\n\n            if (stateObj.stack_trace.selected) {\n                if (!serachResult && !stateObj.stack_trace.process) {\n                    message = "Please select a process for Stack Trace collector.";\n                    action_needed.process = message;\n                    valid = valid && false;\n                }\n            }\n            return { valid: valid, action_needed: action_needed };\n        },\n        network_packet: function network_packet(stateObj) {\n            var message = "";\n            var action_needed = {};\n            var valid = true;\n            var result = false;\n\n            if (stateObj.network_packet.selected) {\n                var v4Seg = "(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])";\n                var v4Str = "(" + v4Seg + "[.]){3}" + v4Seg;\n                var IPv4Reg = new RegExp("^" + v4Str + "$");\n\n                var v6Seg = "(?:[0-9a-fA-F]{1,4})";\n                var IPv6Reg = new RegExp("^(" + ("(?:" + v6Seg + ":){7}(?:" + v6Seg + "|:)|") + ("(?:" + v6Seg + ":){6}(?:" + v4Str + "|:" + v6Seg + "|:)|") + ("(?:" + v6Seg + ":){5}(?::" + v4Str + "|(:" + v6Seg + "){1,2}|:)|") + ("(?:" + v6Seg + ":){4}(?:(:" + v6Seg + "){0,1}:" + v4Str + "|(:" + v6Seg + "){1,3}|:)|") + ("(?:" + v6Seg + ":){3}(?:(:" + v6Seg + "){0,2}:" + v4Str + "|(:" + v6Seg + "){1,4}|:)|") + ("(?:" + v6Seg + ":){2}(?:(:" + v6Seg + "){0,3}:" + v4Str + "|(:" + v6Seg + "){1,5}|:)|") + ("(?:" + v6Seg + ":){1}(?:(:" + v6Seg + "){0,4}:" + v4Str + "|(:" + v6Seg + "){1,6}|:)|") + ("(?::((?::" + v6Seg + "){0,5}:" + v4Str + "|(?::" + v6Seg + "){1,7}|:))") + ")(%[0-9a-zA-Z]{1,})?$");\n\n                if (!this.utils.isEmpty(stateObj.network_packet.ip_address) && !(IPv4Reg.test(stateObj.network_packet.ip_address) || IPv6Reg.test(stateObj.network_packet.ip_address))) {\n                    message = "Please enter valid IP Address.";\n                    action_needed.ip_address = message;\n                    valid = valid && false;\n                }\n\n                result = this.utils.validateBoundedInt.call(this, "Port", stateObj.network_packet.port, false, 1, 65535);\n                if (result !== true) {\n                    action_needed.port = result;\n                    valid = valid && false;\n                }\n\n                result = this.utils.validateBoundedFloat.call(this, "Collection Time", stateObj.network_packet.collection_time, true, 10, 2592000);\n                if (result !== true) {\n                    action_needed.collection_time = result;\n                    valid = valid && false;\n                }\n            }\n            return { valid: valid, action_needed: action_needed };\n        },\n        search_result: function search_result(stateObj) {\n            var message = "";\n            var action_needed = {};\n            var valid = true;\n\n            if (stateObj.search_result.selected) {\n                if (!stateObj.search_result.search_query) {\n                    message = "Please enter a search query.";\n                    action_needed.search_query = message;\n                    valid = valid && false;\n                }\n                if (valid && stateObj.search_result.search_query.trim().length === 0) {\n                    message = "Search query must not contain only spaces.";\n                    action_needed.search_query = message;\n                    valid = valid && false;\n                }\n            }\n            return { valid: valid, action_needed: action_needed };\n        },\n        iops: function iops(stateObj) {\n            var action_needed = {};\n            var result = false;\n            var valid = true;\n\n            if (stateObj.iops.selected) {\n                result = this.utils.validateBoundedFloat.call(this, "Collection Time", stateObj.iops.collection_time, true, 10, 2592000);\n                if (result !== true) {\n                    action_needed.collection_time = result;\n                    valid = valid && false;\n                }\n            }\n            return { valid: valid, action_needed: action_needed };\n        },\n        netstat: function netstat(stateObj) {\n            return { valid: true, action_needed: {} };\n        },\n        ps: function ps(stateObj) {\n            return { valid: true, action_needed: {} };\n        },\n        lsof: function lsof(stateObj) {\n            var message = "";\n            var valid = true;\n            var action_needed = {};\n            var serachResult = stateObj.search_debug ? this.utils.getSearchDebugFlag.call(this, stateObj.search_debug) : false;\n\n            if (stateObj.lsof.selected) {\n                if (!serachResult && !stateObj.lsof.process) {\n                    message = "Please select a process for LSOF collector.";\n                    action_needed.process = message;\n                    valid = valid && false;\n                }\n            }\n            return { valid: valid, action_needed: action_needed };\n        },\n        splunk_diag: function splunk_diag(stateObj) {\n            return { valid: true, action_needed: {} };\n        },\n        periodic: function periodic(stateObj) {\n            var result = false;\n            var valid = true;\n            var action_needed = {};\n\n            if (stateObj.periodic.selected) {\n                result = this.utils.validateBoundedInt.call(this, "Number of Samples", stateObj.periodic.sampleCount, true, 1, 1e9);\n                if (result !== true) {\n                    action_needed.sampleCount = result;\n                    valid = valid && false;\n                }\n\n                result = this.utils.validateBoundedFloat.call(this, "Period", stateObj.periodic.interval, true, 0.01, 2592000);\n                if (result !== true) {\n                    action_needed.interval = result;\n                    valid = valid && false;\n                }\n            }\n            return { valid: valid, action_needed: action_needed };\n        },\n        log_monitor: function log_monitor(stateObj) {\n            var message = "";\n            var valid = true;\n            var action_needed = {};\n\n            if (stateObj.log_monitor.selected) {\n                if (!stateObj.log_monitor.selectedFile) {\n                    message = "Please select a file from dropdown.";\n                    action_needed.selectedFile = message;\n                    valid = valid && false;\n                }\n                if (!stateObj.log_monitor.regex) {\n                    message = "Please enter a regex.";\n                    action_needed.regex = message;\n                    valid = valid && false;\n                }\n                if (valid && !stateObj.log_monitor.regex.trim().length) {\n                    message = "Regex should not contain only spaces.";\n                    action_needed.regex = message;\n                    valid = valid && false;\n                }\n            }\n            return { valid: valid, action_needed: action_needed };\n        },\n        resource_monitor: function resource_monitor(stateObj) {\n            var message = "";\n            var result = false;\n            var action_needed = {};\n            var valid = true;\n\n            if (stateObj.resource_monitor.selected) {\n                var resourceMonitorParamsEnum = {\n                    cpu: "CPU",\n                    physical_memory: "Physical Memory",\n                    virtual_memory: "Virtual Memory"\n                };\n\n                if (this.utils.isEmpty(this.utils.getMetricThreshold("cpu", stateObj.resource_monitor)) && this.utils.isEmpty(this.utils.getMetricThreshold("physical_memory", stateObj.resource_monitor)) && this.utils.isEmpty(this.utils.getMetricThreshold("virtual_memory", stateObj.resource_monitor))) {\n                    message = "Enter value of CPU, Physical Memory & Virtual Memory.";\n                    action_needed.resource_monitor = message;\n                    valid = valid && false;\n                    return { valid: valid, action_needed: action_needed };\n                }\n\n                var _arr = ["cpu", "physical_memory", "virtual_memory"];\n                for (var _i = 0; _i < _arr.length; _i++) {\n                    var param = _arr[_i];\n                    if (this.utils.isZero(this.utils.getMetricThreshold(param, stateObj.resource_monitor))) {\n                        message = resourceMonitorParamsEnum[param] + " value should be greater than 0.01.";\n                        action_needed[param] = message;\n                        valid = valid && false;\n                    }\n                }\n\n                if (valid) {\n                    var _arr2 = ["cpu", "physical_memory", "virtual_memory"];\n\n                    for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n                        var _param = _arr2[_i2];\n                        result = this.utils.isValidTrackerInput(this.utils.getMetricThreshold(_param, stateObj.resource_monitor), this.utils.getMetricInvert(_param, stateObj.resource_monitor));\n                        if (result) {\n                            message = "Enter a value of " + resourceMonitorParamsEnum[_param];\n                            action_needed[_param] = message;\n                            valid = valid && false;\n                        }\n                    }\n                }\n\n                if (valid) {\n                    result = this.utils.validateBoundedFloat.call(this, resourceMonitorParamsEnum.cpu, this.utils.getMetricThreshold("cpu", stateObj.resource_monitor), false, 0.01, 100);\n                    if (result !== true) {\n                        action_needed.cpu = result;\n                        valid = valid && false;\n                    }\n\n                    result = this.utils.validateBoundedFloat.call(this, resourceMonitorParamsEnum.physical_memory, this.utils.getMetricThreshold("physical_memory", stateObj.resource_monitor), false, 0.01, 1e9);\n                    if (result !== true) {\n                        action_needed.physical_memory = result;\n                        valid = valid && false;\n                    }\n\n                    result = this.utils.validateBoundedFloat.call(this, resourceMonitorParamsEnum.virtual_memory, this.utils.getMetricThreshold("virtual_memory", stateObj.resource_monitor), false, 0.01, 1e9);\n                    if (result !== true) {\n                        action_needed.virtual_memory = result;\n                        valid = valid && false;\n                    }\n                }\n            }\n            return { valid: valid, action_needed: action_needed };\n        },\n\n        utils: {\n            INVALID_FILE_CHARS: /[\\\\/:*?"<>|]/g,\n            isValidName: function isValidName(name) {\n                var invalidFileChars = this.utils.INVALID_FILE_CHARS;\n\n                if (!name || name.length === 0 || /^\\s+$/.test(name)) {\n                    return { status: false, message: "Collection Name cannot be empty." };\n                }\n\n                if (!(typeof name === "string" || name instanceof String)) {\n                    return { status: false, message: "Collection Name must be a string." }; // check for data type\n                }\n\n                invalidFileChars.lastIndex = 0;\n                if (invalidFileChars.test(name)) {\n                    return { status: false, message: "Collection Name contains invalid character(s)." }; // check for certain invalid characters\n                }\n\n                if (name === "." || name === "..") {\n                    return { status: false, message: "Collection Name contains invalid character(s)." }; // check for reserved values\n                }\n\n                if (name.length > 256) {\n                    return { valid: false, message: "Collection name cannot contain more than 256 characters." };\n                }\n\n                return { status: true };\n            },\n            isEmpty: function isEmpty(value) {\n                return value === "" || value === null || value === undefined;\n            },\n            isBound: function isBound(value, min, max) {\n                return min !== null && value < min || max !== null && value > max;\n            },\n            isZero: function isZero(value) {\n                return value === 0;\n            },\n            isValidTrackerInput: function isValidTrackerInput(value, invert) {\n                return invert && !value;\n            },\n            messageBound: function messageBound(description, min, max) {\n                var message = description + " value should be";\n                message += min !== null ? " at least " + min : "";\n                message += min !== null && max !== null ? " and" : "";\n                message += max !== null ? " at most " + max : "";\n                return message;\n            },\n            validateBoundedFloat: function validateBoundedFloat(description, value, isMandatory) {\n                var min = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n                var max = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n\n                if (this.utils.isEmpty(value)) {\n                    return isMandatory ? description + " cannot be empty." : true;\n                }\n                if (!Number.isFinite(value)) {\n                    return description + " should be a float.";\n                }\n                if (this.utils.isBound(value, min, max)) {\n                    var message = this.utils.messageBound(description, min, max);\n                    return message;\n                }\n                return true;\n            },\n            validateBoundedInt: function validateBoundedInt(description, value, isMandatory) {\n                var min = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n                var max = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n\n                if (this.utils.isEmpty(value)) {\n                    return isMandatory ? description + " cannot be empty." : true;\n                }\n                if (!Number.isInteger(value)) {\n                    return description + " should be an integer.";\n                }\n                if (this.utils.isBound(value, min, max)) {\n                    var message = this.utils.messageBound(description, min, max);\n                    return message;\n                }\n                return true;\n            },\n            getMetricThreshold: function getMetricThreshold(metric, resource_monitor) {\n                if (resource_monitor.resource_monitor_trackers.length > 0) {\n                    for (var i = 0; i < resource_monitor.resource_monitor_trackers.length; i++) {\n                        if (metric === resource_monitor.resource_monitor_trackers[i].metric) {\n                            return resource_monitor.resource_monitor_trackers[i].threshold;\n                        }\n                    }\n                }\n                return "";\n            },\n            getMetricInvert: function getMetricInvert(metric, resource_monitor) {\n                if (resource_monitor.resource_monitor_trackers.length > 0) {\n                    for (var i = 0; i < resource_monitor.resource_monitor_trackers.length; i++) {\n                        if (metric === resource_monitor.resource_monitor_trackers[i].metric) {\n                            return resource_monitor.resource_monitor_trackers[i].invert;\n                        }\n                    }\n                }\n                return false;\n            },\n            getSearchDebugFlag: function getSearchDebugFlag(search_debug) {\n                return search_debug.filter(function (search_debug) {\n                    return search_debug.selected == true;\n                }).length > 0;\n            }\n        }\n    };\n\n    var validate = exports.validate = function validate(cardName, stateObj) {\n        return allValidations[cardName](stateObj);\n    };\n\n    /***/\n},\n/* 98 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var checkCollectorInfo = exports.checkCollectorInfo = function checkCollectorInfo(currentState, selectedCollectors) {\n        var runningCollectors = {};\n        var unavailableUtilities = {};\n        var rapidDiagData = currentState.rapidDiagData;\n\n        if (!currentState.cluster) {\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = rapidDiagData[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var data = _step.value;\n\n                    var value = JSON.parse(data.value);\n                    if (value.splunk_server === currentState.localHostName) {\n                        rapidDiagData = [data];\n                    }\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n        }\n\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n            for (var _iterator2 = rapidDiagData[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var _data = _step2.value;\n\n                var _value = JSON.parse(_data.value);\n                var peer = _value.splunk_server;\n                if (currentState.cluster && currentState.selectedIndexers.indexOf(peer) === -1) {\n                    continue;\n                }\n                for (var collector in _value.running_collectors) {\n                    if (!selectedCollectors[collector]) {\n                        continue;\n                    }\n                    runningCollectors[collector] = runningCollectors[collector] || []; // init if new\n                    runningCollectors[collector].push(peer);\n                }\n                for (var _collector in _value.unavailable_utilities) {\n                    if (!selectedCollectors[_collector]) {\n                        continue;\n                    }\n                    for (var utility in _value.unavailable_utilities[_collector]) {\n                        var utilityMessage = _value.unavailable_utilities[_collector][utility];\n                        unavailableUtilities[_collector] = unavailableUtilities[_collector] || {}; // init if new\n                        unavailableUtilities[_collector][utilityMessage] = unavailableUtilities[_collector][utilityMessage] || [];\n                        unavailableUtilities[_collector][utilityMessage].push(peer);\n                    }\n                }\n            }\n        } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                    _iterator2.return();\n                }\n            } finally {\n                if (_didIteratorError2) {\n                    throw _iteratorError2;\n                }\n            }\n        }\n\n        var availMatrix = {\n            runningCollectors: runningCollectors,\n            unavailableUtilities: unavailableUtilities\n        };\n        return availMatrix;\n    };\n\n    /***/\n},\n/* 99 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var _jsxFileName = \'/build/nurse/splunk_rapid_diag/appserver/src/packages/task-manager/src/ErrorModal.jsx\';\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _Modal = __webpack_require__(8);\n\n    var _Modal2 = _interopRequireDefault(_Modal);\n\n    var _Button = __webpack_require__(5);\n\n    var _Button2 = _interopRequireDefault(_Button);\n\n    var _Message = __webpack_require__(12);\n\n    var _Message2 = _interopRequireDefault(_Message);\n\n    var _List = __webpack_require__(31);\n\n    var _List2 = _interopRequireDefault(_List);\n\n    var _Error = __webpack_require__(32);\n\n    var _Error2 = _interopRequireDefault(_Error);\n\n    var _JSON_KEY_BINDINGS = __webpack_require__(11);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _defineProperty(obj, key, value) {\n        if (key in obj) {\n            Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n        } else {\n            obj[key] = value;\n        }return obj;\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError("Cannot call a class as a function");\n        }\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n        }return call && ((typeof call === \'undefined\' ? \'undefined\' : _typeof(call)) === "object" || typeof call === "function") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== "function" && superClass !== null) {\n            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === \'undefined\' ? \'undefined\' : _typeof(superClass)));\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var ErrorModal = function (_Component) {\n        _inherits(ErrorModal, _Component);\n\n        function ErrorModal() {\n            var _ref;\n\n            _classCallCheck(this, ErrorModal);\n\n            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n            }\n\n            var _this = _possibleConstructorReturn(this, (_ref = ErrorModal.__proto__ || Object.getPrototypeOf(ErrorModal)).call.apply(_ref, [this].concat(args)));\n\n            _this.handleRequestOpen = function (e) {\n                e.stopPropagation();\n                _this.setState({\n                    open: true\n                });\n            };\n\n            _this.handleRequestClose = function (e) {\n                _this.setState({\n                    open: false\n                });\n            };\n\n            _this.stopPropagation = function (e) {\n                e.stopPropagation();\n            };\n\n            _this.state = {\n                open: false,\n                hostDown: _this.props.hostDown || false,\n                availMatrix: _this.props.availMatrix || { "running_collectors": {}, "unavailable_utilities": {} },\n                keys: _this.props.keys || []\n            };\n            return _this;\n        }\n\n        _createClass(ErrorModal, [{\n            key: \'showMyCollectorsIn\',\n            value: function showMyCollectorsIn(collectors, caller) {\n                var collectorMessage = [];\n                var show = false;\n                for (var collector in collectors) {\n                    if (this.state.keys.has(collector)) {\n                        show = true;\n                        if (caller === "unavailable_utilities") {\n                            collectorMessage.push(_react2.default.createElement(_react.Fragment, {\n                                __source: {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 42\n                                },\n                                __self: this\n                            }, _react2.default.createElement(_List2.default.Item, { id: \'errorModalItem\', __source: {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 43\n                                },\n                                __self: this\n                            }, _JSON_KEY_BINDINGS.KEY_BINDING[collector] + \': \' + Object.values(collectors[collector])[0])));\n                        } else {\n                            collectorMessage.push(_react2.default.createElement(_react.Fragment, {\n                                __source: {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 50\n                                },\n                                __self: this\n                            }, _react2.default.createElement(_List2.default.Item, { id: \'errorModalItem\', __source: {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 51\n                                },\n                                __self: this\n                            }, \'\' + _JSON_KEY_BINDINGS.KEY_BINDING[collector])));\n                        }\n                    }\n                }\n                return { show: show, collectorMessage: collectorMessage };\n            }\n        }, {\n            key: \'showHostError\',\n            value: function showHostError() {\n                var messages = [\'Check if the host is up.\', \'Check if splunk is running on this host.\', \'Check if splunk_rapid_diag app is enabled.\'];\n                var hostMessage = [];\n                var show = false;\n                if (this.state.hostDown) {\n                    show = true;\n                    var _iteratorNormalCompletion = true;\n                    var _didIteratorError = false;\n                    var _iteratorError = undefined;\n\n                    try {\n                        for (var _iterator = messages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                            var message = _step.value;\n\n                            hostMessage.push(_react2.default.createElement(_react.Fragment, {\n                                __source: {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 71\n                                },\n                                __self: this\n                            }, _react2.default.createElement(_List2.default.Item, { id: \'errorModalHostMessage\', __source: {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 72\n                                },\n                                __self: this\n                            }, message)));\n                        }\n                    } catch (err) {\n                        _didIteratorError = true;\n                        _iteratorError = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion && _iterator.return) {\n                                _iterator.return();\n                            }\n                        } finally {\n                            if (_didIteratorError) {\n                                throw _iteratorError;\n                            }\n                        }\n                    }\n                }\n                return { show: show, hostMessage: hostMessage };\n            }\n        }, {\n            key: \'render\',\n            value: function render() {\n                var _React$createElement;\n\n                var data = this.state.availMatrix;\n                var showRunningCollectors = this.showMyCollectorsIn(data.running_collectors, "running_collectors").show;\n                var runningCollectorsData = this.showMyCollectorsIn(data.running_collectors, "running_collectors").collectorMessage;\n                var showUnavailableCollectors = this.showMyCollectorsIn(data.unavailable_utilities, "unavailable_utilities").show;\n                var unavailableCollectorsData = this.showMyCollectorsIn(data.unavailable_utilities, "unavailable_utilities").collectorMessage;\n\n                var showHostMessage = this.showHostError().show;\n                var hostMessage = this.showHostError().hostMessage;\n\n                return _react2.default.createElement(_react.Fragment, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 97\n                    },\n                    __self: this\n                }, _react2.default.createElement(_Button2.default, (_React$createElement = { id: \'errorModalButton\', icon: _react2.default.createElement(_Error2.default, { style: { color: \'#DC4E41\', width: 24 + \'px\', height: 24 + \'px\' }, __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 98\n                        },\n                        __self: this\n                    }), appearance: \'pill\', size: \'small\', style: { marginTop: -6 + \'px\' }, onClick: this.handleRequestOpen }, _defineProperty(_React$createElement, \'style\', { maxWidth: 20 }), _defineProperty(_React$createElement, \'__source\', {\n                    fileName: _jsxFileName,\n                    lineNumber: 98\n                }), _defineProperty(_React$createElement, \'__self\', this), _React$createElement)), _react2.default.createElement(_Modal2.default, { id: \'errorModal\', onRequestClose: this.handleRequestClose, open: this.state.open, style: { width: \'1000px\' }, onClick: this.stopPropagation, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 99\n                    },\n                    __self: this\n                }, _react2.default.createElement(_Modal2.default.Header, { title: \'Collector Availability Information\', onRequestClose: this.handleRequestClose, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 100\n                    },\n                    __self: this\n                }), _react2.default.createElement(_Modal2.default.Body, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 101\n                    },\n                    __self: this\n                }, showRunningCollectors && _react2.default.createElement(\'div\', { style: { float: \'left\', marginRight: 250 + \'px\' }, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 104\n                    },\n                    __self: this\n                }, _react2.default.createElement(_Message2.default, { id: \'RunningCollectorError\', type: \'error\', __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 105\n                    },\n                    __self: this\n                }, \' \', \'Following collector(s) are already running on this host: \'), _react2.default.createElement(_List2.default, { id: \'RunningCollectorList\', __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 106\n                    },\n                    __self: this\n                }, runningCollectorsData)), showUnavailableCollectors && _react2.default.createElement(\'div\', { style: { float: \'left\', marginRight: 250 + \'px\' }, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 114\n                    },\n                    __self: this\n                }, _react2.default.createElement(_Message2.default, { id: \'unavailableUtilityError\', type: \'error\', __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 115\n                    },\n                    __self: this\n                }, "Following utilities can\'t be used in this Splunk Platform Instance: "), _react2.default.createElement(_List2.default, { id: \'unavailableUtilityList\', __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 116\n                    },\n                    __self: this\n                }, unavailableCollectorsData)), showHostMessage && _react2.default.createElement(\'div\', { style: { float: \'left\', marginRight: 250 + \'px\' }, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 124\n                    },\n                    __self: this\n                }, _react2.default.createElement(_Message2.default, { id: \'unavailableServiceOnHostError\', type: \'error\', __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 125\n                    },\n                    __self: this\n                }, \'Service is unavailable for this host\'), _react2.default.createElement(_List2.default, { id: \'unavailableServiceOnHostList\', __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 126\n                    },\n                    __self: this\n                }, hostMessage)))));\n            }\n        }]);\n\n        return ErrorModal;\n    }(_react.Component);\n\n    exports.default = ErrorModal;\n\n    /***/\n},\n/* 100 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/components/ConfirmationModal/ConfirmationModal.jsx";\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _Button = __webpack_require__(5);\n\n    var _Button2 = _interopRequireDefault(_Button);\n\n    var _Modal = __webpack_require__(8);\n\n    var _Modal2 = _interopRequireDefault(_Modal);\n\n    var _propTypes = __webpack_require__(1);\n\n    var _propTypes2 = _interopRequireDefault(_propTypes);\n\n    var _url = __webpack_require__(4);\n\n    var _TaskRunService = __webpack_require__(101);\n\n    var _TaskCatalougeHeaderStyles = __webpack_require__(9);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError("Cannot call a class as a function");\n        }\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n        }return call && ((typeof call === \'undefined\' ? \'undefined\' : _typeof(call)) === "object" || typeof call === "function") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== "function" && superClass !== null) {\n            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === \'undefined\' ? \'undefined\' : _typeof(superClass)));\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var ConfirmationModal = function (_Component) {\n        _inherits(ConfirmationModal, _Component);\n\n        function ConfirmationModal(props) {\n            _classCallCheck(this, ConfirmationModal);\n\n            var _this = _possibleConstructorReturn(this, (ConfirmationModal.__proto__ || Object.getPrototypeOf(ConfirmationModal)).call(this, props));\n\n            _this.handleRequestOpen = function (e) {\n                e.stopPropagation();\n                _this.setState({ open: true });\n            };\n\n            _this.handleRequestClose = function () {\n                _this.setState({ open: false });\n            };\n\n            _this.handleClick = function (e) {\n                e.stopPropagation();\n            };\n\n            _this.submit = function () {\n                var _this$props = _this.props,\n                    data = _this$props.data,\n                    url = _this$props.url;\n\n                var params = { name: data.task.name, task_id: data.task.task_id, host: data.task.host, local: 1 };\n                (0, _TaskRunService.axiosGetCall)(url, params).then(function () {\n                    window.location.href = (0, _url.createURL)("app/splunk_rapid_diag/task_manager");\n                });\n                _this.handleRequestClose();\n            };\n\n            _this.state = { open: false };\n            return _this;\n        }\n\n        _createClass(ConfirmationModal, [{\n            key: "render",\n            value: function render() {\n                return _react2.default.createElement("div", {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 58\n                    },\n                    __self: this\n                }, this.props.disableButton ? _react2.default.createElement(_TaskCatalougeHeaderStyles.StyleButton, { size: "small", appearance: "pill", style: { maxWidth: 20, paddingBottom: "4px" }, onClick: this.handleRequestOpen, icon: this.props.icon, disabled: true, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 60\n                    },\n                    __self: this\n                }) : _react2.default.createElement(_TaskCatalougeHeaderStyles.StyleButton, { size: "small", appearance: "pill", style: { maxWidth: 20, paddingBottom: "4px" }, onClick: this.handleRequestOpen, icon: this.props.icon, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 61\n                    },\n                    __self: this\n                }), _react2.default.createElement(_Modal2.default, {\n                    id: "confirmationModal",\n                    enablePeek: true,\n                    onRequestClose: this.handleRequestClose,\n                    open: this.state.open,\n                    style: { width: "600px" },\n                    onClick: this.handleClick,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 62\n                    },\n                    __self: this\n                }, _react2.default.createElement(_Modal2.default.Header, { title: "Confirmation", onRequestClose: this.handleRequestClose, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 70\n                    },\n                    __self: this\n                }), _react2.default.createElement(_Modal2.default.Body, { style: { fontSize: 17 + "px" }, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 71\n                    },\n                    __self: this\n                }, "Are you sure you want to " + this.props.type + " this task?"), _react2.default.createElement(_Modal2.default.Footer, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 74\n                    },\n                    __self: this\n                }, _react2.default.createElement(_Button2.default, {\n                    id: "confirmationModalCancelButton",\n                    appearance: "secondary",\n                    onClick: this.handleRequestClose,\n                    label: "Cancel",\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 75\n                    },\n                    __self: this\n                }), _react2.default.createElement(_Button2.default, { id: "confirmationModalSubmitButton", appearance: "primary", onClick: this.submit, label: "Confirm", __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 81\n                    },\n                    __self: this\n                }))));\n            }\n        }]);\n\n        return ConfirmationModal;\n    }(_react.Component);\n\n    ConfirmationModal.propTypes = {\n        /**\n         * data: props from parent\n         */\n        data: _propTypes2.default.object,\n\n        /**\n         * url: endpoint to request\n         */\n        url: _propTypes2.default.string,\n\n        /**\n         * disableButton: Action button enabled or disabled\n         */\n        disableButton: _propTypes2.default.bool\n    };\n    exports.default = ConfirmationModal;\n\n    /***/\n},\n/* 101 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    exports.axiosGetCall = undefined;\n\n    var _axios = __webpack_require__(35);\n\n    var _axios2 = _interopRequireDefault(_axios);\n\n    var _config = __webpack_require__(36);\n\n    var _url = __webpack_require__(4);\n\n    var _Toaster = __webpack_require__(37);\n\n    var _Toaster2 = _interopRequireDefault(_Toaster);\n\n    var _ToastConstants = __webpack_require__(38);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    var createToast = (0, _Toaster.makeCreateToast)(_Toaster2.default);\n\n    var axiosGetCall = function axiosGetCall(url, params) {\n\n        var actionURL = (0, _url.createRESTURL)(url);\n        var message = \'\';\n\n        // We are returning a promise here to stop page from redirecting in case of errors. When resolve() gets called then only \n        // .then() gets called which does the re-direction. In case of errors the promise will be rejected and .then() won\'t get called.\n        return new Promise(function (resolve, reject) {\n            _axios2.default.get(actionURL, {\n                params: params,\n                credentials: \'include\',\n                headers: {\n                    \'X-Splunk-Form-Key\': _config.CSRFToken,\n                    \'X-Requested-With\': \'XMLHttpRequest\',\n                    \'Content-Type\': \'application/json\'\n                }\n            }).catch(function (error) {\n                console.error(error);\n                message = \'Error making request to \' + url;\n                generateToast(message);\n                reject("reject");\n            });\n\n            setTimeout(function () {\n                resolve("resolved");\n            }, 2000);\n        });\n    };\n\n    var generateToast = function generateToast(message) {\n        createToast({\n            type: _ToastConstants.TOAST_TYPES.ERROR,\n            message: message,\n            autoDismiss: true,\n            dismissOnActionClick: true,\n            showAction: false\n        });\n    };\n\n    exports.axiosGetCall = axiosGetCall;\n\n    /***/\n},\n/* 102 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    exports.StyleCardLayout = exports.StylePanel = undefined;\n\n    var _templateObject = _taggedTemplateLiteral(["\\n    box-shadow: rgba(92, 192, 92, 0.38) 0px 10px 10px -10px;\\n    border-radius: 10px;\\n    z-index: 5;\\n    border: 0;\\n\\n    & [data-test=\'title\'] {\\n        margin: 5px;\\n    }\\n\\n    svg {\\n        margin-top: 5px;\\n    }\\n\\n    & [data-test=\'body\'] {\\n        padding: 10px;\\n    }\\n\\n    & [data-test=\'heading\'] {\\n        border-radius: 10px;\\n        position: sticky;\\n        top: 67px;\\n        z-index: 20;\\n    }\\n\\n    & [data-test=\'initials\'] {\\n        margin-top: -5px;\\n    }\\n\\n    & [data-test=\'toggle\'] {\\n        border-left: none;\\n        border-right: none;\\n        box-shadow: rgba(92, 192, 92, 0.48) 0px 10px 10px -10px;\\n        background: #ffffff;\\n        height: 50px;\\n        border: 0;\\n        position: sticky;\\n        top: 52px;\\n        z-index: 20;\\n\\n        &: hover {\\n            z-index: 30;\\n            box-shadow: rgba(92, 192, 92, 0.48) 0px 10px 10px -10px;\\n            background: #ffffff;\\n            border: 0;\\n        }\\n\\n        &: focus {\\n            z-index: 30;\\n            box-shadow: rgba(92, 192, 92, 0.48) 0px 10px 10px -10px;\\n        }\\n    }\\n"], ["\\n    box-shadow: rgba(92, 192, 92, 0.38) 0px 10px 10px -10px;\\n    border-radius: 10px;\\n    z-index: 5;\\n    border: 0;\\n\\n    & [data-test=\'title\'] {\\n        margin: 5px;\\n    }\\n\\n    svg {\\n        margin-top: 5px;\\n    }\\n\\n    & [data-test=\'body\'] {\\n        padding: 10px;\\n    }\\n\\n    & [data-test=\'heading\'] {\\n        border-radius: 10px;\\n        position: sticky;\\n        top: 67px;\\n        z-index: 20;\\n    }\\n\\n    & [data-test=\'initials\'] {\\n        margin-top: -5px;\\n    }\\n\\n    & [data-test=\'toggle\'] {\\n        border-left: none;\\n        border-right: none;\\n        box-shadow: rgba(92, 192, 92, 0.48) 0px 10px 10px -10px;\\n        background: #ffffff;\\n        height: 50px;\\n        border: 0;\\n        position: sticky;\\n        top: 52px;\\n        z-index: 20;\\n\\n        &: hover {\\n            z-index: 30;\\n            box-shadow: rgba(92, 192, 92, 0.48) 0px 10px 10px -10px;\\n            background: #ffffff;\\n            border: 0;\\n        }\\n\\n        &: focus {\\n            z-index: 30;\\n            box-shadow: rgba(92, 192, 92, 0.48) 0px 10px 10px -10px;\\n        }\\n    }\\n"]),\n        _templateObject2 = _taggedTemplateLiteral(["\\n    border-radius: 10px;\\n    padding: 10px;\\n"], ["\\n    border-radius: 10px;\\n    padding: 10px;\\n"]);\n\n    var _CollapsiblePanel = __webpack_require__(103);\n\n    var _CollapsiblePanel2 = _interopRequireDefault(_CollapsiblePanel);\n\n    var _styledComponents = __webpack_require__(6);\n\n    var _styledComponents2 = _interopRequireDefault(_styledComponents);\n\n    var _CardLayout = __webpack_require__(28);\n\n    var _CardLayout2 = _interopRequireDefault(_CardLayout);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _taggedTemplateLiteral(strings, raw) {\n        return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));\n    }\n\n    var StylePanel = (0, _styledComponents2.default)(_CollapsiblePanel2.default)(_templateObject);\n\n    var StyleCardLayout = (0, _styledComponents2.default)(_CardLayout2.default)(_templateObject2);\n\n    exports.StylePanel = StylePanel;\n    exports.StyleCardLayout = StyleCardLayout;\n\n    /***/\n},\n/* 103 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(812);\n\n    /***/\n},\n/* 104 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n\n    var _utils = __webpack_require__(105);\n\n    function _toConsumableArray(arr) {\n        if (Array.isArray(arr)) {\n            for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n                arr2[i] = arr[i];\n            }return arr2;\n        } else {\n            return Array.from(arr);\n        }\n    } /**\n       * File contains method for collection collector and trigger objects with name and decription from JSON file\n       * It creates the object of each collector and trigger\n       */\n\n    var getSystemCallCollector = function getSystemCallCollector(obj, collector, level, parentId) {\n        var reviewObj = obj;\n        if (reviewObj.system_call_trace === undefined) {\n            reviewObj.system_call_trace = [];\n        } else {\n            reviewObj.system_call_trace = [].concat(_toConsumableArray(reviewObj.system_call_trace));\n        }\n\n        var test = {\n            id: (0, _utils.generateUID)(),\n            selected: true,\n            level: level,\n            parentId: parentId,\n            __class__: collector.__class__,\n            process: collector.process,\n            collection_time: collector.collection_time,\n            action_needed: collector.action_needed\n        };\n        reviewObj.system_call_trace.push(test);\n    };\n\n    var getStackTraceCollector = function getStackTraceCollector(obj, collector, level, parentId) {\n        var reviewObj = obj;\n        if (reviewObj.stack_trace === undefined) {\n            reviewObj.stack_trace = [];\n        } else {\n            reviewObj.stack_trace = [].concat(_toConsumableArray(reviewObj.stack_trace));\n        }\n        var test = {\n            id: (0, _utils.generateUID)(),\n            selected: true,\n            level: level,\n            parentId: parentId,\n            __class__: collector.__class__,\n            process: collector.process,\n            action_needed: collector.action_needed\n        };\n        reviewObj.stack_trace.push(test);\n    };\n\n    var getNetworkPacketCollector = function getNetworkPacketCollector(obj, collector, level, parentId) {\n        var reviewObj = obj;\n        if (reviewObj.network_packet === undefined) {\n            reviewObj.network_packet = [];\n        } else {\n            reviewObj.network_packet = [].concat(_toConsumableArray(reviewObj.network_packet));\n        }\n        var test = {\n            id: (0, _utils.generateUID)(),\n            selected: true,\n            level: level,\n            parentId: parentId,\n            __class__: collector.__class__,\n            port: collector.port,\n            ip_address: collector.ip_address,\n            collection_time: collector.collection_time,\n            action_needed: collector.action_needed\n        };\n        reviewObj.network_packet.push(test);\n    };\n\n    var getSearchResultCollector = function getSearchResultCollector(obj, collector, level, parentId) {\n        var reviewObj = obj;\n        if (reviewObj.search_result === undefined) {\n            reviewObj.search_result = [];\n        } else {\n            reviewObj.search_result = [].concat(_toConsumableArray(reviewObj.search_result));\n        }\n        var test = {\n            id: (0, _utils.generateUID)(),\n            selected: true,\n            level: level,\n            parentId: parentId,\n            __class__: collector.__class__,\n            search_query: collector.search_query,\n            action_needed: collector.action_needed\n        };\n        reviewObj.search_result.push(test);\n    };\n\n    var getIOPSCollector = function getIOPSCollector(obj, collector, level, parentId) {\n        var reviewObj = obj;\n        if (reviewObj.iops === undefined) {\n            reviewObj.iops = [];\n        } else {\n            reviewObj.iops = [].concat(_toConsumableArray(reviewObj.iops));\n        }\n        var test = {\n            id: (0, _utils.generateUID)(),\n            selected: true,\n            level: level,\n            parentId: parentId,\n            __class__: collector.__class__,\n            collection_time: collector.collection_time,\n            action_needed: collector.action_needed\n        };\n\n        reviewObj.iops.push(test);\n    };\n\n    var getNetStatCollector = function getNetStatCollector(obj, collector, level, parentId) {\n        var reviewObj = obj;\n        if (reviewObj.netstat === undefined) {\n            reviewObj.netstat = [];\n        } else {\n            reviewObj.netstat = [].concat(_toConsumableArray(reviewObj.netstat));\n        }\n        var test = {\n            id: (0, _utils.generateUID)(),\n            selected: true,\n            level: level,\n            parentId: parentId,\n            __class__: collector.__class__,\n            action_needed: collector.action_needed\n        };\n\n        reviewObj.netstat.push(test);\n    };\n\n    var getPSCollector = function getPSCollector(obj, collector, level, parentId) {\n        var reviewObj = obj;\n        if (reviewObj.ps === undefined) {\n            reviewObj.ps = [];\n        } else {\n            reviewObj.ps = [].concat(_toConsumableArray(reviewObj.ps));\n        }\n        var test = {\n            id: (0, _utils.generateUID)(),\n            selected: true,\n            level: level,\n            parentId: parentId,\n            __class__: collector.__class__,\n            action_needed: collector.action_needed\n        };\n\n        reviewObj.ps.push(test);\n    };\n\n    var getLSOFCollector = function getLSOFCollector(obj, collector, level, parentId) {\n        var reviewObj = obj;\n        if (reviewObj.lsof === undefined) {\n            reviewObj.lsof = [];\n        } else {\n            reviewObj.lsof = [].concat(_toConsumableArray(reviewObj.lsof));\n        }\n        var test = {\n            id: (0, _utils.generateUID)(),\n            selected: true,\n            level: level,\n            parentId: parentId,\n            __class__: collector.__class__,\n            process: collector.process,\n            action_needed: collector.action_needed\n        };\n        reviewObj.lsof.push(test);\n    };\n\n    var getPeriodicCollector = function getPeriodicCollector(obj, collector, level, parentId) {\n        var reviewObj = obj;\n        var lvl = getLevel(level + 1);\n        if (reviewObj.periodic === undefined) {\n            reviewObj.periodic = [];\n        } else {\n            reviewObj.periodic = [].concat(_toConsumableArray(reviewObj.periodic));\n        }\n        var test = {\n            id: (0, _utils.generateUID)(),\n            selected: true,\n            level: level,\n            parentId: parentId,\n            __class__: collector.__class__,\n            interval: collector.interval,\n            sampleCount: collector.sampleCount,\n            action_needed: collector.action_needed\n        };\n\n        reviewObj.periodic.push(test);\n\n        if (collector.hasOwnProperty("collectors") && collector.collectors.length !== 0) {\n            getTriggersRecursive(reviewObj, collector.collectors, lvl, level);\n            getCollectorsRecursive(reviewObj, collector.collectors, lvl, level);\n        }\n    };\n\n    var getSplunkDiagCollector = function getSplunkDiagCollector(obj, collector, level, parentId) {\n        var reviewObj = obj;\n        if (reviewObj.splunk_diag === undefined) {\n            reviewObj.splunk_diag = [];\n        } else {\n            reviewObj.splunk_diag = [].concat(_toConsumableArray(reviewObj.splunk_diag));\n        }\n        var test = {\n            id: (0, _utils.generateUID)(),\n            selected: true,\n            level: level,\n            parentId: parentId,\n            __class__: collector.__class__,\n            action_needed: collector.action_needed\n        };\n\n        reviewObj.splunk_diag.push(test);\n    };\n\n    var getLogMonitorTrigger = function getLogMonitorTrigger(obj, collector, level, parentId) {\n        var reviewObj = obj;\n        var lvl = getLevel(level + 1);\n        if (reviewObj.log_monitor === undefined) {\n            reviewObj.log_monitor = [];\n        } else {\n            reviewObj.log_monitor = [].concat(_toConsumableArray(reviewObj.log_monitor));\n        }\n        var test = {\n            id: (0, _utils.generateUID)(),\n            selected: true,\n            level: level,\n            parentId: parentId,\n            __class__: collector.__class__,\n            selectedFile: collector.selectedFile,\n            regex: collector.regex,\n            action_needed: collector.action_needed\n        };\n\n        reviewObj.log_monitor.push(test);\n\n        if (collector.hasOwnProperty("collectors") && collector.collectors.length !== 0) {\n            getTriggersRecursive(reviewObj, collector.collectors, lvl, level);\n            getCollectorsRecursive(reviewObj, collector.collectors, lvl, level);\n        }\n    };\n\n    var getResourceMonitorTrigger = function getResourceMonitorTrigger(obj, collector, level, parentId) {\n        var reviewObj = obj;\n        var lvl = getLevel(level + 1);\n        if (reviewObj.resource_monitor === undefined) {\n            reviewObj.resource_monitor = [];\n        } else {\n            reviewObj.resource_monitor = [].concat(_toConsumableArray(reviewObj.resource_monitor));\n        }\n        var test = {\n            id: (0, _utils.generateUID)(),\n            selected: true,\n            level: level,\n            parentId: parentId,\n            __class__: collector.__class__,\n            resource_monitor_trackers: collector.resource_monitor_trackers,\n            action_needed: collector.action_needed\n        };\n\n        reviewObj.resource_monitor.push(test);\n\n        if (collector.hasOwnProperty("collectors") && collector.collectors.length !== 0) {\n            getTriggersRecursive(reviewObj, collector.collectors, lvl, level);\n            getCollectorsRecursive(reviewObj, collector.collectors, lvl, level);\n        }\n    };\n\n    var getSearchDebugTrigger = function getSearchDebugTrigger(obj, collector, level, parentId) {\n        var reviewObj = obj;\n        var lvl = getLevel(level + 1);\n        if (reviewObj.search_debug === undefined) {\n            reviewObj.search_debug = [];\n        } else {\n            reviewObj.search_debug = [].concat(_toConsumableArray(reviewObj.search_debug));\n        }\n        var test = {\n            id: (0, _utils.generateUID)(),\n            selected: true,\n            level: level,\n            parentId: parentId,\n            __class__: collector.__class__,\n            search_regex: collector.search_regex,\n            action_needed: collector.action_needed\n        };\n\n        reviewObj.search_debug.push(test);\n\n        if (collector.hasOwnProperty("collectors") && collector.collectors.length !== 0) {\n            getTriggersRecursive(reviewObj, collector.collectors, lvl, level);\n            getCollectorsRecursive(reviewObj, collector.collectors, lvl, level);\n        }\n    };\n\n    var getCollectorsRecursive = function getCollectorsRecursive(reviewObj, collectors, level, parentId) {\n        collectors.map(function (collector) {\n            if (collector.__class__.endsWith("SystemCallTrace")) {\n                var lvl = getLevel(level + 1);\n                getSystemCallCollector(reviewObj, collector, lvl, parentId);\n            } else if (collector.__class__.endsWith("StackTrace")) {\n                var _lvl = getLevel(level + 1);\n                getStackTraceCollector(reviewObj, collector, _lvl, parentId);\n            } else if (collector.__class__.endsWith("NetworkPacket")) {\n                var _lvl2 = getLevel(level + 1);\n                getNetworkPacketCollector(reviewObj, collector, _lvl2, parentId);\n            } else if (collector.__class__.endsWith("SearchResult")) {\n                var _lvl3 = getLevel(level + 1);\n                getSearchResultCollector(reviewObj, collector, _lvl3, parentId);\n            } else if (collector.__class__.endsWith("Diag")) {\n                var _lvl4 = getLevel(level + 1);\n                getSplunkDiagCollector(reviewObj, collector, _lvl4, parentId);\n            } else if (collector.__class__.endsWith("IOPS")) {\n                var _lvl5 = getLevel(level + 1);\n                getIOPSCollector(reviewObj, collector, _lvl5, parentId);\n            } else if (collector.__class__.endsWith("NetStat")) {\n                var _lvl6 = getLevel(level + 1);\n                getNetStatCollector(reviewObj, collector, _lvl6, parentId);\n            } else if (collector.__class__.endsWith("PS")) {\n                var _lvl7 = getLevel(level + 1);\n                getPSCollector(reviewObj, collector, _lvl7, parentId);\n            } else if (collector.__class__.endsWith("LSOF")) {\n                var _lvl8 = getLevel(level + 1);\n                getLSOFCollector(reviewObj, collector, _lvl8, parentId);\n            }\n        });\n    };\n\n    var getTriggersRecursive = function getTriggersRecursive(reviewObj, collectors, level, parentId) {\n        collectors.map(function (collector) {\n            if (collector.__class__.endsWith("SearchDebug")) {\n                var lvl = getLevel(level + 1);\n                getSearchDebugTrigger(reviewObj, collector, lvl, parentId);\n            } else if (collector.__class__.endsWith("ResourceMonitor")) {\n                var _lvl9 = getLevel(level + 1);\n                getResourceMonitorTrigger(reviewObj, collector, _lvl9, parentId);\n            } else if (collector.__class__.endsWith("LogMonitor")) {\n                var _lvl10 = getLevel(level + 1);\n                getLogMonitorTrigger(reviewObj, collector, _lvl10, parentId);\n            } else if (collector.__class__.endsWith("Periodic")) {\n                var _lvl11 = getLevel(level + 1);\n                getPeriodicCollector(reviewObj, collector, _lvl11, parentId);\n            }\n        });\n    };\n\n    var levels = new Set();\n\n    var getLevel = function getLevel(level) {\n        while (levels.has(level)) {\n            level += 1;\n        }\n\n        levels.add(level);\n        return level;\n    };\n\n    var extractObjects = function extractObjects(data) {\n        var obj = {};\n        data.collectors.map(function (trigger) {\n            if (trigger.__class__.endsWith("SearchDebug")) {\n                var lvl = getLevel(1);\n                getSearchDebugTrigger(obj, trigger, lvl, 0);\n            } else if (trigger.__class__.endsWith("ResourceMonitor")) {\n                var _lvl12 = getLevel(1);\n                getResourceMonitorTrigger(obj, trigger, _lvl12, 0);\n            } else if (trigger.__class__.endsWith("LogMonitor")) {\n                var _lvl13 = getLevel(1);\n                getLogMonitorTrigger(obj, trigger, _lvl13, 0);\n            } else if (trigger.__class__.endsWith("Periodic")) {\n                var _lvl14 = getLevel(1);\n                getPeriodicCollector(obj, trigger, _lvl14, 0);\n            } else {\n                var _lvl15 = getLevel(1);\n                getCollectorsRecursive(obj, [trigger], _lvl15, 0);\n            }\n        });\n        obj.name = data.name;\n        obj.description = data.description;\n        return obj;\n    };\n\n    exports.default = extractObjects;\n\n    /***/\n},\n/* 105 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var generateUID = function generateUID() {\n        return "_" + Math.random().toString(36).substr(2, 12);\n    };\n\n    exports.generateUID = generateUID;\n\n    /***/\n},\n/* 106 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/components/Helper/Helper.jsx";\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _InfoCircle = __webpack_require__(33);\n\n    var _InfoCircle2 = _interopRequireDefault(_InfoCircle);\n\n    var _Modal = __webpack_require__(8);\n\n    var _Modal2 = _interopRequireDefault(_Modal);\n\n    var _Markdown = __webpack_require__(34);\n\n    var _Markdown2 = _interopRequireDefault(_Markdown);\n\n    var _Switch = __webpack_require__(42);\n\n    var _Switch2 = _interopRequireDefault(_Switch);\n\n    var _RapidDiagHelpText = __webpack_require__(107);\n\n    var _TaskCatalougeHeaderStyles = __webpack_require__(9);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError("Cannot call a class as a function");\n        }\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n        }return call && ((typeof call === \'undefined\' ? \'undefined\' : _typeof(call)) === "object" || typeof call === "function") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== "function" && superClass !== null) {\n            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === \'undefined\' ? \'undefined\' : _typeof(superClass)));\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var Helper = function (_Component) {\n        _inherits(Helper, _Component);\n\n        function Helper(props) {\n            var _ref;\n\n            _classCallCheck(this, Helper);\n\n            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n                args[_key - 1] = arguments[_key];\n            }\n\n            var _this = _possibleConstructorReturn(this, (_ref = Helper.__proto__ || Object.getPrototypeOf(Helper)).call.apply(_ref, [this, props].concat(args)));\n\n            _this.openModal = function () {\n                _this.setState({\n                    open: true\n                });\n            };\n\n            _this.closeModal = function () {\n                _this.setState({\n                    open: false\n                });\n\n                if (_this.props.openByDefault === true) {\n                    if (_this.state.showItAgain === false) {\n                        localStorage.setItem("showRapidDiagDocs", false);\n                    } else {\n                        localStorage.removeItem("showRapidDiagDocs");\n                    }\n                }\n            };\n\n            _this.handleClick = function () {\n                _this.setState({ showItAgain: !_this.state.showItAgain });\n            };\n\n            var showItAgain = "true";\n            if (localStorage.getItem("showRapidDiagDocs")) {\n                showItAgain = localStorage.getItem("showRapidDiagDocs");\n            }\n            _this.state = {\n                open: _this.props.openByDefault ? showItAgain === "true" : false,\n                showItAgain: _this.props.openByDefault ? showItAgain === "true" : false\n            };\n            return _this;\n        }\n\n        _createClass(Helper, [{\n            key: "render",\n            value: function render() {\n                var text = _RapidDiagHelpText.RapidDiagHelpText;\n                return _react2.default.createElement(_react2.default.Fragment, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 51\n                    },\n                    __self: this\n                }, _react2.default.createElement(_TaskCatalougeHeaderStyles.StyleButton, {\n                    id: this.props.id,\n                    icon: _react2.default.createElement(_InfoCircle2.default, { size: 1.5, style: { marginTop: "1px" }, __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 54\n                        },\n                        __self: this\n                    }),\n                    inline: true,\n                    appearance: "pill",\n                    onClick: this.openModal,\n                    style: this.props.buttonStyle,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 52\n                    },\n                    __self: this\n                }), _react2.default.createElement(_Modal2.default, { onRequestClose: this.closeModal, open: this.state.open, enablePeek: true, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 60\n                    },\n                    __self: this\n                }, _react2.default.createElement(_Modal2.default.Header, {\n                    title: "RapidDiag Documentation",\n                    onRequestClose: this.closeModal,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 61\n                    },\n                    __self: this\n                }), _react2.default.createElement(_Modal2.default.Body, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 65\n                    },\n                    __self: this\n                }, _react2.default.createElement(_Markdown2.default, { text: text, __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 66\n                    },\n                    __self: this\n                })), this.props.openByDefault && _react2.default.createElement(_Modal2.default.Footer, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 69\n                    },\n                    __self: this\n                }, _react2.default.createElement(_Switch2.default, {\n                    key: !this.state.showItAgain,\n                    value: !this.state.showItAgain,\n                    onClick: this.handleClick,\n                    selected: !this.state.showItAgain,\n                    appearance: "checkbox",\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 70\n                    },\n                    __self: this\n                }, " Don\'t show the pop-up again  "))));\n            }\n        }]);\n\n        return Helper;\n    }(_react.Component);\n\n    exports.default = Helper;\n\n    /***/\n},\n/* 107 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var RapidDiagHelpText = exports.RapidDiagHelpText = \'\\n# Overview\\n\\n\\nThe Splunk RapidDiag app collects diagnostic data on Splunk platform deployments that run on Linux and Windows operating systems for the purposes of analysis by the Splunk Support and Engineering teams.\\n\\nThe app provides command-line scripts and a web interface for various diagnostic data collection tasks:\\n\\n- Stack dumps: pstacks, eu-stacks, or procdump;\\n- System call traces: strace or procmon; \\n- Splunk diag;\\n- Rest endpoint outputs: ( ``|rest search`` exports);\\n- Network packet dumps: tcpdump or netsh;\\n- I/O operations: logman or iostat;\\n- Network statistics and network connections: netsh; and\\n- Process information: ps, lsof, or handle64.\\n\\nSplunk RapidDiag also offers automatic data collection based on triggers \\u2013 for example, start collecting data when certain keywords are written to a specific log file, or when systemwide memory usage crosses a threshold.\\n\\nSplunk RapidDiag can facilitate distributed data collection between search heads and selected peers in a distributed search environment.\\n\\n## Installation instructions\\n\\nYou can install the Splunk RapidDiag app like any other:\\n\\n1. Directly from Splunkbase, or\\n2. By installing the package after downloading it\\n\\nTo enable the Splunk RapidDiag App without restart, you can run the following search in splunk:\\n``| rest /services/apps/local/splunk_rapid_diag/_reload``\\n\\nIn distributed search environments, the app must be present and working on every machine where you want to collect data. For automated management of apps among nodes, see information about Indexer Cluster App Management, Search-Head Cluster Deployers, or Deployment Servers, depending on the topology of your system.\\n\\n## Dependencies\\n\\nSplunk RapidDiag depends on third-party utilities for some of the data it collects. Some of these utilities vary based on the platform. You must install these utilities separately. You can install them in one of the following ways:\\n\\n* System-wide, by following the installation instructions for each utility\\n* Into the ``splunk_rapid_diag/bin/tools`` directory within the Splunk RapidDiag app.\\n\\nYou can override the default app installation directory of ``$SPLUNK_HOME/etc/splunk_rapid_diag/bin/tools`` by editing ``$SPLUNK_HOME/etc/splunk_rapid_diag/default/rapid_diag.conf`` and changing the value of the ``basepath`` setting under the ``[tools]`` stanza.\\n\\nSee the platform-dependent sections below for specific utility installation instructions.\\n\\n#### Linux-specific utilities\\n\\nOn Linux operating systems, use your distribution package manager to install dependencies for Splunk RapidDiag. This document covers the ``yum`` and ``apt`` package managers, but most other package managers operate similarly.\\n\\n##### Stack traces\\n\\nSplunk RapidDiag requires the ``eu-stack`` utility, version **0.159** or above, to collect stack traces for running processes. The ``elfutils`` package provides this utility, and can be installed by running the following from a shell prompt:\\n\\n* ``apt install elfutils`` on Debian-based Linux deployments, or\\n* ``yum install elfutils`` on RHEL-based Linux deployments.\\n\\nThe user under which the instance runs must be able to perform the ``ptrace`` system call. To confirm that the ``eu-stack`` utility works for this user, run the following:\\n\\n* ``sudo su splunk sh -c "sleep 5 & eu-stack -p $! && echo SUCCESS || echo FAILURE"``\\n\\nIf the command returns "``FAILURE``", then the user cannot currently perform ``ptrace`` system calls. Some common reasons are:\\n\\n1. Linux capabilities disallow it. Try explicitly whitelisting ``eu-stack`` like so:\\n   * ``setcap cap_dac_override,cap_sys_ptrace+eip `which eu-stack` ``\\n2. Security-Enhanced Linux (SELinux) is blocking ptrace. You can try the following to fix the problem:\\n   * ``setsebool -P deny_ptrace off``\\n\\n##### System call traces\\n\\nSplunk RapidDiag requires the ``strace`` binary to run system call traces. The ``strace`` package includes this binary, and can be installed as follows:\\n\\n* ``apt install strace`` on Debian-based Linux deployments, or\\n* ``yum install strace`` on RHEL-based Linux deployments.\\n\\nThe user under which the instance runs must be able to run the utility. To confirm it can, run the following:\\n\\n1. ``sudo su splunk``\\n2. ``strace -o /dev/null sleep 0 && echo SUCCESS || echo FAILURE``\\n\\nIf the command returns FAILURE, follow the troubleshooting steps described earlier in this document to resolve problems with the "ptrace" system call.\\n\\n##### Network packet dumps\\n\\nThe ``tcpdump`` utility collects network packet dumps on Linux. The ``tcpdump`` package includes this utility, and can be installed as follows:\\n\\n* ``apt install tcpdump`` on Debian-based Linux deployments, or\\n* ``yum install tcpdump`` on RHEL-based Linux deployments.\\n\\nThe user under which the instance runs must be able to run the utility. To confirm it can, run the following:\\n\\n1. ``sudo su splunk``\\n2. ``tcpdump -qOc1 && echo SUCCESS || echo FAILURE``\\n\\nIf the command returns FAILURE, try the following commands to resolve the problem:\\n\\n1. ``sudo groupadd pcap``\\n2. ``sudo chgrp pcap $(which tcpdump)``\\n3. ``sudo chmod 750 $(which tcpdump)``\\n4. ``sudo setcap cap_net_raw,cap_net_admin=eip $(which tcpdump)``\\n5. ``sudo usermod -a -G pcap splunk``\\n\\nAfter you run these commands, try the test command again.\\n\\nIf the command continues to return FAILURE, it is possible that SELinux is interfering with tcpdump. In this case, change your SELinux policies to allow ``netutils_t`` permissions to splunk.\\n\\n##### IOPS\\n\\nThe ``iostat`` utility collects CPU statistics and input/output statistics for devices and partitions on Linux. The ``sysstat`` package includes this binary, and can be installed as follows:\\n\\n* ``sudo apt-get install sysstat -y`` on Debian-based Linux deployments, or\\n* ``yum install sysstat -y`` on RHEL-based Linux deployments.\\n\\nThe user under which the instance runs must be able to run the utility. To confirm it can, run the following:\\n\\n1. ``sudo su splunk``\\n2. ``iostat -x 1 10 && echo SUCCESS || echo FAILURE``\\n\\n##### Netstat\\n\\nThe ``netstat`` utility collects network connections and interface statistics on Linux. The ``net-tools`` package includes this binary, and can be installed as follows:\\n\\n* ``sudo apt-get install net-tools -y`` on Debian-based Linux deployments, or\\n* ``yum install net-tools -y`` on RHEL-based Linux deployments.\\n\\nThe user under which the instance runs must be able to run the utility. To confirm it can, run the following:\\n\\n1. ``sudo su splunk``\\n2. ``netstat -s && echo SUCCESS || echo FAILURE``\\n3. ``netstat -a -n -v -e -p && echo SUCCESS || echo FAILURE``\\n\\n##### PS\\n\\nThe ``ps`` utility collects information about a selection of the active processes on Linux. The ``ps`` package includes this binary, and its built-in utility of Linux deployments:\\n\\nThe user under which the instance runs must be able to run the utility. To confirm it can, run the following:\\n\\n1. ``sudo su splunk``\\n2. ``ps aux -ejL && echo SUCCESS || echo FAILURE``\\n\\n##### LSOF\\n\\nThe ``lsof`` utility collects list of opened files by processes on Linux. The ``lsof`` package includes this binary, and can be installed as follows:\\n\\n* ``sudo apt-get install lsof -y`` on Debian-based Linux deployments, or\\n* ``yum install lsof -y`` on RHEL-based Linux deployments.\\n\\nThe user under which the instance runs must be able to run the utility. To confirm it can, run the following:\\n\\n1. ``sudo su splunk``\\n2. ``lsof -s -V -n -a -K -p && echo SUCCESS || echo FAILURE``\\n\\n#### Windows-specific utilities\\n\\n##### System call traces\\n\\nSystem call traces are collected with the ``procmon.exe`` program, which is also part of the **Microsoft SysInternals** suite. It is available on: [https://docs.microsoft.com/en-us/sysinternals/downloads/procmon](https://docs.microsoft.com/en-us/sysinternals/downloads/procmon)\\n\\nPlease download the binary and copy it inside the app, under the ``splunk_rapid_diag\\\\bin\\\\tools`` directory.\\n\\n##### Stack traces\\n\\nThe ``procdump.exe`` utility, which is part of the **Microsoft SysInternals** suite, collects Stack traces traces on Windows. You can download it at [https://docs.microsoft.com/en-us/sysinternals/downloads/procdump](https://docs.microsoft.com/en-us/sysinternals/downloads/procdump).\\n\\nAfter you download the suite:\\n1. Extract and install the suite.\\n2. Copy the procdump.exe file into the Splunk RapidDiag app directory, in ``splunk_rapid_diag\\\\bin\\\\tools``.\\n\\n##### Network packet dumps\\n\\nThe ``netsh`` utility collects network packet dumps on Windows, and comes with every Windows installation.\\n\\n##### IOPS\\n\\nThe ``logman.exe`` utility collects CPU statistics and input/output statistics for devices and partitions on Windows. Its comes with every Windows installation.\\n\\n##### Netstat\\n\\nThe ``netstat.exe`` utility collects network connections and interface statistics on Windows, and comes with every Windows installation.\\n\\n##### PS\\n\\nThe ``tasklist.exe`` utility collects information about a selection of the active processes on Windows, and comes with every Windows installation.\\n\\n##### LSOF\\n\\nThe ``handle64.exe`` utility collects list of opened files by processes on Windows, which is also part of the **Microsoft SysInternals** suite. It is available on: [https://docs.microsoft.com/en-us/sysinternals/downloads/handle](https://docs.microsoft.com/en-us/sysinternals/downloads/handle)\\n\\nAfter you download the suite:\\n1. Extract and install the suite.\\n2. Copy the handle64.exe file into the Splunk RapidDiag app directory, in ``splunk_rapid_diag\\\\bin\\\\tools``.\\n\\n## Usage\\n\\nOn the Splunk RapidDiag data collection page, you can create data collection tasks. As part of creating a task, you must specify at least a name for the task and the Splunk platform instances from which the task should collect data. The instance that runs Splunk RapidDiag must be able to search these instances, and the searched instances must also run the Splunk RapidDiag app. After you specify a task name and target instances, click "Next" to proceed to the data collector description page, which shows cards that describe the available data collectors. A collector with a red exclamation mark badge indicates that collector is not available for the task and cannot be selected. You can get more information on why the collector is not available by clicking its badge.\\n\\nAfter you configure a name, one or more target machines, and data collectors, finish data collection task setup by identifying the task type and what will trigger execution of the collectors that are associated with the task. A task can be *single run*, where all collectors execute once only, or *periodic*, where collectors run together for a number of times. Tasks can also have no trigger and execute immediately, or start when specific text appears in a log file.\\n\\n### Data collectors\\n\\nEach data collector that Splunk RapidDiag offers has different disk space requirements, resource usage, and data privacy implications.\\n\\n#### System Call Trace\\nThe system call trace collector has significant disk space requirements. On a busy Splunk platform instance, the collector could consume more than 1GB per minute of disk space for data collection, and the speed on processes that the collector traces could drop by a factor that could range from 10 to 100. The collector gathers file paths, IP address, and other metadata, but no file data or network communications.\\n\\n#### Stack Trace\\nThe stack trace collector has low disk space requirements and performance impacts on machines that run Linux. Disk usage is typically in the 200KB range per run. This should let you run the collector every few hundred milliseconds without a noticeable performance hit on the instance. On Windows, disk space usage is significantly higher at 5MB per run, and performance requirements are also higher. You can still run the collector on Windows once per second without a significant performance drop on the target process. The collector does not gather user-related process information.\\n\\n#### Network Packet\\nThe network packet collector uses disk space equivalent to the volume of data that the network transmits over the specified IP address and port. Because of that data volume, the most significant performance impact is on the file system due to disk writes. The collector gathers all information that is transmitted over the wire, including passwords and other private data. As the Splunk platform encrypts data that it transmits, and no diagnostic tools collect decryption keys, there is no security risk in using the collector.\\n\\n#### Search Result\\nThe search results collector runs a search and collects the results that the search generates. Disk usage and performance impact depend on the search and can be validated outside of the app context. The collector gathers all search result data, including any private information within the results. Review the data that the collector collects before you share it.\\n\\n#### IOPS\\nThe IOPS collector has significant disk space requirements for Windows. the collector could consume more disk space depending on the collection time range. For the Linux environment, the IOPS collector has low disk space requirements. the collector gathers the CPU statistics and input/output statistics for devices and partitions.\\n\\n#### Netstat\\nThe Netstat collector has low disk space requirements and performance impacts on Windows and Linux. the collector gathers the network connections both incoming and outgoing as well as network statistics over the devices.\\n\\n#### PS\\nThe PS collector has low disk space requirements and performance impacts on Windows and Linux. the collector gathers information about the active processes on Windows and Linux.\\n\\n#### LSOF\\nThe LSOF collector has low disk space requirements and performance impacts on Windows and Linux. the collector gathers information about the list of opened files by processes on Windows and Linux.\\n\\n#### Splunk Diag\\nSplunk diagnostic files contain technical information about the instance. Diagnostic file sizes range from 50 to 600MB and their collection can have a significant effect on the machine owing to the amount of required disk I/O. Diagnostic files do not typically include sensitive information, but passwords located in non-default areas of configuration files and other places could be retained. Review the contents of diagnostic files before you share them.\\n\\nSee the following page in the Splunk Documentation for information on diagnostic files: [https://docs.splunk.com/Documentation/Splunk/latest/Troubleshooting/Generateadiag](https://docs.splunk.com/Documentation/Splunk/latest/Troubleshooting/Generateadiag)\\n\\n## Command Line Interface\\n\\n##### Usage Steps\\n\\n1. ``source $SPLUNK_HOME/bin/setSplunkEnv``\\n2. ``ln -s $SPLUNK_HOME/etc/apps/splunk_rapid_diag/bin/cli/__main__.py $SPLUNK_HOME/bin/rapidDiag``\\n3. ``chmod 755 $SPLUNK_HOME/bin/rapidDiag``\\n\\n##### Usage\\n\\n**rapidDiag** [help] [list] [run <task-id>] [add <file-path>| add <file-path> --name <new-file-name> | add <file-path> --name <new-file-name> --force] <command> [<args>]\\n\\n##### Commands\\n\\n* **list :** Lists pre-built tasks for the RapidDiag app. Predefined tasks are available in the SampleTasks directory within the app.\\n* **run :** Executes the task with the given task ID. If RapidDiag cannot find a file within the SampleTasks directory with a matching task ID, it returns a "task not found" error.\\n* **add :** Copies the collection JSON file to the SampleTasks directory. This process overwrites an existing file with the same name.\\n* **help :** Shows help message and exits\\n\\n## Troubleshooting\\n\\nWhen Splunk RapidDiag does not behave properly, check its log file at ``$SPLUNK_HOME/var/log/splunk/splunk_rapid_diag.log`` for details. You can increase the log file detail by setting ``log_level=DEBUG`` under the ``[logging]`` stanza in ``$SPLUNK_RAPID_DIAG/etc/apps/splunk_rapid_diag/local/rapid_diag.conf``.\\n### Permission Denied Issue:\\n    \\n1. Check the directory owner and permission.\\n2. App requires the read and write permission.\\n3. Try running below command to resove the issue:\\n\\n``sudo chmod -R a-w $SPLUNK_HOME/etc/apps/splunk_rapid_diag``\\n\\n\\n## Version Compatibility\\n\\n#### Splunk Version\\n\\n- 7.0.x\\n- 7.1.X\\n- 7.2.X\\n- 7.3.X\\n- 8.0.X (with either Python 2 or Python 3)\\n\\n#### OS/Browsers\\n\\nAny version supported by compatible Splunk version\\n\\n### Linux: Utilities Compatibility\\n\\n                         |  Ubuntu  |  CentOs  |  openSUSE  |\\n    -------------------  | -------- | -------- |  --------  |\\n    Distribution version |  16.04+  |  6.1+    |   15.1+    |\\n    Kernel version       |  4.4.0+  |  2.6.32+ |   4.12.14+ |\\n    Strace               |  4.11+   |  4.8+    |   4.2+     |\\n    eu-stack             |  0.165+  |  0.164+  |   0.168+   |\\n    tcpdump              |  4.7.4+  |  4.1+    |   4.9.2+   |\\n    IOPS                 |  11.2.0+ |  9.0.4+  |   12.0.2+  |\\n    netstat              |  1.42+   |  1.42+   |   2.1+     |\\n    lsof                 |  4.89+   |  4.82+   |   4.91+    |\\n    ps                   | In-built | In-built |  In-built  |\\n\\n\\n### Windows: Utilities Compatibility\\n    \\n    Collector          |  Utility  |  Version \\n    -----------------  | --------- |  ------- \\n    System Call Trace  | procmon   |  3.52+\\n    Stack Trace        | procdump  |  9.0+\\n    Network Packet     | netsh     |  In-built\\n    IOPS               | logman    |  In-built\\n    netstat            | netstat   |  In-built\\n    LSOF               | handle64  |  4.22+\\n    PS                 | tasklist  |  In-built\\n\';\n\n    /***/\n},\n/* 108 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n\n    var _extends = Object.assign || function (target) {\n        for (var i = 1; i < arguments.length; i++) {\n            var source = arguments[i];for (var key in source) {\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }return target;\n    };\n\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/task-manager/src/components/TaskManagerHeader/TaskManagerHeader.jsx";\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _propTypes = __webpack_require__(1);\n\n    var _propTypes2 = _interopRequireDefault(_propTypes);\n\n    var _ColumnLayout = __webpack_require__(25);\n\n    var _ColumnLayout2 = _interopRequireDefault(_ColumnLayout);\n\n    var _ArrowUp = __webpack_require__(109);\n\n    var _ArrowUp2 = _interopRequireDefault(_ArrowUp);\n\n    var _ArrowDown = __webpack_require__(110);\n\n    var _ArrowDown2 = _interopRequireDefault(_ArrowDown);\n\n    var _TaskManagerHeaderStyle = __webpack_require__(111);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    var initSortObj = function initSortObj() {\n        return { name: false, duration: false, created_at: false, status: false };\n    };\n\n    var handleClick = function handleClick(props, sortKey, sortDir) {\n        return props.handler({\n            sortDir: Object.assign(initSortObj(), sortDir),\n            sortKey: Object.assign(initSortObj(), sortKey)\n        });\n    };\n\n    function TaskManagerHeader(props) {\n        var sortDir = props.sortDir;\n\n        return _react2.default.createElement("div", { id: "taskHeaderStyle", style: _TaskManagerHeaderStyle.taskHeaderStyle, __source: {\n                fileName: _jsxFileName,\n                lineNumber: 26\n            },\n            __self: this\n        }, _react2.default.createElement(_ColumnLayout2.default, {\n            __source: {\n                fileName: _jsxFileName,\n                lineNumber: 27\n            },\n            __self: this\n        }, _react2.default.createElement(_ColumnLayout2.default.Row, { id: "taskHeaderRow", __source: {\n                fileName: _jsxFileName,\n                lineNumber: 28\n            },\n            __self: this\n        }, _react2.default.createElement(_ColumnLayout2.default.Column, { id: "nameColumn", span: 3.3, style: _TaskManagerHeaderStyle.headerNameStyle, __source: {\n                fileName: _jsxFileName,\n                lineNumber: 29\n            },\n            __self: this\n        }, "Name", _react2.default.createElement(_TaskManagerHeaderStyle.StyleButton, { id: "arrowName",\n            appearance: "pill",\n            icon: sortDir.name ? _react2.default.createElement(_ArrowUp2.default, { id: "arrowUpName", __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 33\n                },\n                __self: this\n            }) : _react2.default.createElement(_ArrowDown2.default, { id: "arrowDownName", __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 33\n                },\n                __self: this\n            }),\n            onClick: function onClick() {\n                return handleClick(props, { name: true }, { name: !sortDir.name });\n            },\n            __source: {\n                fileName: _jsxFileName,\n                lineNumber: 31\n            },\n            __self: this\n        })), _react2.default.createElement(_ColumnLayout2.default.Column, { id: "hostColumn",\n            span: 3.1,\n            style: _extends({\n                paddingLeft: "0px",\n                paddingTop: "5px"\n            }, _TaskManagerHeaderStyle.headerNameStyle),\n            __source: {\n                fileName: _jsxFileName,\n                lineNumber: 39\n            },\n            __self: this\n        }, "Host"), _react2.default.createElement(_ColumnLayout2.default.Column, { id: "durationColumn", span: 1.3, style: _TaskManagerHeaderStyle.headerNameStyle, __source: {\n                fileName: _jsxFileName,\n                lineNumber: 49\n            },\n            __self: this\n        }, "Duration", _react2.default.createElement(_TaskManagerHeaderStyle.StyleButton, { id: "arrowDuration",\n            appearance: "pill",\n            icon: sortDir.duration ? _react2.default.createElement(_ArrowUp2.default, { id: "arrowUpDuration", __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 53\n                },\n                __self: this\n            }) : _react2.default.createElement(_ArrowDown2.default, { id: "arrowDownDuration", __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 53\n                },\n                __self: this\n            }),\n            onClick: function onClick() {\n                return handleClick(props, { duration: true }, { duration: !sortDir.duration });\n            },\n            __source: {\n                fileName: _jsxFileName,\n                lineNumber: 51\n            },\n            __self: this\n        })), _react2.default.createElement(_ColumnLayout2.default.Column, { id: "createdAtColumn",\n            span: 2,\n            style: _extends({ paddingRight: "30px" }, _TaskManagerHeaderStyle.headerNameStyle),\n            __source: {\n                fileName: _jsxFileName,\n                lineNumber: 63\n            },\n            __self: this\n        }, "Created At", _react2.default.createElement(_TaskManagerHeaderStyle.StyleButton, { id: "arrowCreatedAt",\n            appearance: "pill",\n            icon: sortDir.created_at ? _react2.default.createElement(_ArrowUp2.default, { id: "arrowUpCreatedAt", __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 70\n                },\n                __self: this\n            }) : _react2.default.createElement(_ArrowDown2.default, { id: "arrowDownCreatedAt", __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 70\n                },\n                __self: this\n            }),\n            onClick: function onClick() {\n                return handleClick(props, { created_at: true }, { created_at: !sortDir.created_at });\n            },\n            __source: {\n                fileName: _jsxFileName,\n                lineNumber: 68\n            },\n            __self: this\n        })), _react2.default.createElement(_ColumnLayout2.default.Column, { id: "statusColumn", span: 1.3, style: _TaskManagerHeaderStyle.headerNameStyle, __source: {\n                fileName: _jsxFileName,\n                lineNumber: 80\n            },\n            __self: this\n        }, "Status", _react2.default.createElement(_TaskManagerHeaderStyle.StyleButton, { id: "arrowStatus",\n            appearance: "pill",\n            icon: sortDir.status ? _react2.default.createElement(_ArrowUp2.default, { id: "arrowUpStatus", __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 84\n                },\n                __self: this\n            }) : _react2.default.createElement(_ArrowDown2.default, { id: "arrowDownStatus", __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 84\n                },\n                __self: this\n            }),\n            onClick: function onClick() {\n                return handleClick(props, { status: true }, { status: !sortDir.status });\n            },\n            __source: {\n                fileName: _jsxFileName,\n                lineNumber: 82\n            },\n            __self: this\n        })), _react2.default.createElement(_ColumnLayout2.default.Column, { id: "actionColumn",\n            span: 1,\n            style: _extends({\n                paddingLeft: "0px",\n                paddingTop: "5px"\n            }, _TaskManagerHeaderStyle.headerNameStyle),\n            __source: {\n                fileName: _jsxFileName,\n                lineNumber: 90\n            },\n            __self: this\n        }, "Action"))));\n    }\n\n    TaskManagerHeader.propTypes = {\n        /**\n         * direction of sorting: true -> ascending & false -> descending\n         */\n        sortDir: _propTypes2.default.bool\n    };\n\n    exports.default = TaskManagerHeader;\n\n    /***/\n},\n/* 109 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(427);\n\n    /***/\n},\n/* 110 */\n/***/function (module, exports) {\n\n    module.exports = __webpack_require__(428);\n\n    /***/\n},\n/* 111 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    exports.taskHeaderStyle = exports.StyleButton = exports.headerNameStyle = undefined;\n\n    var _templateObject = _taggedTemplateLiteral(["\\n    border: 0;\\n    border-radius: 100%;\\n    background-color: #ffffff\\n    color: #5f6368;\\n\\n    &: hover:enabled {\\n        background-color: rgba(0,0,0,.12);\\n        color: #202124;\\n    }\\n\\n    &: focus:enabled {;\\n        outline: none;\\n        border-color: #ffffff;\\n        color: #5f6368;\\n        box-shadow: none;\\n    }\\n\\n"], ["\\n    border: 0;\\n    border-radius: 100%;\\n    background-color: #ffffff\\n    color: #5f6368;\\n\\n    &: hover:enabled {\\n        background-color: rgba(0,0,0,.12);\\n        color: #202124;\\n    }\\n\\n    &: focus:enabled {;\\n        outline: none;\\n        border-color: #ffffff;\\n        color: #5f6368;\\n        box-shadow: none;\\n    }\\n\\n"]);\n\n    var _Button = __webpack_require__(5);\n\n    var _Button2 = _interopRequireDefault(_Button);\n\n    var _styledComponents = __webpack_require__(6);\n\n    var _styledComponents2 = _interopRequireDefault(_styledComponents);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _taggedTemplateLiteral(strings, raw) {\n        return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));\n    }\n\n    var headerNameStyle = exports.headerNameStyle = { paddingLeft: "10px", fontSize: "larger" };\n\n    var StyleButton = exports.StyleButton = (0, _styledComponents2.default)(_Button2.default)(_templateObject);\n\n    var taskHeaderStyle = exports.taskHeaderStyle = {\n        paddingTop: "10px",\n        paddingBottom: "10px",\n        boxShadow: "rgba(92, 192, 92, 0.48) 0px 10px 10px -10px",\n        marginBottom: "-18px"\n    };\n\n    /***/\n},\n/* 112 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/task-template-wizard/src/components/SearchBar/SearchBar.jsx";\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _propTypes = __webpack_require__(1);\n\n    var _propTypes2 = _interopRequireDefault(_propTypes);\n\n    var _lodash = __webpack_require__(20);\n\n    var _SearchBarStyles = __webpack_require__(113);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _defineProperty(obj, key, value) {\n        if (key in obj) {\n            Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n        } else {\n            obj[key] = value;\n        }return obj;\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError("Cannot call a class as a function");\n        }\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n        }return call && ((typeof call === \'undefined\' ? \'undefined\' : _typeof(call)) === "object" || typeof call === "function") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== "function" && superClass !== null) {\n            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === \'undefined\' ? \'undefined\' : _typeof(superClass)));\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var SearchBar = function (_Component) {\n        _inherits(SearchBar, _Component);\n\n        function SearchBar(props) {\n            _classCallCheck(this, SearchBar);\n\n            var _this = _possibleConstructorReturn(this, (SearchBar.__proto__ || Object.getPrototypeOf(SearchBar)).call(this, props));\n\n            _this.handleChange = (0, _lodash.debounce)(function (e, _ref) {\n                var name = _ref.name,\n                    value = _ref.value;\n\n                _this.setState(_defineProperty({}, name, value));\n                _this.props.handler(_defineProperty({}, name, value));\n            }, 200);\n\n            _this.state = {\n                search: _this.props.search\n            };\n            return _this;\n        }\n\n        _createClass(SearchBar, [{\n            key: "render",\n            value: function render() {\n                return _react2.default.createElement(_SearchBarStyles.StyleSearchBar, {\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 33\n                    },\n                    __self: this\n                }, _react2.default.createElement(_SearchBarStyles.StyleSearchText, {\n                    name: "search",\n                    multiline: false,\n                    placeholder: "Search...",\n                    onChange: this.handleChange,\n                    __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 34\n                    },\n                    __self: this\n                }));\n            }\n        }]);\n\n        return SearchBar;\n    }(_react.Component);\n\n    SearchBar.propTypes = {\n        /**\n         * search string\n         */\n        search: _propTypes2.default.string,\n\n        /**\n         * callback function to pass data to parent\n         */\n        handler: _propTypes2.default.func\n    };\n    exports.default = SearchBar;\n\n    /***/\n},\n/* 113 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    exports.StyleSearchBar = exports.StyleSearchText = undefined;\n\n    var _templateObject = _taggedTemplateLiteral(["\\n    border-radius: 24px;\\n    border: 1px solid #dfe1e5;\\n    box-shadow:none;\\n    font-size: larger;\\n    display: inline-block;\\n    width: 100%;\\n    \\n    & [data-test=textbox] {\\n        border-radius: 24px;   \\n        height: 44px;\\n        border: #dfe1e5;\\n        z-index: 3;\\n        box-shadow: none;\\n        padding: 24px;\\n\\n        &: focus {\\n            box-shadow: 0 1px 6px 0 rgba(92, 192, 92, 0.28);\\n            border-color: rgba(223, 225, 229, 0);\\n            border-radius: 24px;\\n            border: #dfe1e5;\\n            z-index: 3;\\n            height: 44px;\\n        }\\n    }\\n\\n    &: hover {\\n        box-shadow: 0 1px 6px 0 rgba(92, 192, 92, 0.28);\\n        border-color: rgba(223, 225, 229, 0);\\n        border-radius: 24px;\\n        border: #dfe1e5;\\n        z-index: 3;\\n        height: 44px;\\n    }\\n\\n    &: focus-within {\\n        box-shadow: 0 1px 6px 0 rgba(92, 192, 92, 0.28);\\n        border-color: rgba(223, 225, 229, 0);\\n        border-radius: 24px;\\n        border: #dfe1e5;\\n        z-index: 3;\\n        height: 44px;\\n    }\\n"], ["\\n    border-radius: 24px;\\n    border: 1px solid #dfe1e5;\\n    box-shadow:none;\\n    font-size: larger;\\n    display: inline-block;\\n    width: 100%;\\n    \\n    & [data-test=textbox] {\\n        border-radius: 24px;   \\n        height: 44px;\\n        border: #dfe1e5;\\n        z-index: 3;\\n        box-shadow: none;\\n        padding: 24px;\\n\\n        &: focus {\\n            box-shadow: 0 1px 6px 0 rgba(92, 192, 92, 0.28);\\n            border-color: rgba(223, 225, 229, 0);\\n            border-radius: 24px;\\n            border: #dfe1e5;\\n            z-index: 3;\\n            height: 44px;\\n        }\\n    }\\n\\n    &: hover {\\n        box-shadow: 0 1px 6px 0 rgba(92, 192, 92, 0.28);\\n        border-color: rgba(223, 225, 229, 0);\\n        border-radius: 24px;\\n        border: #dfe1e5;\\n        z-index: 3;\\n        height: 44px;\\n    }\\n\\n    &: focus-within {\\n        box-shadow: 0 1px 6px 0 rgba(92, 192, 92, 0.28);\\n        border-color: rgba(223, 225, 229, 0);\\n        border-radius: 24px;\\n        border: #dfe1e5;\\n        z-index: 3;\\n        height: 44px;\\n    }\\n"]),\n        _templateObject2 = _taggedTemplateLiteral(["\\n    border: 0;\\n    width: 79%;\\n"], ["\\n    border: 0;\\n    width: 79%;\\n"]);\n\n    var _styledComponents = __webpack_require__(6);\n\n    var _styledComponents2 = _interopRequireDefault(_styledComponents);\n\n    var _Text = __webpack_require__(13);\n\n    var _Text2 = _interopRequireDefault(_Text);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _taggedTemplateLiteral(strings, raw) {\n        return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));\n    }\n\n    var StyleSearchText = exports.StyleSearchText = (0, _styledComponents2.default)(_Text2.default)(_templateObject);\n\n    var StyleSearchBar = exports.StyleSearchBar = _styledComponents2.default.div(_templateObject2);\n\n    /***/\n},\n/* 114 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var SYNONYMS = [["system call trace", "system_call_trace"], ["strace", "system_call_trace"], ["procmon", "system_call_trace"], ["traces", "system_call_trace"], ["stack trace", "stack_trace"], ["traces", "stack_trace"], ["stack", "stack_trace"], ["elfutils", "stack_trace"], ["eustacks", "stack_trace"], ["kernel stacks", "stack_trace"], ["elfutils", "stack_trace"], ["network packet", "network_packet"], ["netsh", "network_packet"], ["tcpdumps", "network_packet"], ["network dumps", "network_packet"], ["dump", "network_packet"], ["search result", "search_result"], ["search query", "search_result"], ["splunk search", "search_result"], ["iostat", "iops"], ["search debug", "search_debug"]];\n\n    var synonymQueries = exports.synonymQueries = function synonymQueries(queries) {\n        var synonyms = {};\n        SYNONYMS.map(function (synonymWord) {\n            var w1 = synonymWord[0];\n            var w2 = synonymWord[1];\n            synonyms[w1] = [w2];\n        });\n\n        var result = void 0;\n        var q1 = queries[0].split(/[\\s,.:{}()" ]+/);\n        var q2 = queries[1].split(/[\\s,.:{}()" ]+/);\n        result = true;\n        loop1: for (var i = 0; i < q1.length; i++) {\n            for (var j = 0; j < q2.length; j++) {\n                var w1 = q1[i];\n                var w2 = q2[j];\n\n                if (w1 === w2) {\n                    // j = q2.\n                    break loop1;\n                } else if (Object.keys(synonyms).includes(w1) && synonyms[w1].includes(w2) || Object.keys(synonyms).includes(w2) && synonyms[w2].includes(w1)) {\n                    // j = q2.length;\n                    break loop1;\n                }\n            }\n            result = false;\n        }\n\n        return result;\n    };\n\n    /***/\n},\n/* 115 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var _jsxFileName = "/build/nurse/splunk_rapid_diag/appserver/src/packages/splunk-rapid-diag/components/ErrorBoundary/ErrorBoundary.jsx";\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    var _react = __webpack_require__(0);\n\n    var _react2 = _interopRequireDefault(_react);\n\n    var _Link = __webpack_require__(40);\n\n    var _Link2 = _interopRequireDefault(_Link);\n\n    var _Message = __webpack_require__(12);\n\n    var _Message2 = _interopRequireDefault(_Message);\n\n    var _ErrorBoundaryStyles = __webpack_require__(116);\n\n    var _url = __webpack_require__(4);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : { default: obj };\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError("Cannot call a class as a function");\n        }\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n        }return call && ((typeof call === \'undefined\' ? \'undefined\' : _typeof(call)) === "object" || typeof call === "function") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== "function" && superClass !== null) {\n            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === \'undefined\' ? \'undefined\' : _typeof(superClass)));\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var ErrorBoundary = function (_React$Component) {\n        _inherits(ErrorBoundary, _React$Component);\n\n        function ErrorBoundary(props) {\n            _classCallCheck(this, ErrorBoundary);\n\n            var _this = _possibleConstructorReturn(this, (ErrorBoundary.__proto__ || Object.getPrototypeOf(ErrorBoundary)).call(this, props));\n\n            _this.state = {\n                hasError: false,\n                errorMessage: ""\n            };\n            return _this;\n        }\n\n        _createClass(ErrorBoundary, [{\n            key: "componentDidCatch",\n            value: function componentDidCatch(error, info) {\n                document.body.style.backgroundColor = "#F2F4F5";\n                this.setState({ hasError: true });\n                this.setState({ errorMessage: error.toString() });\n            }\n        }, {\n            key: "componentWillUnmount",\n            value: function componentWillUnmount() {\n                document.body.style = null;\n            }\n        }, {\n            key: "render",\n            value: function render() {\n                var error = this.state.errorMessage;\n                if (this.state.hasError) {\n                    return _react2.default.createElement("div", { style: _ErrorBoundaryStyles.errorPageStyles, __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 30\n                        },\n                        __self: this\n                    }, _react2.default.createElement("h1", { style: _ErrorBoundaryStyles.errorHeaderStyles, __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 31\n                        },\n                        __self: this\n                    }, "Something went wrong!"), _react2.default.createElement("h3", { style: { fontFamily: "Verdana" }, __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 32\n                        },\n                        __self: this\n                    }, "Click ", _react2.default.createElement(_Link2.default, { to: (0, _url.createURL)("/"), __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 33\n                        },\n                        __self: this\n                    }, "here"), " to return to Splunk homepage."), _react2.default.createElement(_Message2.default, { fill: true, type: "error", style: _ErrorBoundaryStyles.errorMessageStyles, __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 35\n                        },\n                        __self: this\n                    }, error));\n                }\n                return this.props.children;\n            }\n        }]);\n\n        return ErrorBoundary;\n    }(_react2.default.Component);\n\n    exports.default = ErrorBoundary;\n\n    /***/\n},\n/* 116 */\n/***/function (module, exports, __webpack_require__) {\n\n    "use strict";\n\n    Object.defineProperty(exports, "__esModule", {\n        value: true\n    });\n    var errorPageStyles = {\n        height: 100 + \'%\',\n        width: 100 + \'%\',\n        display: \'flex\',\n        flexDirection: \'column\',\n        justifyContent: \'center\',\n        textAlign: \'center\'\n    };\n\n    var errorMessageStyles = {\n        marginLeft: 15 + \'%\',\n        marginRight: 15 + \'%\',\n        fontFamily: \'Verdana\'\n    };\n\n    var errorHeaderStyles = {\n        marginTop: 8 + \'%\',\n        fontFamily: \'Verdana\'\n    };\n\n    exports.errorPageStyles = errorPageStyles;\n    exports.errorMessageStyles = errorMessageStyles;\n    exports.errorHeaderStyles = errorHeaderStyles;\n\n    /***/\n}]\n/******/);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///802\n')},804:function(module,exports,__webpack_require__){eval('var map = {\n\t"./af": 300,\n\t"./af.js": 300,\n\t"./ar": 301,\n\t"./ar-dz": 302,\n\t"./ar-dz.js": 302,\n\t"./ar-kw": 303,\n\t"./ar-kw.js": 303,\n\t"./ar-ly": 304,\n\t"./ar-ly.js": 304,\n\t"./ar-ma": 305,\n\t"./ar-ma.js": 305,\n\t"./ar-sa": 306,\n\t"./ar-sa.js": 306,\n\t"./ar-tn": 307,\n\t"./ar-tn.js": 307,\n\t"./ar.js": 301,\n\t"./az": 308,\n\t"./az.js": 308,\n\t"./be": 309,\n\t"./be.js": 309,\n\t"./bg": 310,\n\t"./bg.js": 310,\n\t"./bm": 311,\n\t"./bm.js": 311,\n\t"./bn": 312,\n\t"./bn.js": 312,\n\t"./bo": 313,\n\t"./bo.js": 313,\n\t"./br": 314,\n\t"./br.js": 314,\n\t"./bs": 315,\n\t"./bs.js": 315,\n\t"./ca": 316,\n\t"./ca.js": 316,\n\t"./cs": 317,\n\t"./cs.js": 317,\n\t"./cv": 318,\n\t"./cv.js": 318,\n\t"./cy": 319,\n\t"./cy.js": 319,\n\t"./da": 320,\n\t"./da.js": 320,\n\t"./de": 321,\n\t"./de-at": 322,\n\t"./de-at.js": 322,\n\t"./de-ch": 323,\n\t"./de-ch.js": 323,\n\t"./de.js": 321,\n\t"./dv": 324,\n\t"./dv.js": 324,\n\t"./el": 325,\n\t"./el.js": 325,\n\t"./en-SG": 326,\n\t"./en-SG.js": 326,\n\t"./en-au": 327,\n\t"./en-au.js": 327,\n\t"./en-ca": 328,\n\t"./en-ca.js": 328,\n\t"./en-gb": 329,\n\t"./en-gb.js": 329,\n\t"./en-ie": 330,\n\t"./en-ie.js": 330,\n\t"./en-il": 331,\n\t"./en-il.js": 331,\n\t"./en-nz": 332,\n\t"./en-nz.js": 332,\n\t"./eo": 333,\n\t"./eo.js": 333,\n\t"./es": 334,\n\t"./es-do": 335,\n\t"./es-do.js": 335,\n\t"./es-us": 336,\n\t"./es-us.js": 336,\n\t"./es.js": 334,\n\t"./et": 337,\n\t"./et.js": 337,\n\t"./eu": 338,\n\t"./eu.js": 338,\n\t"./fa": 339,\n\t"./fa.js": 339,\n\t"./fi": 340,\n\t"./fi.js": 340,\n\t"./fo": 341,\n\t"./fo.js": 341,\n\t"./fr": 342,\n\t"./fr-ca": 343,\n\t"./fr-ca.js": 343,\n\t"./fr-ch": 344,\n\t"./fr-ch.js": 344,\n\t"./fr.js": 342,\n\t"./fy": 345,\n\t"./fy.js": 345,\n\t"./ga": 346,\n\t"./ga.js": 346,\n\t"./gd": 347,\n\t"./gd.js": 347,\n\t"./gl": 348,\n\t"./gl.js": 348,\n\t"./gom-latn": 349,\n\t"./gom-latn.js": 349,\n\t"./gu": 350,\n\t"./gu.js": 350,\n\t"./he": 351,\n\t"./he.js": 351,\n\t"./hi": 352,\n\t"./hi.js": 352,\n\t"./hr": 353,\n\t"./hr.js": 353,\n\t"./hu": 354,\n\t"./hu.js": 354,\n\t"./hy-am": 355,\n\t"./hy-am.js": 355,\n\t"./id": 356,\n\t"./id.js": 356,\n\t"./is": 357,\n\t"./is.js": 357,\n\t"./it": 358,\n\t"./it-ch": 359,\n\t"./it-ch.js": 359,\n\t"./it.js": 358,\n\t"./ja": 360,\n\t"./ja.js": 360,\n\t"./jv": 361,\n\t"./jv.js": 361,\n\t"./ka": 362,\n\t"./ka.js": 362,\n\t"./kk": 363,\n\t"./kk.js": 363,\n\t"./km": 364,\n\t"./km.js": 364,\n\t"./kn": 365,\n\t"./kn.js": 365,\n\t"./ko": 366,\n\t"./ko.js": 366,\n\t"./ku": 367,\n\t"./ku.js": 367,\n\t"./ky": 368,\n\t"./ky.js": 368,\n\t"./lb": 369,\n\t"./lb.js": 369,\n\t"./lo": 370,\n\t"./lo.js": 370,\n\t"./lt": 371,\n\t"./lt.js": 371,\n\t"./lv": 372,\n\t"./lv.js": 372,\n\t"./me": 373,\n\t"./me.js": 373,\n\t"./mi": 374,\n\t"./mi.js": 374,\n\t"./mk": 375,\n\t"./mk.js": 375,\n\t"./ml": 376,\n\t"./ml.js": 376,\n\t"./mn": 377,\n\t"./mn.js": 377,\n\t"./mr": 378,\n\t"./mr.js": 378,\n\t"./ms": 379,\n\t"./ms-my": 380,\n\t"./ms-my.js": 380,\n\t"./ms.js": 379,\n\t"./mt": 381,\n\t"./mt.js": 381,\n\t"./my": 382,\n\t"./my.js": 382,\n\t"./nb": 383,\n\t"./nb.js": 383,\n\t"./ne": 384,\n\t"./ne.js": 384,\n\t"./nl": 385,\n\t"./nl-be": 386,\n\t"./nl-be.js": 386,\n\t"./nl.js": 385,\n\t"./nn": 387,\n\t"./nn.js": 387,\n\t"./pa-in": 388,\n\t"./pa-in.js": 388,\n\t"./pl": 389,\n\t"./pl.js": 389,\n\t"./pt": 390,\n\t"./pt-br": 391,\n\t"./pt-br.js": 391,\n\t"./pt.js": 390,\n\t"./ro": 392,\n\t"./ro.js": 392,\n\t"./ru": 393,\n\t"./ru.js": 393,\n\t"./sd": 394,\n\t"./sd.js": 394,\n\t"./se": 395,\n\t"./se.js": 395,\n\t"./si": 396,\n\t"./si.js": 396,\n\t"./sk": 397,\n\t"./sk.js": 397,\n\t"./sl": 398,\n\t"./sl.js": 398,\n\t"./sq": 399,\n\t"./sq.js": 399,\n\t"./sr": 400,\n\t"./sr-cyrl": 401,\n\t"./sr-cyrl.js": 401,\n\t"./sr.js": 400,\n\t"./ss": 402,\n\t"./ss.js": 402,\n\t"./sv": 403,\n\t"./sv.js": 403,\n\t"./sw": 404,\n\t"./sw.js": 404,\n\t"./ta": 405,\n\t"./ta.js": 405,\n\t"./te": 406,\n\t"./te.js": 406,\n\t"./tet": 407,\n\t"./tet.js": 407,\n\t"./tg": 408,\n\t"./tg.js": 408,\n\t"./th": 409,\n\t"./th.js": 409,\n\t"./tl-ph": 410,\n\t"./tl-ph.js": 410,\n\t"./tlh": 411,\n\t"./tlh.js": 411,\n\t"./tr": 412,\n\t"./tr.js": 412,\n\t"./tzl": 413,\n\t"./tzl.js": 413,\n\t"./tzm": 414,\n\t"./tzm-latn": 415,\n\t"./tzm-latn.js": 415,\n\t"./tzm.js": 414,\n\t"./ug-cn": 416,\n\t"./ug-cn.js": 416,\n\t"./uk": 417,\n\t"./uk.js": 417,\n\t"./ur": 418,\n\t"./ur.js": 418,\n\t"./uz": 419,\n\t"./uz-latn": 420,\n\t"./uz-latn.js": 420,\n\t"./uz.js": 419,\n\t"./vi": 421,\n\t"./vi.js": 421,\n\t"./x-pseudo": 422,\n\t"./x-pseudo.js": 422,\n\t"./yo": 423,\n\t"./yo.js": 423,\n\t"./zh-cn": 424,\n\t"./zh-cn.js": 424,\n\t"./zh-hk": 425,\n\t"./zh-hk.js": 425,\n\t"./zh-tw": 426,\n\t"./zh-tw.js": 426\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error("Cannot find module \'" + req + "\'");\n\t\te.code = \'MODULE_NOT_FOUND\';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 804;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///804\n')},814:function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nmodule.exports =\n/******/function (modules) {\n    // webpackBootstrap\n    /******/ // The module cache\n    /******/var installedModules = {};\n    /******/\n    /******/ // The require function\n    /******/function __webpack_require__(moduleId) {\n        /******/\n        /******/ // Check if module is in cache\n        /******/if (installedModules[moduleId]) {\n            /******/return installedModules[moduleId].exports;\n            /******/\n        }\n        /******/ // Create a new module (and put it into the cache)\n        /******/var module = installedModules[moduleId] = {\n            /******/i: moduleId,\n            /******/l: false,\n            /******/exports: {}\n            /******/ };\n        /******/\n        /******/ // Execute the module function\n        /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n        /******/ // Flag the module as loaded\n        /******/module.l = true;\n        /******/\n        /******/ // Return the exports of the module\n        /******/return module.exports;\n        /******/\n    }\n    /******/\n    /******/\n    /******/ // expose the modules object (__webpack_modules__)\n    /******/__webpack_require__.m = modules;\n    /******/\n    /******/ // expose the module cache\n    /******/__webpack_require__.c = installedModules;\n    /******/\n    /******/ // define getter function for harmony exports\n    /******/__webpack_require__.d = function (exports, name, getter) {\n        /******/if (!__webpack_require__.o(exports, name)) {\n            /******/Object.defineProperty(exports, name, { enumerable: true, get: getter });\n            /******/\n        }\n        /******/\n    };\n    /******/\n    /******/ // define __esModule on exports\n    /******/__webpack_require__.r = function (exports) {\n        /******/if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n            /******/Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n            /******/\n        }\n        /******/Object.defineProperty(exports, '__esModule', { value: true });\n        /******/\n    };\n    /******/\n    /******/ // create a fake namespace object\n    /******/ // mode & 1: value is a module id, require it\n    /******/ // mode & 2: merge all properties of value into the ns\n    /******/ // mode & 4: return value when already ns object\n    /******/ // mode & 8|1: behave like require\n    /******/__webpack_require__.t = function (value, mode) {\n        /******/if (mode & 1) value = __webpack_require__(value);\n        /******/if (mode & 8) return value;\n        /******/if (mode & 4 && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value && value.__esModule) return value;\n        /******/var ns = Object.create(null);\n        /******/__webpack_require__.r(ns);\n        /******/Object.defineProperty(ns, 'default', { enumerable: true, value: value });\n        /******/if (mode & 2 && typeof value != 'string') for (var key in value) {\n            __webpack_require__.d(ns, key, function (key) {\n                return value[key];\n            }.bind(null, key));\n        } /******/return ns;\n        /******/\n    };\n    /******/\n    /******/ // getDefaultExport function for compatibility with non-harmony modules\n    /******/__webpack_require__.n = function (module) {\n        /******/var getter = module && module.__esModule ?\n        /******/function getDefault() {\n            return module['default'];\n        } :\n        /******/function getModuleExports() {\n            return module;\n        };\n        /******/__webpack_require__.d(getter, 'a', getter);\n        /******/return getter;\n        /******/\n    };\n    /******/\n    /******/ // Object.prototype.hasOwnProperty.call\n    /******/__webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n    };\n    /******/\n    /******/ // __webpack_public_path__\n    /******/__webpack_require__.p = \"\";\n    /******/\n    /******/\n    /******/ // Load entry module and return exports\n    /******/return __webpack_require__(__webpack_require__.s = 17);\n    /******/\n}(\n/************************************************************************/\n/******/{\n\n    /***/17:\n    /***/function _(module, exports, __webpack_require__) {\n\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n            value: true\n        });\n        exports.themes = exports.lite = exports.enterprise = exports.mixin = exports.variable = undefined;\n\n        var _enterprise = __webpack_require__(18);\n\n        var _enterprise2 = _interopRequireDefault(_enterprise);\n\n        var _lite = __webpack_require__(19);\n\n        var _lite2 = _interopRequireDefault(_lite);\n\n        function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n        }\n\n        var getTheme = function getTheme(props) {\n            return props.theme && props.theme['task-manager'] ? props.theme['task-manager'] : _enterprise2.default;\n        }; // prettier-ignore\n        var variable = exports.variable = function variable(name) {\n            return function (props) {\n                return getTheme(props)[name];\n            };\n        };\n        var mixin = exports.mixin = function mixin(name) {\n            return function () {\n                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                    args[_key] = arguments[_key];\n                }\n\n                return function (props) {\n                    var _getTheme$mixins;\n\n                    return (_getTheme$mixins = getTheme(props).mixins)[name].apply(_getTheme$mixins, args);\n                };\n            };\n        };\n\n        var enterprise = exports.enterprise = { 'task-manager': _enterprise2.default }; // prettier-ignore\n        var lite = exports.lite = { 'task-manager': _lite2.default }; // prettier-ignore\n        var themes = exports.themes = { enterprise: enterprise, lite: lite };\n\n        /***/\n    },\n\n    /***/18:\n    /***/function _(module, exports) {\n\n        module.exports = __webpack_require__(296);\n\n        /***/\n    },\n\n    /***/19:\n    /***/function _(module, exports) {\n\n        module.exports = __webpack_require__(299);\n\n        /***/\n    }\n\n    /******/ });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///814\n")},815:function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.StyledGreeting = exports.StyledContainer = undefined;\n\nvar _templateObject = _taggedTemplateLiteral(['\\n    ', ';\\n    display: block;\\n    font-size: ', ';\\n    line-height: 200%;\\n    margin: calc(', ' * 2) calc(', ' * 2);\\n'], ['\\n    ', ';\\n    display: block;\\n    font-size: ', ';\\n    line-height: 200%;\\n    margin: calc(', ' * 2) calc(', ' * 2);\\n']),\n    _templateObject2 = _taggedTemplateLiteral(['\\n    font-weight: bold;\\n    color: ', ';\\n    font-size: ', ';\\n'], ['\\n    font-weight: bold;\\n    color: ', ';\\n    font-size: ', ';\\n']);\n\nvar _styledComponents = __webpack_require__(4);\n\nvar _styledComponents2 = _interopRequireDefault(_styledComponents);\n\nvar _themes = __webpack_require__(429);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nvar StyledContainer = _styledComponents2.default.div(_templateObject, (0, _themes.mixin)('reset')('inline'), (0, _themes.variable)('fontSizeLarge'), (0, _themes.variable)('spacing'), (0, _themes.variable)('spacing'));\n\nvar StyledGreeting = _styledComponents2.default.div(_templateObject2, (0, _themes.variable)('infoColor'), (0, _themes.variable)('fontSizeXXLarge'));\n\nexports.StyledContainer = StyledContainer;\nexports.StyledGreeting = StyledGreeting;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvcGFnZXMvdGFzay1tYW5hZ2VyL1N0YXJ0U3R5bGVzLmpzPzdkZTEiXSwibmFtZXMiOlsiU3R5bGVkQ29udGFpbmVyIiwic3R5bGVkIiwiZGl2IiwiU3R5bGVkR3JlZXRpbmciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7Ozs7QUFFQSxJQUFNQSxrQkFBa0JDLDJCQUFPQyxHQUF6QixrQkFDQSxtQkFBTSxPQUFOLEVBQWUsUUFBZixDQURBLEVBR1csc0JBQVMsZUFBVCxDQUhYLEVBS2Esc0JBQVMsU0FBVCxDQUxiLEVBSzhDLHNCQUFTLFNBQVQsQ0FMOUMsQ0FBTjs7QUFRQSxJQUFNQyxpQkFBaUJGLDJCQUFPQyxHQUF4QixtQkFFTyxzQkFBUyxXQUFULENBRlAsRUFHVyxzQkFBUyxpQkFBVCxDQUhYLENBQU47O1FBTVNGLGUsR0FBQUEsZTtRQUFpQkcsYyxHQUFBQSxjIiwiZmlsZSI6IjgxNS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgdmFyaWFibGUsIG1peGluIH0gZnJvbSAnLi90aGVtZXMnO1xuXG5jb25zdCBTdHlsZWRDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICAgICR7bWl4aW4oJ3Jlc2V0JykoJ2lubGluZScpfTtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBmb250LXNpemU6ICR7dmFyaWFibGUoJ2ZvbnRTaXplTGFyZ2UnKX07XG4gICAgbGluZS1oZWlnaHQ6IDIwMCU7XG4gICAgbWFyZ2luOiBjYWxjKCR7dmFyaWFibGUoJ3NwYWNpbmcnKX0gKiAyKSBjYWxjKCR7dmFyaWFibGUoJ3NwYWNpbmcnKX0gKiAyKTtcbmA7XG5cbmNvbnN0IFN0eWxlZEdyZWV0aW5nID0gc3R5bGVkLmRpdmBcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICBjb2xvcjogJHt2YXJpYWJsZSgnaW5mb0NvbG9yJyl9O1xuICAgIGZvbnQtc2l6ZTogJHt2YXJpYWJsZSgnZm9udFNpemVYWExhcmdlJyl9O1xuYDtcblxuZXhwb3J0IHsgU3R5bGVkQ29udGFpbmVyLCBTdHlsZWRHcmVldGluZyB9O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///815\n")}});